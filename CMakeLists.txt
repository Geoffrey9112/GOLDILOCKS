PROJECT (PRODUCT C CXX)

# support UNSET command since 2.6.3
CMAKE_MINIMUM_REQUIRED (VERSION 2.6.3)

# 
# decide whether recompile or not
#
SET( CMAKE_NEED_RECOMPILE "FALSE" )
IF( CMAKE_CACHE_BITS )
  IF( NOT ${CMAKE_CACHE_BITS} EQUAL ${CMAKE_BITS} OR
      NOT ${CMAKE_CACHE_BUILD_TYPE} EQUAL ${CMAKE_BUILD_TYPE} )
    SET( CMAKE_NEED_RECOMPILE "TRUE" )
  ENDIF()
ELSE()
  SET( CMAKE_NEED_RECOMPILE "TRUE" )
ENDIF()

# version number.
SET (COMPANY_NAME        "SUNJESOFT Inc.")
SET (SHORT_COMPANY_NAME  "SUNJESOFT")
SET (PRODUCT_NAME        "GOLDILOCKS")
SET (PRODUCT_VERSION     "master")
SET (MAJOR_VERSION       2)
SET (MINOR_VERSION       3)
SET (PATCH_VERSION       0)

FIND_PROGRAM(GIT_EXECUTABLE git 
             DOC "Git command line client") 
MARK_AS_ADVANCED(GIT_EXECUTABLE) 

IF(GIT_EXECUTABLE) 
  EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-parse HEAD 
                  OUTPUT_VARIABLE GLIESE_WC_LAST_CHANGED_REV 
                  ERROR_QUIET 
                  OUTPUT_STRIP_TRAILING_WHITESPACE) 
 
  EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD 
                  OUTPUT_VARIABLE GLIESE_WC_LAST_CHANGED_SHORT_REV 
                  ERROR_QUIET 
                  OUTPUT_STRIP_TRAILING_WHITESPACE) 
ELSE() 
  MESSAGE(SEND_ERROR "GIT not found") 
ENDIF() 
 
SET (GLIESE_WC_REVISION       ${GLIESE_WC_LAST_CHANGED_REV}) 
SET (GLIESE_WC_SHORT_REVISION ${GLIESE_WC_LAST_CHANGED_SHORT_REV}) 

SET (GLIESE_HOME          ${CMAKE_CURRENT_SOURCE_DIR}/Gliese/home)
SET (GLIESE_HOME_BIN      ${GLIESE_HOME}/bin)
SET (GLIESE_HOME_CONF     ${GLIESE_HOME}/conf)
SET (GLIESE_HOME_LIB      ${GLIESE_HOME}/lib)
SET (GLIESE_HOME_INCLUDE  ${GLIESE_HOME}/include)
SET (GLIESE_HOME_MSG      ${GLIESE_HOME}/msg)

SET (GLIESE_REGRESS_DIR   ${CMAKE_CURRENT_SOURCE_DIR}/regress/Gliese)

# By default PRODUCT is compiled in Debug mode
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build, options are: None Debug Release Coverage RelWithDebInfo MinSizeRel." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

IF(${CMAKE_BUILD_TYPE} MATCHES "Debug")
  IF(NOT ${CMAKE_C_FLAGS_DEBUG} MATCHES "STL_DEBUG")
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DSTL_DEBUG")
  ENDIF()
  IF(NOT ${CMAKE_CXX_FLAGS_DEBUG} MATCHES "STL_DEBUG")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DSTL_DEBUG")
  ENDIF()
ENDIF()

IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
  SET(CMAKE_C_FLAGS_RELEASE "-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 ${CMAKE_C_FLAGS_RELEASE}")
  SET(CMAKE_CXX_FLAGS_RELEASE "-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 ${CMAKE_CXX_FLAGS_RELEASE}")

  IF(CMAKE_C_COMPILER_ID MATCHES "GNU")
    SET(CMAKE_C_FLAGS_RELEASE "-fno-stack-protector ${CMAKE_C_FLAGS_RELEASE}")
  ENDIF()

  IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    SET(CMAKE_C_FLAGS_RELEASE "-fno-stack-protector ${CMAKE_C_FLAGS_RELEASE}")
  ENDIF()
ENDIF()

IF(${CMAKE_BUILD_TYPE} MATCHES "Validate")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG} -DSTL_DEBUG -DSTL_VALIDATE_DATABASE")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} -DSTL_DEBUG -DSTL_VALIDATE_DATABASE")
ENDIF()

IF(${CMAKE_BUILD_TYPE} MATCHES "Profile")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE} -pg ")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS_RELEASE} -pg ")
ENDIF()

# set platform-specific option
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  SET(SHARED_TARGET_LINK_LIBRARIES rt m)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -std=gnu99 -D_XOPEN_SOURCE=700")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GNU_SOURCE -D_XOPEN_SOURCE=700")
  IF(${CMAKE_BITS} MATCHES "32")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -m32")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
  ELSE()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -m64")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m64")
  ENDIF()
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "AIX")
  SET(SHARED_TARGET_LINK_LIBRARIES rt m)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mminimal-toc -D_LARGE_FILES")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mminimal-toc -D_LARGE_FILES")
  SET(CMAKE_C_FLAGS_DEBUG "-g ${CMAKE_C_FLAGS_DEBUG}")
  SET(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG ${CMAKE_C_FLAGS_MINSIZEREL}")
  SET(CMAKE_C_FLAGS_RELEASE "-O3 -fno-strict-aliasing -DNDEBUG ${CMAKE_C_FLAGS_RELEASE}")
  SET(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  SET(CMAKE_CXX_FLAGS_DEBUG "-g ${CMAKE_CXX_FLAGS_DEBUG}")
  SET(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG ${CMAKE_CXX_FLAGS_MINSIZEREL}")
  SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-strict-aliasing -DNDEBUG ${CMAKE_CXX_FLAGS_RELEASE}")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -fno-strict-aliasing ")
  IF(${CMAKE_BITS} MATCHES "32")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -maix32")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -maix32")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -maix32")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -maix32")
    FOREACH(step CREATE APPEND FINISH)
      STRING(REPLACE "<CMAKE_AR>" "<CMAKE_AR> -X32"
        CMAKE_C_ARCHIVE_${step} "${CMAKE_C_ARCHIVE_${step}}")
    ENDFOREACH()
  ELSE()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -maix64")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -maix64")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -maix64")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -maix64")
    FOREACH(step CREATE APPEND FINISH)
      STRING(REPLACE "<CMAKE_AR>" "<CMAKE_AR> -X64"
        CMAKE_C_ARCHIVE_${step} "${CMAKE_C_ARCHIVE_${step}}")
    ENDFOREACH()
  ENDIF()
  # Native AIX ld 를 사용할 때는 TOC 크기 초과로 인해서
  # -bbigtoc option을 추가적으로 주어야 합니다.
  STRING(REPLACE "-Wl," "-Wl,-bbigtoc,"
    CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "${CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG}")
  STRING(REPLACE "-Wl," "-Wl,-bbigtoc,"
    CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG "${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG}")
  STRING(REPLACE "-Wl," "-Wl,-bbigtoc,"
    CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS}")
  STRING(REPLACE "-Wl," "-Wl,-bbigtoc,"
    CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS}")
  STRING(REPLACE "-Wl," "-Wl,-bbigtoc,"
    CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS}")
  STRING(REPLACE "-Wl," "-Wl,-bbigtoc,"
    CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS}")
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
  SET(SHARED_TARGET_LINK_LIBRARIES rt m)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu99 -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS")
  SET(CMAKE_C_FLAGS_DEBUG "-g ${CMAKE_C_FLAGS_DEBUG}")
  SET(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG ${CMAKE_C_FLAGS_MINSIZEREL}")
  SET(CMAKE_C_FLAGS_RELEASE "-O3 -fno-strict-aliasing -DNDEBUG ${CMAKE_C_FLAGS_RELEASE}")
  SET(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  SET(CMAKE_CXX_FLAGS_DEBUG "-g ${CMAKE_CXX_FLAGS_DEBUG}")
  SET(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG ${CMAKE_CXX_FLAGS_MINSIZEREL}")
  SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-strict-aliasing -DNDEBUG ${CMAKE_CXX_FLAGS_RELEASE}")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -fno-strict-aliasing -std=gnu99 -D_POSIX_PTHREAD_SEMANTICS")
  IF(${CMAKE_BITS} MATCHES "32")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -m32")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
  ELSE()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -m64")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m64")
  ENDIF()
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "HP-UX")
  SET(SHARED_TARGET_LINK_LIBRARIES rt m)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_PSTAT64 -D_REENTRANT")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_PSTAT64 -D_REENTRANT")
  SET(CMAKE_C_FLAGS_DEBUG "-g ${CMAKE_C_FLAGS_DEBUG}")
  SET(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG ${CMAKE_C_FLAGS_MINSIZEREL}")
  SET(CMAKE_C_FLAGS_RELEASE "-O3 -fno-strict-aliasing -DNDEBUG ${CMAKE_C_FLAGS_RELEASE}")
  SET(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  SET(CMAKE_CXX_FLAGS_DEBUG "-g ${CMAKE_CXX_FLAGS_DEBUG}")
  SET(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG ${CMAKE_CXX_FLAGS_MINSIZEREL}")
  SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-strict-aliasing -DNDEBUG ${CMAKE_CXX_FLAGS_RELEASE}")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -fno-strict-aliasing ")
  IF(${CMAKE_BITS} MATCHES "32")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -milp32")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -milp32")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -milp32")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -milp32")
  ELSE()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mlp64")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mlp64")
    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -mlp64")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mlp64")
  ENDIF()
  SET(SHARED_TARGET_LINK_LIBRARIES "${SHARED_TARGET_LINK_LIBRARIES} -lunwind")
  IF(${CMAKE_SYSTEM} MATCHES "11.23")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lipv6")
  ENDIF()
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  SET(SHARED_TARGET_LINK_LIBRARIES ws2_32 Userenv Dbghelp)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP -D_CRT_SECURE_NO_DEPRECATE -wd4820 -wd4819 -wd4255 -wd4668 -wd4127 -wd4098 -wd4005 -wd4100 -wd4242 -wd4267 -wd4114 -wd4296 -wd4244 -wd4389 -wd4388 -wd4702 -wd4018 -wd4756 -wd4548 -wd4711 -wd4200 -wd4206 -wd4201 -wd4710 -wd4996")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP -D_CRT_SECURE_NO_DEPRECATE -wd4820 -wd4819 -wd4255 -wd4668 -wd4127 -wd4098 -wd4005 -wd4100 -wd4242 -wd4267 -wd4114 -wd4296 -wd4244 -wd4389 -wd4388 -wd4702 -wd4756 -wd4548 -wd4711 -wd4200 -wd4206 -wd4201 -wd4710 -wd4996")
ENDIF()

# Documentation
# building a documentation on linux only
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  OPTION(BUILD_DOCUMENTATION "Build PRODUCT Documentation." ON)
ELSE()
  OPTION(BUILD_DOCUMENTATION "Build PRODUCT Documentation." OFF)
ENDIF()

# If choose to build documentation, then search for Doxygen executables.
INCLUDE (${CMAKE_ROOT}/Modules/CMakeDependentOption.cmake)
CMAKE_DEPENDENT_OPTION(BUILD_DOCUMENTATION_API 
                      "Build API Documentation with Doxygen" ON
                       BUILD_DOCUMENTATION OFF)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")

SET(PRODUCT_LAYER_STANDARD_DIR              ${CMAKE_CURRENT_SOURCE_DIR}/layer/Standard)
SET(PRODUCT_LAYER_DATATYPE_DIR              ${CMAKE_CURRENT_SOURCE_DIR}/layer/DataType)
SET(PRODUCT_LAYER_COMMUNICATION_DIR         ${CMAKE_CURRENT_SOURCE_DIR}/layer/Communication)
SET(PRODUCT_LAYER_KERNEL_DIR                ${CMAKE_CURRENT_SOURCE_DIR}/layer/Kernel)
SET(PRODUCT_LAYER_SERVERCOMMUNICATION_DIR   ${CMAKE_CURRENT_SOURCE_DIR}/layer/ServerCommunication)
SET(PRODUCT_LAYER_STORAGEMANAGER_DIR        ${CMAKE_CURRENT_SOURCE_DIR}/layer/StorageManager)
SET(PRODUCT_LAYER_EXECUTIONLIBRARY_DIR      ${CMAKE_CURRENT_SOURCE_DIR}/layer/ExecutionLibrary)
SET(PRODUCT_LAYER_SQLPROCESSOR_DIR          ${CMAKE_CURRENT_SOURCE_DIR}/layer/SqlProcessor)
SET(PRODUCT_LAYER_SESSION_DIR               ${CMAKE_CURRENT_SOURCE_DIR}/layer/Session)
SET(PRODUCT_LAYER_SERVERLIBRARY_DIR         ${CMAKE_CURRENT_SOURCE_DIR}/layer/ServerLibrary)
SET(PRODUCT_LAYER_GLIESELIBRARY_DIR         ${CMAKE_CURRENT_SOURCE_DIR}/layer/GlieseLibrary)
SET(PRODUCT_LAYER_ODBC_DIR                  ${PRODUCT_LAYER_GLIESELIBRARY_DIR}/ODBC)
SET(PRODUCT_LAYER_JDBC_DIR                  ${PRODUCT_LAYER_GLIESELIBRARY_DIR}/JDBC)
SET(PRODUCT_LAYER_GOLDILOCKSESQLLIB_DIR     ${PRODUCT_LAYER_GLIESELIBRARY_DIR}/esql)
SET(PRODUCT_LAYER_PYGLIESELIB_DIR           ${PRODUCT_LAYER_GLIESELIBRARY_DIR}/PyGliese)
SET(PRODUCT_LAYER_GLIESETOOL_DIR            ${CMAKE_CURRENT_SOURCE_DIR}/layer/GlieseTool)
SET(PRODUCT_LAYER_TABLEDIFF_DIR             ${PRODUCT_LAYER_GLIESETOOL_DIR}/tablediff)

SET(PRODUCT_LAYER_GLIESEA_SHARED_SOURCES)
SET(PRODUCT_LAYER_CLIENT_SOURCES)
SET(GENERATED_FLEX_FILES)
SET(GENERATED_BISON_FILES)

############################################
# PACKAGE( make package )
# 추후 install_layout.cmake로 수정해야함.
############################################

IF(NOT DEFINED CMAKE_INSTALL_PREFIX)
  SET(CMAKE_INSTALL_PREFIX $ENV{DB_HOME})
ENDIF(NOT DEFINED CMAKE_INSTALL_PREFIX)

SET( INSTALL_ADMINDIR       goldilocks_home/admin )
SET( INSTALL_BINDIR         goldilocks_home/bin )
SET( INSTALL_LIBDIR         goldilocks_home/lib )
SET( INSTALL_INCDIR         goldilocks_home/include )
SET( INSTALL_SAMPLEDIR      goldilocks_home/sample )
SET( INSTALL_MSGDIR         goldilocks_home/msg )
SET( INSTALL_DOCDIR         goldilocks_home/doc )
SET( INSTALL_TMPDIR         goldilocks_home/tmp )

SET( INSTALL_BACKUPDIR      goldilocks_data/backup )
SET( INSTALL_ARCHIVELOGDIR  goldilocks_data/archive_log )
SET( INSTALL_WALDIR         goldilocks_data/wal )
SET( INSTALL_TRCDIR         goldilocks_data/trc )
SET( INSTALL_DBDIR          goldilocks_data/db )
SET( INSTALL_CONFDIR        goldilocks_data/conf )

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

  SET(CPACK_GENERATOR "NSIS")

  # Visual C++ Redistributable Packages for Visual Studio 2013
  # Visual Studio 2013용 Visual C++ 재배포 가능 패키지 
  #
  # http://www.microsoft.com/ko-KR/download/details.aspx?id=40784
  #
  # package 장비 해당 경로에 미리 다운받아야 한다.

  SET(PRODUCT_WINDOWS_PREREQUISITE_DIR "C:\\\\prerequisite")

  INSTALL( PROGRAMS    ${PRODUCT_WINDOWS_PREREQUISITE_DIR}/vcredist_x86.exe
           COMPONENT   System
           DESTINATION ${INSTALL_TMPDIR} )

  IF(${CMAKE_BITS} MATCHES "64")
    INSTALL( PROGRAMS    ${PRODUCT_WINDOWS_PREREQUISITE_DIR}/vcredist_x64.exe
             COMPONENT   System
             DESTINATION ${INSTALL_TMPDIR} )
  ENDIF()
ELSE()
  SET(CPACK_GENERATOR "TGZ")
ENDIF()

##########################################################################
## Begin NSIS Specific options
##------------------------------------------------------------------------

SET(CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS} "!include x64.nsh")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS    ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}    "!include x64.nsh")
SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS  ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}  "!include x64.nsh")

IF(${CMAKE_BITS} MATCHES "64")
  SET(CPACK_NSIS_DISPLAY_NAME "${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION} for x64")
ELSE()
  SET(CPACK_NSIS_DISPLAY_NAME "${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION} for x86")
ENDIF()

IF(${CMAKE_BITS} MATCHES "64")
  SET(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES64")
  SET(CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS} "SetRegView 64")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS    ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}    "SetRegView 64")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS  ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}  "SetRegView 64")
ENDIF()

# 시스템 환경변수에 GOLDILOCKS 추가
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS   ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}   "WriteRegStr HKLM \\\"SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment\\\" \\\"GOLDILOCKS_HOME\\\" '$INSTDIR\\\\goldilocks_home'")
SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "DeleteRegValue HKLM \\\"SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment\\\" \\\"GOLDILOCKS_HOME\\\"")

# 시스템 환경변수에 PATH에 bin, lib 추가
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "StrCpy $ADD_TO_PATH_ALL_USERS \\\"1\\\"")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Push $INSTDIR\\\\goldilocks_home\\\\bin")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Call AddToPath")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Push $INSTDIR\\\\goldilocks_home\\\\lib")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Call AddToPath")

SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "StrCpy $ADD_TO_PATH_ALL_USERS \\\"1\\\"")
SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "Push $INSTDIR\\\\goldilocks_home\\\\bin")
SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "Call un.RemoveFromPath")
SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "Push $INSTDIR\\\\goldilocks_home\\\\lib")
SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "Call un.RemoveFromPath")

# Visual C++ Redistributable Packages for Visual Studio 2013 설치
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "ReadRegStr $1 HKLM \\\"SOFTWARE\\\\Microsoft\\\\VisualStudio\\\\12.0\\\\VC\\\\Runtimes\\\\x86\\\" \\\"Installed\\\"")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Strcmp $1 1 installed_x86")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "ReadRegStr $1 HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\VisualStudio\\\\12.0\\\\VC\\\\Runtimes\\\\x86\\\" \\\"Installed\\\"")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Strcmp $1 1 installed_x86")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "ExecWait '\\\"$INSTDIR\\\\goldilocks_home\\\\tmp\\\\vcredist_x86.exe\\\"'")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "installed_x86:")

IF(${CMAKE_BITS} MATCHES "64")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "ReadRegStr $1 HKLM \\\"SOFTWARE\\\\Microsoft\\\\VisualStudio\\\\12.0\\\\VC\\\\Runtimes\\\\x64\\\" \\\"Installed\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Strcmp $1 1 installed_x64")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "ReadRegStr $1 HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\VisualStudio\\\\12.0\\\\VC\\\\Runtimes\\\\x64\\\" \\\"Installed\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Strcmp $1 1 installed_x64")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "ExecWait '\\\"$INSTDIR\\\\goldilocks_home\\\\tmp\\\\vcredist_x64.exe\\\"'")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "installed_x64:")
ENDIF()

SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "Delete \\\"$INSTDIR\\\\goldilocks_home\\\\tmp\\\\*.*\\\"")
SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "RMDir  \\\"$INSTDIR\\\\goldilocks_home\\\\tmp\\\"")

# ODBC Driver Manager에 ODBC Driver 등록
IF(${CMAKE_BITS} MATCHES "64")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\ODBC Drivers\\\" \\\"GOLDILOCKS_64\\\"  \\\"Installed\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"APILevel\\\"  \\\"1\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"ConnectFunctions\\\"  \\\"YYY\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"CPTimeout\\\"  \\\"60\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"Driver\\\"  \\\"$INSTDIR\\\\goldilocks_home\\\\lib\\\\goldilockscs-ul64.dll\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"DriverODBCVer\\\"  \\\"03.50\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"FileUsage\\\"  \\\"0\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"Setup\\\"  \\\"$INSTDIR\\\\goldilocks_home\\\\lib\\\\goldilockssetup64.dll\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\" \\\"SQLLevel\\\"  \\\"1\\\"")
ELSE()
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "\\\${If} \\\${RunningX64}")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\ODBC Drivers\\\" \\\"GOLDILOCKS_32\\\"  \\\"Installed\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"APILevel\\\"  \\\"1\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"ConnectFunctions\\\"  \\\"YYY\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"CPTimeout\\\"  \\\"60\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"Driver\\\"  \\\"$INSTDIR\\\\goldilocks_home\\\\lib\\\\goldilockscs.dll\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"DriverODBCVer\\\"  \\\"03.50\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"FileUsage\\\"  \\\"0\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"Setup\\\"  \\\"$INSTDIR\\\\goldilocks_home\\\\lib\\\\goldilockssetup32.dll\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"SQLLevel\\\"  \\\"1\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "\\\${Else}")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\ODBC Drivers\\\" \\\"GOLDILOCKS_32\\\"  \\\"Installed\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"APILevel\\\"  \\\"1\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"ConnectFunctions\\\"  \\\"YYY\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"CPTimeout\\\"  \\\"60\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"Driver\\\"  \\\"$INSTDIR\\\\goldilocks_home\\\\lib\\\\goldilockscs.dll\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"DriverODBCVer\\\"  \\\"03.50\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"FileUsage\\\"  \\\"0\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"Setup\\\"  \\\"$INSTDIR\\\\goldilocks_home\\\\lib\\\\goldilockssetup32.dll\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "WriteRegStr HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\" \\\"SQLLevel\\\"  \\\"1\\\"")
  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ${CPACK_NSIS_EXTRA_INSTALL_COMMANDS} "\\\${EndIf}")
ENDIF()

IF(${CMAKE_BITS} MATCHES "64")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "DeleteRegKey   HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_64\\\"")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "DeleteRegValue HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\ODBC Drivers\\\" \\\"GOLDILOCKS_64\\\"")
ELSE()
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "\\\${If} \\\${RunningX64}")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "DeleteRegKey   HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\"")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "DeleteRegValue HKLM \\\"SOFTWARE\\\\Wow6432Node\\\\ODBC\\\\ODBCINST.INI\\\\ODBC Drivers\\\" \\\"GOLDILOCKS_32\\\"")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "\\\${Else}")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "DeleteRegKey   HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\GOLDILOCKS_32\\\"")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "DeleteRegValue HKLM \\\"SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\ODBC Drivers\\\" \\\"GOLDILOCKS_32\\\"")
  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS ${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS} "\\\${EndIf}")
ENDIF()

STRING(REPLACE ";" "\n" CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS "${CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS}")
STRING(REPLACE ";" "\n" CPACK_NSIS_EXTRA_INSTALL_COMMANDS    "${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}")
STRING(REPLACE ";" "\n" CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS  "${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}")

##------------------------------------------------------------------------
## End NSIS Specific options
##########################################################################

SET(CPACK_MONOLITHIC_INSTALL 1 CACHE INTERNAL "")
INCLUDE(PackageName.cmake)

IF(${CMAKE_TARGET_HOST_TYPE} MATCHES "server")
  INSTALL( FILES ${GLIESE_HOME}/archive_log/README          DESTINATION ${INSTALL_ARCHIVELOGDIR} )
  INSTALL( FILES ${GLIESE_HOME}/backup/README               DESTINATION ${INSTALL_BACKUPDIR} )
  INSTALL( FILES ${GLIESE_HOME}/wal/README                  DESTINATION ${INSTALL_WALDIR} )
  INSTALL( FILES ${GLIESE_HOME}/trc/README                  DESTINATION ${INSTALL_TRCDIR} )
  INSTALL( FILES ${GLIESE_HOME}/db/README                   DESTINATION ${INSTALL_DBDIR} )

  INSTALL( FILES ${GLIESE_HOME}/conf/goldilocks.properties.conf  DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/goldilocks.listener.conf    DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/goldilocks.invited.conf     DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/goldilocks.excluded.conf    DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/tablediff.conf         DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/cyclone.master.conf    DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/cyclone.slave.conf     DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/cyclonem.master.conf    DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/cyclonem.slave.conf     DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/logmirror.master.conf  DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/logmirror.slave.conf   DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/odbc.ini               DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/gsql.ini               DESTINATION ${INSTALL_CONFDIR} )
  INSTALL( FILES ${GLIESE_HOME}/conf/README                 DESTINATION ${INSTALL_CONFDIR} )

  INSTALL( DIRECTORY ${GLIESE_HOME}/admin/                  DESTINATION ${INSTALL_ADMINDIR} )
ENDIF()

INSTALL( FILES ${GLIESE_HOME}/include/README             DESTINATION ${INSTALL_INCDIR} )
INSTALL( FILES ${GLIESE_HOME}/lib/README                 DESTINATION ${INSTALL_LIBDIR} )
INSTALL( FILES ${GLIESE_HOME}/msg/README                 DESTINATION ${INSTALL_MSGDIR} )
INSTALL( FILES ${GLIESE_HOME}/bin/README                 DESTINATION ${INSTALL_BINDIR} )
INSTALL( DIRECTORY ${GLIESE_HOME}/sample/                DESTINATION ${INSTALL_SAMPLEDIR} )

##################################################
# GENERRMSG ( make generrmsg )
##################################################
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  ADD_CUSTOM_TARGET( generrmsg
                     COMMAND ${GLIESE_HOME_BIN}/errmsg.bat
                     COMMAND ${CMAKE_COMMAND} -E copy goldilocks_error.msg ${GLIESE_HOME_MSG} )
ELSE()
  ADD_CUSTOM_TARGET( generrmsg
                     COMMAND ${GLIESE_HOME_BIN}/errmsg.sh
                     COMMAND ${CMAKE_COMMAND} -E copy goldilocks_error.msg ${GLIESE_HOME_MSG} )
ENDIF()

IF( "${CMAKE_GENERATOR}" MATCHES Make )
  INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_BUILD_TOOL} generrmsg)")
ENDIF( "${CMAKE_GENERATOR}" MATCHES Make )

INSTALL( FILES ${GLIESE_HOME}/msg/goldilocks_error.msg DESTINATION ${INSTALL_MSGDIR} )

SET( CPACK_PACKAGE_VENDOR ${COMPANY_NAME} )
SET( CPACK_PACKAGE_NAME   ${PRODUCT_NAME} )

SET( VERSION "${PRODUCT_VERSION}.${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}" )
SET( CPACK_PACKAGE_VERSION_PRODUCT ${PRODUCT_VERSION} )
SET( CPACK_PACKAGE_VERSION_MAJOR   ${MAJOR_VERSION} )
SET( CPACK_PACKAGE_VERSION_MINOR   ${MINOR_VERSION} )
SET( CPACK_PACKAGE_VERSION_PATCH   ${PATCH_VERSION} )
GET_PACKAGE_FILE_NAME( CPACK_PACKAGE_FILE_NAME )
GET_PACKAGE_FILE_NAME( CPACK_SOURCE_PACKAGE_FILE_NAME )

INCLUDE( CPack )

##################################################
# Flex & Bison
##################################################

INCLUDE( FlexBison.cmake )

##################################################
# Compilation
##################################################

ADD_SUBDIRECTORY(${PRODUCT_LAYER_STANDARD_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_DATATYPE_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_COMMUNICATION_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_KERNEL_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_SERVERCOMMUNICATION_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_STORAGEMANAGER_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_EXECUTIONLIBRARY_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_SQLPROCESSOR_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_SESSION_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_SERVERLIBRARY_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_GLIESELIBRARY_DIR})
ADD_SUBDIRECTORY(${PRODUCT_LAYER_GLIESETOOL_DIR})


##################################################
# Set recompile information
##################################################

SET( CMAKE_CACHE_BITS ${CMAKE_BITS} CACHE STRING "" FORCE )
SET( CMAKE_CACHE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "" FORCE )

##################################################
# ETAGS ( make etags )
##################################################

IF (UNIX)
  ADD_CUSTOM_TARGET(etags COMMAND rm -f TAGS | find -L `pwd` -type f -name '*.[chyl]' -print | egrep -v "Gliese/home" | xargs etags --append -o TAGS)
ENDIF (UNIX)

# TODO : dependency 추가

