############################################################
# TableDiff 설정 파일
# SOURCE는 기준이 되는 테이블
# TARGET은 SOURCE와 다른 데이터를 갱신, 삽입, 삭제할 테이블
############################################################

##### SOURCE 테이블 설정: [필수] #####
SOURCE_URL      = jdbc:goldilocks://127.0.0.1:22581/test
SOURCE_USER     = TEST
SOURCE_PASSWORD = test
SOURCE_SCHEMA   = PUBLIC
SOURCE_TABLE    = T1

##### TARGET 테이블 설정: [필수] #####
TARGET_URL      = jdbc:goldilocks://127.0.0.1:22581/test
TARGET_USER     = TEST
TARGET_PASSWORD = test
TARGET_SCHEMA   = PUBLIC
TARGET_TABLE    = T2

##### TableDiff의 수행 범위; DIFF: 정합성 검증만 수행, SYNC: 정합성 검증 및 싱크 수행 #####
# DIFF로 할 경우 diff_bin_file이 생성됨. 추후 sunje.goldilocks.tool.diff.TableSync로 싱크 수행 가능
OPERATION       = SYNC

##### 싱크 정책 설정: [필수] #####
# TARGET_INSERT: source에는 있는 키가 target에 없으면 target에 삽입
# TARGET_UPDATE: 키가 아닌 컬럼의 내용이 다르면 target을 갱신
# TARGET_DELETE: source에는 없는 키가 target에 있으면 target에 삭제
# SOURCE_INSERT: source에는 없는 키가 target에 있으면 source에 삽입
#
# 모두 OFF이면 싱크 수행하지 않고 로우 비교만 수행
# TARGET_DELETE와 SOURCE_INSERT는 둘다 ON일 수 없음
TARGET_INSERT = ON
TARGET_UPDATE = ON
TARGET_DELETE = ON
SOURCE_INSERT = OFF

##### 제외할 컬럼 설정: [옵션] #####
# 비교 대상에서 제외할 컬럼을 ,로 구분하여 나열
# KEY 컬럼은 제외될 수 없음
#EXCLUDED_COLUMNS  = C1, C2, C3

##### 비교 대상 ROW에 대한 조건 설정: [옵션] #####
#WHERE_CLAUSE = B = 'xxx'

##### 콘솔로 작업과정 출력할 row 단위 수: [옵션]; 없으면 100000 #####
DISPLAY_ROW_UNIT = 100000

##### 싱크 결과를 기록할 파일명 설정: [옵션]; 없으면 기본으로 tablesync.log에 기록 #####
SYNC_OUT_FILE = tablesync.log

##### DIFF 결과를 기록할 파일명 설정: [옵션]; 없으면 기본으로 tablediff.log에 기록 #####
DIFF_OUT_FILE = tablediff.log

##### DIFF 결과를 binary로 저장할 파일명 설정: OPERATION이 SYNC이면 무시됨 #####
DIFF_BIN_FILE = tablediff.bin

##### 싱크에 사용한 DML이 성공했을 때 로깅할 것인가?: [옵션]; 없으면 기본으로 OFF #####
# 다량의 갱신이 발생시 로깅으로 인한 성능 저하가 발생할 수 있음
# DML 실패시는 무조건 로깅
LOGGING_ON_SUCCESS = OFF

##### Diff시 해당 key나 row를 로깅할 것인가?: [옵션]; 없으면 기본으로 OFF #####
LOGGING_ON_DIFF = OFF

##### SYNC의 job queue size: [옵션]; 없으면 기본으로 100 #####
# 한 워커(쓰레드)가 단위 JOB을 처리하는 동안 SYNC의 main 쓰레드가 몇개의 job을
# 할당할 수 있는가를 짐작하여 이 값을 정해야 함.
# 이 값이 너무 작으면 간혹 응답시간이 긴 워커때문에 main 쓰레드가 job assign을 하다가 대기할 수 있음
# 이 값이 너무 크면, 버퍼 공간이 커짐
# JOB_QUEUE_SIZE * JOB_UNIT_SIZE 개수만큼의 row 버퍼가 할당됨
JOB_QUEUE_SIZE = 100

##### SYNC의 작업 쓰레드 개수: [옵션]; 없으면 기본으로 1 #####
JOB_THREAD = 4

##### SUNC의 작업 당 질의수: [옵션]; 없으면 기본으로 100 #####
JOB_UNIT_SIZE = 100


##### 에러 발생시 call stack을 표시하는 옵션: [옵션]; 없으면 기본으로 OFF #####
DISPLAY_CALL_STACK = OFF

##### 병렬 패치를 위한 disjoint 조건: [옵션] #####
# 이 프로퍼티 개수만큼의 패치 쓰레드가 병렬 작업 함
# 개수는 제한 없음
# 이 조건들은 서로 disjoint해야 하며, union한 것은 전체 셋과 동일해야 함
# 조건에 사용되는 컬럼은 반드시 primary key의 앞부분이어야 함; primary key index를 탈 수 있는 조건이어야 함
#PARTITION_RANGE1 = S12345='12345'
#PARTITION_RANGE2 = S12345='12346'
#PARTITION_RANGE3 = S12345='12347'
#PARTITION_RANGE4 = S12345='12348'

