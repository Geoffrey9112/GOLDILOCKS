CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

#set the Standard Library
SET (ST_LIBRARY st)
LINK_DIRECTORIES (${PRODUCT_LAYER_STANDARD_DIR}/dev/lib)

#set the DataType Library
SET (DT_LIBRARY dt)
LINK_DIRECTORIES (${PRODUCT_LAYER_DATATYPE_DIR}/dev/lib)

#set the Communication Library
SET (CM_LIBRARY cm)
LINK_DIRECTORIES (${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/lib)

# include directories
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_STANDARD_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_DATATYPE_DIR}/dev/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/include)

SET (EXECUTABLE_OUTPUT_PATH ${GLIESE_HOME_BIN})

AUX_SOURCE_DIRECTORY(dev/src/ztlc ZTL_COMMUNICATION_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(dev/src/ztle ZTL_ERROR_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(dev/src/ztlm ZTL_MAIN_SOURCE_FILES)

SET( ZTL_SOURCES_FILES ${ZTL_COMMUNICATION_SOURCE_FILES}
                       ${ZTL_ERROR_SOURCE_FILES}
                       ${ZTL_MAIN_SOURCE_FILES} )

IF( ${CMAKE_CPP_COMPILER} )
    SET_SOURCE_FILES_PROPERTIES( ${ZTL_SOURCE_FILES} PROPERTIES LANGUAGE CXX )
ENDIF()

ADD_EXECUTABLE( glsnr ${ZTL_COMMUNICATION_SOURCE_FILES}
                      ${ZTL_ERROR_SOURCE_FILES}
                      ${ZTL_MAIN_SOURCE_FILES} )

TARGET_LINK_LIBRARIES( glsnr   ${CM_LIBRARY} 
                               ${DT_LIBRARY} 
                               ${ST_LIBRARY} )

############################################
# PACKAGE( make package )
############################################

INSTALL( PROGRAMS ${GLIESE_HOME_BIN}/glsnr DESTINATION ${INSTALL_BINDIR} )
