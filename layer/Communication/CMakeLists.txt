CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
# Avoid warnings in higher versions
IF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.6)
 CMAKE_POLICY(VERSION 2.8)
ENDIF()

# If choose to build documentation, then search for Doxygen executables.
INCLUDE (${CMAKE_ROOT}/Modules/CMakeDependentOption.cmake)
CMAKE_DEPENDENT_OPTION(BUILD_DOCUMENTATION_API 
                      "Build API Documentation with Doxygen" ON
                       BUILD_DOCUMENTATION OFF)

# If choose to build documentation, then search for Doxygen executables.
IF(BUILD_DOCUMENTATION_API)
  FIND_PACKAGE(Doxygen REQUIRED)

  OPTION(DOXYGEN_SHORT_NAMES "Build Standard Layer documentations with short files name" OFF)
  MARK_AS_ADVANCED(DOXYGEN_SHORT_NAMES)
  IF(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES YES)
  ELSE(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES NO)
  ENDIF(DOXYGEN_SHORT_NAMES)

  #
  # Configure the script and the doxyfile, then add target
  #
  SET(HAVE_DOT_YESNO NO)
  IF(DOT)
    SET(HAVE_DOT_YESNO YES)
    IF(NOT DOT_PATH)
      GET_FILENAME_COMPONENT(DOT_PATH ${DOT} PATH)
    ENDIF(NOT DOT_PATH)
  ENDIF(DOT)

  # API target
  CONFIGURE_FILE(
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_CM_API.in
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_CM_API)

  ADD_CUSTOM_TARGET(Doxygen_CM_API ALL
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_CM_API
    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_CM_API
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
ENDIF(BUILD_DOCUMENTATION_API)

SET( CML_MARSHALL_SMALL_PREFIX "cml" )
SET( CML_MARSHALL_LARGE_PREFIX "CML" )

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/dev/include/cmlRowStatusDef.h.in
               ${CMAKE_CURRENT_SOURCE_DIR}/dev/include/${CML_MARSHALL_SMALL_PREFIX}RowStatusDef.h)

INCLUDE_DIRECTORIES( ${PRODUCT_LAYER_STANDARD_DIR}/dev/include )
INCLUDE_DIRECTORIES( ${PRODUCT_LAYER_DATATYPE_DIR}/dev/include )
INCLUDE_DIRECTORIES( ${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/include )
INCLUDE_DIRECTORIES( ${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/src/include )

# common source files
AUX_SOURCE_DIRECTORY( ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/cml   CM_LIBRARY_SOURCE_FILES )
AUX_SOURCE_DIRECTORY( ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/cmp   CM_PROTOCOL_SOURCE_FILES )
AUX_SOURCE_DIRECTORY( ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/cmg   CM_GENERAL_SOURCE_FILES )

SET( LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/dev/lib )

# LIBRARY
SET(CM_SOURCES_FILES ${CM_LIBRARY_SOURCE_FILES}
                     ${CM_PROTOCOL_SOURCE_FILES} 
                     ${CM_GENERAL_SOURCE_FILES} )

IF( ${CMAKE_CPP_COMPILER} )
    SET_SOURCE_FILES_PROPERTIES( ${CM_SOURCES_FILES} PROPERTIES LANGUAGE CXX )
ENDIF()

LIST(REMOVE_DUPLICATES CM_SOURCES_FILES)
ADD_LIBRARY(cm ${CM_SOURCES_FILES})

SET(PRODUCT_LAYER_GLIESEA_SHARED_SOURCES ${PRODUCT_LAYER_GLIESEA_SHARED_SOURCES}
                                         ${CM_SOURCES_FILES}
    PARENT_SCOPE)

SET(PRODUCT_LAYER_CLIENT_SOURCES ${PRODUCT_LAYER_CLIENT_SOURCES}
                                 ${CM_SOURCES_FILES}
    PARENT_SCOPE)
