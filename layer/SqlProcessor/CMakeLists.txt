CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
# Avoid warnings in higher versions
IF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.6)
 CMAKE_POLICY(VERSION 2.8)
ENDIF()

# If choose to build documentation, then search for Doxygen executables.
INCLUDE (${CMAKE_ROOT}/Modules/CMakeDependentOption.cmake)
CMAKE_DEPENDENT_OPTION(BUILD_DOCUMENTATION_API 
                      "Build API Documentation with Doxygen" ON
                       BUILD_DOCUMENTATION OFF)

# If choose to build documentation, then search for Doxygen executables.
IF(BUILD_DOCUMENTATION_API)
  FIND_PACKAGE(Doxygen REQUIRED)

  OPTION(DOXYGEN_SHORT_NAMES "Build Standard Layer documentations with short files name" OFF)
  MARK_AS_ADVANCED(DOXYGEN_SHORT_NAMES)
  IF(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES YES)
  ELSE(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES NO)
  ENDIF(DOXYGEN_SHORT_NAMES)

  #
  # Configure the script and the doxyfile, then add target
  #
  SET(HAVE_DOT_YESNO NO)
  IF(DOT)
    SET(HAVE_DOT_YESNO YES)
    IF(NOT DOT_PATH)
      GET_FILENAME_COMPONENT(DOT_PATH ${DOT} PATH)
    ENDIF(NOT DOT_PATH)
  ENDIF(DOT)

  # API target
  CONFIGURE_FILE(
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_SqlProcessor_API.in
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_SqlProcessor_API)

  ADD_CUSTOM_TARGET(Doxygen_SqlProcessor_API ALL
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_SqlProcessor_API
    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_SqlProcessor_API
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
ENDIF(BUILD_DOCUMENTATION_API)

SET( CML_MARSHALL_SMALL_PREFIX "qll" )
SET( CML_MARSHALL_LARGE_PREFIX "QLL" )

CONFIGURE_FILE(${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/include/cmlRowStatusDef.h.in
               ${CMAKE_CURRENT_SOURCE_DIR}/dev/include/${CML_MARSHALL_SMALL_PREFIX}RowStatusDef.h)

INCLUDE_DIRECTORIES(${PRODUCT_LAYER_STANDARD_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_DATATYPE_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_KERNEL_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_SERVERCOMMUNICATION_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_STORAGEMANAGER_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_EXECUTIONLIBRARY_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_SQLPROCESSOR_DIR}/dev/src/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_SQLPROCESSOR_DIR}/dev/include)

# common source files
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qll QL_LIBRARY_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlg QL_GENERAL_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlp QL_PARSER_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlv QL_VALIDATOR_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlo QL_OPTIMIZER_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlb QL_BIND_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qld QL_DATABASE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlx QL_EXECUTOR_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlf QL_FETCH_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qle QL_EXPLAIN_PLAN_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlt QL_DDL_TABLESPACE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qla QL_DDL_AUTHORIZATION_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qls QL_DDL_SCHEMA_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlr QL_DDL_TABLE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlrc QL_DDL_TABLE_CONSTRAINT_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qli QL_DDL_INDEX_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlq QL_DDL_SEQUENCE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qly QL_DDL_SYNONYM_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qltx QL_TRANS_CONTROL_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlss QL_SYSSES_CONTROL_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlcr QL_CURSOR_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln QL_NODE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln/qlnv QL_NODE_VALIDATION_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln/qlnc QL_NODE_CANDIDATE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln/qlno QL_NODE_CODE_OPTIMIZER_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln/qlnd QL_NODE_DATA_OPTIMIZER_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln/qlnx QL_NODE_EXECUTOR_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln/qlnf QL_NODE_FUNCTION_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qln/qlne QL_NODE_EXPLAIN_SOURCE_FILES)

SET (LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/dev/lib)

# -----------------------------------------------------
# Parser의 Prefix
# -----------------------------------------------------
SET( STL_PARSER_PREFIX  "qlpParser" )

# -----------------------------------------------------
# Grammer에서 사용될 Macro Body가 구현되어 있는 파일명 
# -----------------------------------------------------
SET( STL_PARSER_MACRO   "qlpParserMacro" )

# -----------------------------------------------------
# Lexer 분석 결과 출력 (출력시 "1"로 설정)
# -----------------------------------------------------
SET( STL_PARSER_PRINT_FLAG "0" )

# -----------------------------------------------------
# stlParseLex.h.in을 변환시킬 파일명
# -----------------------------------------------------
SET( STL_PARSER_LEX      "${STL_PARSER_PREFIX}Lex" )

# -----------------------------------------------------
# Grammer 파일에 설정될 헤더 지정
# -----------------------------------------------------
SET( STL_INCLUDE_GRAMMER_H 
"#include <${STL_PARSER_LEX}.h>
#include <${STL_PARSER_MACRO}.h>" )

# -----------------------------------------------------
# Lexer 파일에 설정될 헤더 지정
# -----------------------------------------------------
SET( STL_INCLUDE_LEXER_H 
"#include <${STL_PARSER_LEX}.h>
#include <${STL_PARSER_MACRO}.h>
#include <${STL_PARSER_PREFIX}.tab.h>" )

CONFIGURE_FILE(${PRODUCT_LAYER_STANDARD_DIR}/dev/src/stl/stlGram.y.in
               ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlp/${STL_PARSER_PREFIX}.y)
CONFIGURE_FILE(${PRODUCT_LAYER_STANDARD_DIR}/dev/src/stl/stlLex.l.in
               ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlp/${STL_PARSER_PREFIX}.l)
CONFIGURE_FILE(${PRODUCT_LAYER_STANDARD_DIR}/dev/include/stlParseLex.h.in
               ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/include/${STL_PARSER_LEX}.h)

STL_FLEX_TARGET(QL_SCANNER
                ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlp/${STL_PARSER_PREFIX}.l
                ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlp/${STL_PARSER_PREFIX}.yy.c
                COMPILE_FLAGS "-P${STL_PARSER_PREFIX}")
SET_SOURCE_FILES_PROPERTIES(${STL_FLEX_QL_SCANNER_OUTPUTS} PROPERTIES GENERATED 1)

STL_BISON_TARGET(QL_PARSER
                 ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlp/${STL_PARSER_PREFIX}.y
                 ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/qlp/${STL_PARSER_PREFIX}.tab.c
                 COMPILE_FLAGS "--name-prefix=${STL_PARSER_PREFIX} --defines=${CMAKE_CURRENT_SOURCE_DIR}/dev/src/include/${STL_PARSER_PREFIX}.tab.h")
SET_SOURCE_FILES_PROPERTIES(${STL_BISON_QL_PARSER_OUTPUTS} PROPERTIES GENERATED 1)

# LIBRARY
SET(QP_SOURCES_FILES ${QL_LIBRARY_SOURCE_FILES}
                     ${QL_GENERAL_SOURCE_FILES} 
                     ${QL_PARSER_SOURCE_FILES} 
                     ${QL_VALIDATOR_SOURCE_FILES} 
                     ${QL_OPTIMIZER_SOURCE_FILES} 
                     ${QL_BIND_SOURCE_FILES} 
                     ${QL_DATABASE_SOURCE_FILES}
                     ${QL_EXECUTOR_SOURCE_FILES} 
                     ${QL_FETCH_SOURCE_FILES}
                     ${QL_EXPLAIN_PLAN_SOURCE_FILES}
                     ${QL_DDL_TABLESPACE_SOURCE_FILES}
                     ${QL_DDL_AUTHORIZATION_SOURCE_FILES}
                     ${QL_DDL_SCHEMA_SOURCE_FILES}
                     ${QL_DDL_TABLE_SOURCE_FILES}
                     ${QL_DDL_TABLE_CONSTRAINT_SOURCE_FILES}
                     ${QL_DDL_INDEX_SOURCE_FILES}
                     ${QL_DDL_SEQUENCE_SOURCE_FILES}
                     ${QL_DDL_SYNONYM_SOURCE_FILES}
                     ${QL_TRANS_CONTROL_SOURCE_FILES}
                     ${QL_SYSSES_CONTROL_SOURCE_FILES}
                     ${QL_CONSTRAINT_SOURCE_FILES}
                     ${QL_CURSOR_SOURCE_FILES}
                     ${QL_NODE_SOURCE_FILES} 
                     ${QL_NODE_VALIDATION_SOURCE_FILES} 
                     ${QL_NODE_CANDIDATE_SOURCE_FILES} 
                     ${QL_NODE_CODE_OPTIMIZER_SOURCE_FILES} 
                     ${QL_NODE_DATA_OPTIMIZER_SOURCE_FILES} 
                     ${QL_NODE_EXECUTOR_SOURCE_FILES}
                     ${QL_NODE_FUNCTION_SOURCE_FILES}
                     ${QL_NODE_EXPLAIN_SOURCE_FILES}
                     ${STL_FLEX_QL_SCANNER_OUTPUTS}
                     ${STL_BISON_QL_PARSER_OUTPUTS})

IF( ${CMAKE_CPP_COMPILER} )
    SET_SOURCE_FILES_PROPERTIES( ${QP_SOURCES_FILES} PROPERTIES LANGUAGE CXX )
ENDIF()

LIST(REMOVE_DUPLICATES QP_SOURCES_FILES)

IF(${CMAKE_TARGET_HOST_TYPE} MATCHES "server")
ADD_LIBRARY(qp ${QP_SOURCES_FILES})
ENDIF()

SET(PRODUCT_LAYER_GLIESEA_SHARED_SOURCES ${PRODUCT_LAYER_GLIESEA_SHARED_SOURCES}
                                         ${QP_SOURCES_FILES}
    PARENT_SCOPE)

#TEST
#INCLUDE(CTest)
#ADD_SUBDIRECTORY(test)

