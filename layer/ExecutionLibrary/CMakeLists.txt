CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
# Avoid warnings in higher versions
IF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.6)
 CMAKE_POLICY(VERSION 2.8)
ENDIF()

# If choose to build documentation, then search for Doxygen executables.
INCLUDE (${CMAKE_ROOT}/Modules/CMakeDependentOption.cmake)
CMAKE_DEPENDENT_OPTION(BUILD_DOCUMENTATION_API 
                      "Build API Documentation with Doxygen" ON
                       BUILD_DOCUMENTATION OFF)

# If choose to build documentation, then search for Doxygen executables.
IF(BUILD_DOCUMENTATION_API)
  FIND_PACKAGE(Doxygen REQUIRED)

  OPTION(DOXYGEN_SHORT_NAMES "Build Standard Layer documentations with short files name" OFF)
  MARK_AS_ADVANCED(DOXYGEN_SHORT_NAMES)
  IF(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES YES)
  ELSE(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES NO)
  ENDIF(DOXYGEN_SHORT_NAMES)

  #
  # Configure the script and the doxyfile, then add target
  #
  SET(HAVE_DOT_YESNO NO)
  IF(DOT)
    SET(HAVE_DOT_YESNO YES)
    IF(NOT DOT_PATH)
      GET_FILENAME_COMPONENT(DOT_PATH ${DOT} PATH)
    ENDIF(NOT DOT_PATH)
  ENDIF(DOT)

  # API target
  CONFIGURE_FILE(
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Execution_API.in
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Execution_API)

  ADD_CUSTOM_TARGET(Doxygen_Execution_API ALL
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Execution_API
    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Execution_API
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
ENDIF(BUILD_DOCUMENTATION_API)

SET( ELL_MARSHALL_SMALL_PREFIX "ell" )
SET( ELL_MARSHALL_LARGE_PREFIX "ELL" )

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/dev/include/ellCursorDef.h.in
               ${CMAKE_CURRENT_SOURCE_DIR}/dev/include/${ELL_MARSHALL_SMALL_PREFIX}CursorDef.h)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/dev/include/ellSuppLogDef.h.in
               ${CMAKE_CURRENT_SOURCE_DIR}/dev/include/${ELL_MARSHALL_SMALL_PREFIX}SuppLogDef.h)

INCLUDE_DIRECTORIES(${PRODUCT_LAYER_STANDARD_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_DATATYPE_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_KERNEL_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_SERVERCOMMUNICATION_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_STORAGEMANAGER_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_EXECUTIONLIBRARY_DIR}/dev/src/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_EXECUTIONLIBRARY_DIR}/dev/src/eld/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_EXECUTIONLIBRARY_DIR}/dev/include)

# common source files
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/ell EL_LIBRARY_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/elg EL_GENERAL_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/eld EL_DICTIONARY_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/eld/eldt EL_DICTIONARY_TABLE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/eld/eldc EL_DICTIONARY_CACHE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/elc EL_CONSTRAINT_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/elp EL_PRIVILEGE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/elf EL_FUNCTION_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/elk EL_FILTER_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/els EL_SESSION_OBJECT_SOURCE_FILES)

SET (LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/dev/lib)

# LIBRARY
SET(EL_SOURCES_FILES ${EL_LIBRARY_SOURCE_FILES}
                     ${EL_GENERAL_SOURCE_FILES}
                     ${EL_DICTIONARY_SOURCE_FILES} 
                     ${EL_DICTIONARY_TABLE_SOURCE_FILES} 
                     ${EL_DICTIONARY_CACHE_SOURCE_FILES} 
                     ${EL_CONSTRAINT_SOURCE_FILES} 
                     ${EL_PRIVILEGE_SOURCE_FILES}
                     ${EL_DATAVALUE_SOURCE_FILES}
                     ${EL_FUNCTION_SOURCE_FILES}
                     ${EL_FILTER_SOURCE_FILES} 
                     ${EL_SESSION_OBJECT_SOURCE_FILES})

IF( ${CMAKE_CPP_COMPILER} )
    SET_SOURCE_FILES_PROPERTIES( ${EL_SOURCES_FILES} PROPERTIES LANGUAGE CXX )
ENDIF()

LIST(REMOVE_DUPLICATES EL_SOURCES_FILES)

IF(${CMAKE_TARGET_HOST_TYPE} MATCHES "server")
ADD_LIBRARY(el ${EL_SOURCES_FILES})
ENDIF()

SET(PRODUCT_LAYER_GLIESEA_SHARED_SOURCES ${PRODUCT_LAYER_GLIESEA_SHARED_SOURCES}
                                         ${EL_SOURCES_FILES}
    PARENT_SCOPE)

##################################################
# PACKAGE
##################################################


##################################################
# Binary Tools
##################################################

#set the Standard Library
SET (ST_LIBRARY st)
LINK_DIRECTORIES (${PRODUCT_LAYER_STANDARD_DIR}/dev/lib)

#set the Data Type Library
SET (DT_LIBRARY dt)
LINK_DIRECTORIES (${PRODUCT_LAYER_DATATYPE_DIR}/dev/lib)

#set the Kernel Library
SET (KN_LIBRARY kn)
LINK_DIRECTORIES (${PRODUCT_LAYER_KERNEL_DIR}/dev/lib)

#set the Server Communication Library
SET (SC_LIBRARY sc)
LINK_DIRECTORIES (${PRODUCT_LAYER_SERVERCOMMUNICATION_DIR}/dev/lib)

#set the Storage Manager Library
SET (SM_LIBRARY sm)
LINK_DIRECTORIES (${PRODUCT_LAYER_STORAGEMANAGER_DIR}/dev/lib)

#set the Execution (Library) Library
SET (EL_LIBRARY el)
LINK_DIRECTORIES (${PRODUCT_LAYER_EXECUTIONLIBRARY_DIR}/dev/lib)

