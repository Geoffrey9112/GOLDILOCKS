CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
# Avoid warnings in higher versions
IF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.6)
 CMAKE_POLICY(VERSION 2.8)
ENDIF()

# If choose to build documentation, then search for Doxygen executables.
INCLUDE (${CMAKE_ROOT}/Modules/CMakeDependentOption.cmake)
CMAKE_DEPENDENT_OPTION(BUILD_DOCUMENTATION_API 
                      "Build API Documentation with Doxygen" ON
                       BUILD_DOCUMENTATION OFF)

# If choose to build documentation, then search for Doxygen executables.
IF(BUILD_DOCUMENTATION_API)
  FIND_PACKAGE(Doxygen REQUIRED)

  OPTION(DOXYGEN_SHORT_NAMES "Build Standard Layer documentations with short files name" OFF)
  MARK_AS_ADVANCED(DOXYGEN_SHORT_NAMES)
  IF(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES YES)
  ELSE(DOXYGEN_SHORT_NAMES)
    SET(DOXYGEN_SHORT_NAMES NO)
  ENDIF(DOXYGEN_SHORT_NAMES)

  #
  # Configure the script and the doxyfile, then add target
  #
  SET(HAVE_DOT_YESNO NO)
  IF(DOT)
    SET(HAVE_DOT_YESNO YES)
    IF(NOT DOT_PATH)
      GET_FILENAME_COMPONENT(DOT_PATH ${DOT} PATH)
    ENDIF(NOT DOT_PATH)
  ENDIF(DOT)

  # API target
  CONFIGURE_FILE(
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Kernel_API.in
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Kernel_API)

  ADD_CUSTOM_TARGET(Doxygen_Kernel_API ALL
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Kernel_API
    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_Kernel_API
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
ENDIF(BUILD_DOCUMENTATION_API)

#For Parser
STL_FLEX_TARGET(KN_PROPERTY_SCANNER
                ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knp/knpPropertyParser.l
                ${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knp/knpPropertyParser.c
                COMPILE_FLAGS "-PknpProperty")

SET_SOURCE_FILES_PROPERTIES(${STL_FLEX_KN_PROPERTY_SCANNER_OUTPUTS} PROPERTIES GENERATED 1)

INCLUDE_DIRECTORIES(${PRODUCT_LAYER_STANDARD_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_DATATYPE_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_COMMUNICATION_DIR}/dev/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_KERNEL_DIR}/dev/src/include)
INCLUDE_DIRECTORIES(${PRODUCT_LAYER_KERNEL_DIR}/dev/include)

# common source files
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knl  KN_LIBRARY_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knx  KN_FIXEDTABLE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/kni  KN_MISC_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/kna  KN_LATCH_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knn  KN_SIGNAL_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knh  KN_STATICHASH_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/kns  KN_SHM_SEGMENT_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knp  KN_PROPERTY_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knm  KN_MEM_MANAGEMENT_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/kno  KN_QUICKSORT_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/kng  KN_LOGGER_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knf  KN_FILEMGR_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/kne  KN_EVENT_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knk  KN_FILTER_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knb  KN_BREAKPOINT_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knpc KN_PLAN_CACHE_SOURCE_FILES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/dev/src/knt  KN_XA_HASH_FILES)

SET (LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/dev/lib)

# LIBRARY
SET(KN_SOURCES_FILES ${KN_FIXEDTABLE_SOURCE_FILES} 
                     ${KN_MISC_SOURCE_FILES}
                     ${KN_LATCH_SOURCE_FILES}
                     ${KN_SIGNAL_SOURCE_FILES}
                     ${KN_STATICHASH_SOURCE_FILES}
                     ${KN_SHM_SEGMENT_SOURCE_FILES}
                     ${KN_PROPERTY_SOURCE_FILES} 
                     ${KN_MEM_MANAGEMENT_SOURCE_FILES}
                     ${KN_QUICKSORT_SOURCE_FILES}
                     ${KN_LOGGER_SOURCE_FILES}
                     ${KN_FILEMGR_SOURCE_FILES}
                     ${KN_EVENT_SOURCE_FILES}
                     ${KN_FILTER_SOURCE_FILES}
                     ${KN_BREAKPOINT_SOURCE_FILES}
                     ${KN_LIBRARY_SOURCE_FILES}
                     ${KN_PLAN_CACHE_SOURCE_FILES}
                     ${KN_XA_HASH_FILES}
                     ${STL_FLEX_KN_PROPERTY_SCANNER_OUTPUTS} )

IF( ${CMAKE_CPP_COMPILER} )
    SET_SOURCE_FILES_PROPERTIES( ${KN_SOURCES_FILES} PROPERTIES LANGUAGE CXX )
ENDIF()

LIST(REMOVE_DUPLICATES KN_SOURCES_FILES)

IF(${CMAKE_TARGET_HOST_TYPE} MATCHES "server")
ADD_LIBRARY(kn ${KN_SOURCES_FILES})
ENDIF()

SET(PRODUCT_LAYER_GLIESEA_SHARED_SOURCES ${PRODUCT_LAYER_GLIESEA_SHARED_SOURCES}
                                         ${KN_SOURCES_FILES}
    PARENT_SCOPE)
