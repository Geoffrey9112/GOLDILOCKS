/**
 * @brief
 * <BR> 1. STL_INCLUDE_LEXER_H
 * <BR> 2. STL_PARSER_PARSER_PREFIX
 */

%{
#include <stl.h>
@STL_INCLUDE_LEXER_H@
    
/* http://www.usualcoding.eu/post/2007/09/03/Building-a-reentrant-parser-in-C-with-Flex/Bison */

#if( @STL_PARSER_PRINT_FLAG@ != 1 )
#define STL_PARSER_PRINT  stlIgnorePrintf
#else
#define STL_PARSER_PRINT  stlPrintf
#endif

#define PARAM yyget_extra(yyscanner)

#define STL_PARSER_RETURN_QUOTE_STR( param, text )                      \
    {                                                                   \
        stlInt32    sCursor  = 0;                                       \
        stlChar   * sCurChar = NULL;                                    \
        stlChar   * sResult  = NULL;                                    \
                                                                        \
        if( (param)->mAllocator( (param)->mContext,                     \
                                 yyleng + 1,                            \
                                 (void**) yylval,                       \
                                 (param)->mErrorStack )                 \
            != STL_SUCCESS )                                            \
        {                                                               \
            (param)->mErrStatus = STL_FAILURE;                          \
        }                                                               \
        else                                                            \
        {                                                               \
            if( yyleng == 0)                                            \
            {                                                           \
                ((stlChar*)(*yylval))[0] = '\0';                        \
            }                                                           \
            else                                                        \
            {                                                           \
                sCurChar = (stlChar*) text;                             \
                sResult  = (stlChar*) *yylval;                          \
                for( sCursor = 0; sCursor < yyleng ; sCursor++ )        \
                {                                                       \
                    if( ( sCurChar[0] == '\'' ) &&                      \
                        ( sCurChar[1] == '\'' ) )                       \
                    {                                                   \
                        *sResult = '\'';                                \
                        sCurChar++;                                     \
                        yyleng--;                                       \
                    }                                                   \
                    else                                                \
                    {                                                   \
                        *sResult = *sCurChar;                           \
                    }                                                   \
                                                                        \
                    sCurChar++;                                         \
                    sResult++;                                          \
                }                                                       \
                                                                        \
                ((stlChar*)(*yylval))[yyleng] = '\0';                   \
            }                                                           \
            *yylloc = PARAM->mCurrLoc;                                  \
        }                                                               \
    }

#define STL_PARSER_IGNORE_STR( param )          \
    {                                           \
        *yylloc = PARAM->mCurrLoc;              \
    }   

#define STL_PARSER_RETURN_STR( param, text )                            \
    {                                                                   \
        if( (param)->mAllocator( (param)->mContext,                     \
                                 yyleng + 1,                            \
                                 (void**) yylval,                       \
                                 (param)->mErrorStack )                 \
            != STL_SUCCESS )                                            \
        {                                                               \
            (param)->mErrStatus = STL_FAILURE;                          \
        }                                                               \
        else                                                            \
        {                                                               \
            if( yyleng == 0)                                            \
            {                                                           \
                ((stlChar*)(*yylval))[0] = '\0';                        \
            }                                                           \
            else                                                        \
            {                                                           \
                stlMemcpy( (void*) *yylval, text, yyleng );             \
                ((stlChar*)(*yylval))[yyleng] = '\0';                   \
            }                                                           \
            *yylloc = PARAM->mCurrLoc;                                  \
        }                                                               \
    }

#define STL_PARSER_RETURN_IDENTIFIER( param, text )             \
    {                                                           \
        if( yyleng == 0)                                        \
        {                                                       \
            (param)->mErrStatus = STL_FAILURE;                  \
        }                                                       \
        else                                                    \
        {                                                       \
            if( (param)->mAllocator( (param)->mContext,         \
                                     yyleng + 1,                \
                                     (void**) yylval,           \
                                     (param)->mErrorStack )     \
                != STL_SUCCESS )                                \
            {                                                   \
                (param)->mErrStatus = STL_FAILURE;              \
            }                                                   \
            else                                                \
            {                                                   \
                stlMemcpy( (void*) *yylval, text, yyleng );     \
                ((stlChar*)(*yylval))[yyleng] = '\0';           \
                *yylloc = PARAM->mCurrLoc;                      \
            }                                                   \
        }                                                       \
    }

#define YY_INPUT( buffer, res, max_size )                               \
    do {                                                                \
        if (PARAM->mPosition >= PARAM->mStmtLength)                     \
        {                                                               \
            res = YY_NULL;                                              \
        }                                                               \
        else                                                            \
        {                                                               \
            res = PARAM->mStmtLength - PARAM->mPosition;                \
            res > (stlInt32)max_size ? res = max_size : 0;              \
            stlMemcpy(buffer, PARAM->mBuffer + PARAM->mPosition, res);  \
            PARAM->mPosition += res;                                    \
        }                                                               \
    } while (0)


#define YY_USER_ACTION                                  \
    {                                                   \
        stlChar * sStr;                                 \
        if( yylineno != PARAM->mLineNo )                \
        {                                               \
            PARAM->mColumn = 1;                         \
            PARAM->mLength = 0;                         \
            sStr = PARAM->mBuffer + PARAM->mNextLoc     \
                   + yyleng - 1;                        \
            while( *sStr != '\n' )                      \
            {                                           \
                PARAM->mLength++;                       \
                sStr--;                                 \
            }                                           \
        }                                               \
        else                                            \
        {                                               \
            PARAM->mColumn += PARAM->mLength;           \
            PARAM->mLength  = yyleng;                   \
        }                                               \
        *yylloc = PARAM->mCurrLoc;                      \
        PARAM->mLineNo  = yylineno;                     \
        PARAM->mCurrLoc = PARAM->mNextLoc;              \
        PARAM->mNextLoc += yyleng;                      \
    }

%}

%option reentrant noyywrap never-interactive nounistd
%option bison-bridge bison-locations
%option case-sensitive
%option nounput
%option noinput
%option yylineno


/* sql token */
comment_introducer_hint    "/*+"
comment_introducer         "/*"
comment_terminator         "*/"
simple_comment             "--"[^\n]*
c_simple_comment           "//"[^\n]*

quote_symbol               "\'\'"


/* SPECIAL CHARACTER */
     
plus_sign                  "+"
minus_sign                 "-"
asterisk                   "*"
solidus                    "/"
comma                      ","
period                     "."
quote                      "\'"
double_quote               "\""
reverse_solidus            "\\"
 
percent                    "%"
ampersand                  "&"
left_paren                 "("
right_paren                ")"
left_bracket               "["
right_bracket              "]"
left_brace                 "{"
right_brace                "}"
left_bracket_trigraph      "??("
right_bracket_trigraph     "??)"
     
colon                      ":"
semicolon                  ";"
underscore                 "_"     
question_mark              "?"
circumflex                 "^"
vertical_bar               "|"

less_than_operator         "<"
greater_than_operator      ">"
equal_operator             "="
not_equal_operator         {less_than_operator}{greater_than_operator}
not_equal_operator_expand  "!="
less_than_equal_operator   {less_than_operator}{equal_operator}
greater_than_equal_operator   {greater_than_operator}{equal_operator}

concat_operator            "||"


dollar_sign                "$"

sharp                      "#"
at_sign                    "@"

outer_mark                 {left_paren}[ \t\n\r\v\f]*{plus_sign}[ \t\n\r\v\f]*{right_paren}

/* pattern for rules */
white_space                [ \t\n\r\v\f]+
digit                      [0-9]
digits                     {digit}+
hex_digit                  [a-fA-F0-9]
hex_digits                 {white_space}*{hex_digit}{white_space}*{hex_digit}{white_space}*
hex_string                 [xX]{quote}{hex_digits}*{quote}

identifier_start           [a-zA-Z_]
identifier_continue        [a-zA-Z_0-9\$]
identifier                 {identifier_start}{identifier_continue}*
host_variable              {colon}{identifier}

unsigned_integer_literal   {digits}[dDfF]?
positive_integer_literal   [+][ ]*{digits}
negative_integer_literal   [-][ ]*{digits}


unsigned_exact_numeric_literal  {digits}{period}[dDfF]?|{digits}{period}{digits}[dDfF]?|{period}{digits}[dDfF]?
/*signed_exact_numeric_literal      [+-][ ]*{digits}{period}|[+-][ ]*{digits}{period}{digits}|[+-][ ]*{period}{digits}
 */
unsigned_approximate_numeric_literal  {digits}[eE][+-]?{digits}[dDfF]?|{unsigned_exact_numeric_literal}[eE][+-]?{digits}[dDfF]?
/*signed_approximate_numeric_literal [+-][ ]*{digits}[eE][+-]{digits}|[+-][ ]*{unsigned_exact_numeric_literal}[eE][+-]{digits}
 */

bracketed_comment_1        {comment_introducer}{comment_terminator}|{comment_introducer}([^+])([^*]|(\*+[^*/]))*\**{comment_terminator}
/* bracketed_comment_2        {comment_introducer}{quote}([^\']|quote_symbol)*{quote}{comment_terminator} 
   bracketed_comment          {bracketed_comment_1}|{bracketed_comment_2} */
bracketed_comment          {bracketed_comment_1} 

quote_string               {quote_symbol}|{quote}([^\']|{quote_symbol})+{quote}
double_quote_string        {double_quote}[^\"]*{double_quote}

not_applicable             [\000-\010\012-\014\016-\037\041\140\176\177-\377]+

with_time_zone             [wW][iI][tT][hH]{white_space}[tT][iI][mM][eE]{white_space}[zZ][oO][nN][eE]

not_deferrable             [nN][oO][tT]{white_space}[dD][eE][fF][eE][rR][rR][aA][bB][lL][eE]
not_enforced               [nN][oO][tT]{white_space}[eE][nN][fF][oO][rR][cC][eE][dD]

/* action */
%%

{comment_introducer_hint}    { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_COMMENT_INTRODUCER_HINT; }

{comment_terminator}         { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_COMMENT_TERMINATOR; }

{simple_comment}      { STL_PARSER_PRINT("simple_comment\t: %s\n", yytext);
                        STL_PARSER_IGNORE_STR( PARAM ); }

{c_simple_comment}    { STL_PARSER_PRINT("c_simple_comment\t: %s\n", yytext);
                        STL_PARSER_IGNORE_STR( PARAM ); }

{bracketed_comment}   { STL_PARSER_PRINT("bracket_comment\t: %s\n", yytext);
                        STL_PARSER_IGNORE_STR( PARAM ); }

{plus_sign}           { STL_PARSER_PRINT("special_char\t: %s\n", yytext);
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_PLUS_SIGN; }

{minus_sign}          { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_MINUS_SIGN; }

{asterisk}            { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_ASTERISK; }

{solidus}             { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_SOLIDUS; }

{comma}               { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_COMMA; }

{period}              { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_PERIOD; }

{quote}               { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_QUOTE; }

{double_quote}        { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_DOUBLE_QUOTE; }

{reverse_solidus}     { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                        STL_PARSER_IGNORE_STR( PARAM );
                        return SQL_TOK_REVERSE_SOLIDUS; }

{percent}                    { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_PERCENT; }

{ampersand}                  { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_AMPERSAND; }

{left_paren}                 { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_LEFT_PAREN; }

{right_paren}                { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_RIGHT_PAREN; }

{left_bracket}               { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_LEFT_BRACKET; }

{right_bracket}              { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_RIGHT_BRACKET; }

{left_brace}                 { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_LEFT_BRACE; }

{right_brace}                { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_RIGHT_BRACE; }

{left_bracket_trigraph}      { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_LEFT_BRACKET_TRIGRAPH; }

{right_bracket_trigraph}     { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                               STL_PARSER_IGNORE_STR( PARAM );
                               return SQL_TOK_RIGHT_BRACKET_TRIGRAPH; }

{colon}             { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                      STL_PARSER_IGNORE_STR( PARAM );
                      return SQL_TOK_COLON; }

{semicolon}         { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                      STL_PARSER_IGNORE_STR( PARAM );
                      return SQL_TOK_SEMICOLON; }

{underscore}        { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                      STL_PARSER_IGNORE_STR( PARAM );
                      return SQL_TOK_UNDERSCORE; }

{question_mark}     { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                      STL_PARSER_IGNORE_STR( PARAM );
                      return SQL_TOK_QUESTION_MARK; }

{circumflex}        { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                      STL_PARSER_IGNORE_STR( PARAM );
                      return SQL_TOK_CIRCUMFLEX; }

{vertical_bar}      { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                      STL_PARSER_IGNORE_STR( PARAM );
                      return SQL_TOK_VERTICAL_BAR; }

{less_than_operator}            { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                                  STL_PARSER_IGNORE_STR( PARAM );
                                  return SQL_TOK_LESS_THAN_OPERATOR; }

{greater_than_operator}         { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                                  STL_PARSER_IGNORE_STR( PARAM );
                                  return SQL_TOK_GREATER_THAN_OPERATOR; }

{equal_operator}                { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                                  STL_PARSER_IGNORE_STR( PARAM );
                                  return SQL_TOK_EQUAL_OPERATOR; }

{not_equal_operator}            { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                                  STL_PARSER_IGNORE_STR( PARAM );
                                  return SQL_TOK_NOT_EQUAL_OPERATOR; }

{not_equal_operator_expand}     { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                                  STL_PARSER_IGNORE_STR( PARAM );
                                  return SQL_TOK_NOT_EQUAL_OPERATOR_EXPAND; }

{less_than_equal_operator}      { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                                  STL_PARSER_IGNORE_STR( PARAM );
                                  return SQL_TOK_LESS_THAN_EQUAL_OPERATOR;
}
{greater_than_equal_operator}   { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                                  STL_PARSER_IGNORE_STR( PARAM );
                                  return SQL_TOK_GREATER_THAN_EQUAL_OPERATOR; }

{concat_operator}  { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                   STL_PARSER_IGNORE_STR( PARAM );
                   return SQL_TOK_CONCAT_OPER; }

{dollar_sign}    { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                   STL_PARSER_IGNORE_STR( PARAM );
                   return SQL_TOK_DOLLAR_SIGN; }

{sharp}          { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                   STL_PARSER_IGNORE_STR( PARAM );
                   return SQL_TOK_SHARP; }

{at_sign}        { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                   STL_PARSER_IGNORE_STR( PARAM );
                   return SQL_TOK_AT_SIGN; }

{outer_mark}     { STL_PARSER_PRINT("special_char\t: %s\n", yytext); 
                   STL_PARSER_IGNORE_STR( PARAM );
                   return SQL_TOK_OUTER_MARK; }

{white_space}    { STL_PARSER_PRINT("white_space\t: %s\n", yytext);
                   STL_PARSER_IGNORE_STR( PARAM ); }

{unsigned_approximate_numeric_literal} {
    STL_PARSER_PRINT("unsigned_approximate_numeric_literal\t: %s\n", yytext);

    STL_PARSER_RETURN_STR( PARAM, yytext );
    return SQL_TOK_UNSIGNED_APPROXIMATE_NUMERIC_LITERAL;
}   

{unsigned_exact_numeric_literal} {
    STL_PARSER_PRINT("unsigned_exact_numeric\t: %s\n", yytext);

    STL_PARSER_RETURN_STR( PARAM, yytext );
    return SQL_TOK_UNSIGNED_EXACT_NUMERIC_LITERAL;
}   

{unsigned_integer_literal} {
    STL_PARSER_PRINT("unsigned_integer_literal\t\t: %s\n", yytext);
    
    STL_PARSER_RETURN_STR( PARAM, yytext );
    return SQL_TOK_UNSIGNED_INTEGER;
}

{identifier} {
    const stlKeyWord * sKeyWord;

    stlToupperString( yytext, yytext );

    sKeyWord = @STL_PARSER_PREFIX@ScanKeyWordLookup( yytext );
    if( sKeyWord == NULL )
    {
        STL_PARSER_PRINT("identifier\t: %s\n", yytext);
    
        STL_PARSER_RETURN_IDENTIFIER( PARAM, yytext );
        return SQL_TOK_IDENTIFIER;
    }
    else
    {
        STL_PARSER_PRINT("keyword\t\t: %s\n", sKeyWord->mName);
        
        STL_PARSER_RETURN_STR( PARAM, sKeyWord->mName );
        return sKeyWord->mTokenCode;
    }
}

{quote_string} {
    STL_PARSER_PRINT("quote_string\t: %s\n", yytext);

    yyleng -= 2;

    STL_PARSER_RETURN_QUOTE_STR( PARAM, yytext + 1 );
    return SQL_TOK_QUOTE_STRING;
}

{double_quote_string} {
    STL_PARSER_PRINT("double_quote_str: %s\n", yytext);

    yyleng -= 2;
    STL_PARSER_RETURN_IDENTIFIER( PARAM, yytext + 1 );
    return SQL_TOK_DOUBLE_QUOTE_STRING;
}

{hex_string} {
    STL_PARSER_PRINT("hex_string\t: %s\n", yytext);
    yyleng -= 3;
    STL_PARSER_RETURN_STR( PARAM, yytext + 2 );
    return SQL_TOK_HEXIT_STRING;
}

{not_applicable} {
    STL_PARSER_PRINT("not_applicable\t: %s\n", yytext);
    STL_PARSER_RETURN_STR( PARAM, yytext );
    return SQL_TOK_NOT_APPLICABLE;
}

{with_time_zone} { STL_PARSER_PRINT("with_time_zone\t: %s\n", yytext); 
                 STL_PARSER_IGNORE_STR( PARAM );
                 return SQL_TOK_WITH_TIME_ZONE; }

{not_deferrable} { STL_PARSER_PRINT("not_deferrable\t: %s\n", yytext); 
                 STL_PARSER_IGNORE_STR( PARAM );
                 return SQL_TOK_NOT_DEFERRABLE; }

{not_enforced} { STL_PARSER_PRINT("not_enforced\t: %s\n", yytext); 
                 STL_PARSER_IGNORE_STR( PARAM );
                 return SQL_TOK_NOT_ENFORCED; }

%%


/*
 * keyword 추가시 stlGram.y 변경해야할 사항
 * 1. token 추가
 * 2. non_reserved 또는 gsql keyword일 경우
 *    nonreserved_keyword: 또는 gsql_keyword: 에 해당 키워드 추가
 *    (reserved word는 변경사항 없음)
 */
const stlKeyWord @STL_PARSER_PREFIX@KeyWordList[] = {
    { "A",  SQL_TOK_A,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ABORT",  SQL_TOK_ABORT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ABS",  SQL_TOK_ABS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ABSOLUTE",  SQL_TOK_ABSOLUTE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ACCESS",  SQL_TOK_ACCESS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ACCOUNT",  SQL_TOK_ACCOUNT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ACOS",  SQL_TOK_ACOS,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ACTION",  SQL_TOK_ACTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ADA",  SQL_TOK_ADA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ADD",  SQL_TOK_ADD,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "ADDDATE",  SQL_TOK_ADDDATE,  STL_KEYWORD_CATEGORY_GSQL },
    { "ADDITION",  SQL_TOK_ADDITION,  STL_KEYWORD_CATEGORY_GSQL },
    { "ADDTIME",  SQL_TOK_ADDTIME,  STL_KEYWORD_CATEGORY_GSQL },
    { "ADD_MONTHS",  SQL_TOK_ADD_MONTHS,  STL_KEYWORD_CATEGORY_GSQL },
    { "ADMIN",  SQL_TOK_ADMIN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ADMINISTRATION",  SQL_TOK_ADMINISTRATION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "AFTER",  SQL_TOK_AFTER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "AGER",  SQL_TOK_AGER,  STL_KEYWORD_CATEGORY_GSQL },
    { "ALL",  SQL_TOK_ALL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ALLOCATE",  SQL_TOK_ALLOCATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ALTER",  SQL_TOK_ALTER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ALWAYS",  SQL_TOK_ALWAYS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "AND",  SQL_TOK_AND,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ANTI",  SQL_TOK_ANTI,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ANY",  SQL_TOK_ANY,  STL_KEYWORD_CATEGORY_RESERVED },
    { "ARCHIVELOG",  SQL_TOK_ARCHIVELOG,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ARE",  SQL_TOK_ARE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ARRAY",  SQL_TOK_ARRAY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ARRAY_AGG",  SQL_TOK_ARRAY_AGG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "AS",  SQL_TOK_AS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ASC",  SQL_TOK_ASC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ASENSITIVE",  SQL_TOK_ASENSITIVE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ASIN",  SQL_TOK_ASIN,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ASSERTION",  SQL_TOK_ASSERTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ASSIGNMENT",  SQL_TOK_ASSIGNMENT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ASYMMETRIC",  SQL_TOK_ASYMMETRIC,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "AT",  SQL_TOK_AT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ATAN",  SQL_TOK_ATAN,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ATAN2",  SQL_TOK_ATAN2,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ATOMIC",  SQL_TOK_ATOMIC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ATTRIBUTE",  SQL_TOK_ATTRIBUTE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ATTRIBUTES",  SQL_TOK_ATTRIBUTES,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "AUTHORIZATION",  SQL_TOK_AUTHORIZATION,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "AUTOEXTEND",  SQL_TOK_AUTOEXTEND,  STL_KEYWORD_CATEGORY_GSQL },
    { "AUTOMATICALLY",  SQL_TOK_AUTOMATICALLY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "AVG",  SQL_TOK_AVG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "B",  SQL_TOK_B,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "BACKUP",  SQL_TOK_BACKUP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "BEFORE",  SQL_TOK_BEFORE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BEGIN",  SQL_TOK_BEGIN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "BEGIN_FRAME",  SQL_TOK_BEGIN_FRAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BEGIN_PARTITION",  SQL_TOK_BEGIN_PARTITION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BERNOULLI",  SQL_TOK_BERNOULLI,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BETWEEN",  SQL_TOK_BETWEEN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "BIGINT",  SQL_TOK_BIGINT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BINARY",  SQL_TOK_BINARY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BITAND",  SQL_TOK_BITAND,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "BITNOT",  SQL_TOK_BITNOT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "BITOR",  SQL_TOK_BITOR,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "BITXOR",  SQL_TOK_BITXOR,  STL_KEYWORD_CATEGORY_GSQL },
    { "BIT_LENGTH", SQL_TOK_BIT_LENGTH, STL_KEYWORD_CATEGORY_GSQL },
    { "BLOB",  SQL_TOK_BLOB,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BOOLEAN",  SQL_TOK_BOOLEAN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BOTH",  SQL_TOK_BOTH,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "BREADTH",  SQL_TOK_BREADTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "BREAKPOINT",  SQL_TOK_BREAKPOINT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "BY",  SQL_TOK_BY,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "BYTE",  SQL_TOK_BYTE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "BYTE_LENGTH",  SQL_TOK_BYTE_LENGTH,  STL_KEYWORD_CATEGORY_GSQL }, 

    { "C",  SQL_TOK_C,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CACHE",  SQL_TOK_CACHE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CALL",  SQL_TOK_CALL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CALLED",  SQL_TOK_CALLED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CANCEL",  SQL_TOK_CANCEL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CARDINALITY",  SQL_TOK_CARDINALITY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CASCADE",  SQL_TOK_CASCADE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CASCADED",  SQL_TOK_CASCADED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CASE",  SQL_TOK_CASE,  STL_KEYWORD_CATEGORY_RESERVED },
    { "CASE2", SQL_TOK_CASE2, STL_KEYWORD_CATEGORY_GSQL },     
    { "CAST",  SQL_TOK_CAST,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CATALOG",  SQL_TOK_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CATALOG_NAME",  SQL_TOK_CATALOG_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CBRT",  SQL_TOK_CBRT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CEIL",  SQL_TOK_CEIL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CEILING",  SQL_TOK_CEILING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHAIN",  SQL_TOK_CHAIN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHANGE",  SQL_TOK_CHANGE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CHAR",  SQL_TOK_CHAR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHARACTER",  SQL_TOK_CHARACTER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHARACTERISTICS",  SQL_TOK_CHARACTERISTICS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHARACTERS",  SQL_TOK_CHARACTERS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHARACTER_LENGTH",  SQL_TOK_CHARACTER_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHARACTER_SET_CATALOG",  SQL_TOK_CHARACTER_SET_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHARACTER_SET_NAME",  SQL_TOK_CHARACTER_SET_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHARACTER_SET_SCHEMA",  SQL_TOK_CHARACTER_SET_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHAR_LENGTH",  SQL_TOK_CHAR_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CHECK",  SQL_TOK_CHECK,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CHECKPOINT",  SQL_TOK_CHECKPOINT,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "CHR", SQL_TOK_CHR, STL_KEYWORD_CATEGORY_GSQL },
    { "CLASS_ORIGIN",  SQL_TOK_CLASS_ORIGIN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CLEANUP",  SQL_TOK_CLEANUP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CLEAR",  SQL_TOK_CLEAR,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CLOB",  SQL_TOK_CLOB,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CLOCK_DATE",  SQL_TOK_CLOCK_DATE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CLOCK_LOCALTIME",  SQL_TOK_CLOCK_LOCALTIME,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CLOCK_LOCALTIMESTAMP",  SQL_TOK_CLOCK_LOCALTIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CLOCK_TIME",  SQL_TOK_CLOCK_TIME,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CLOCK_TIMESTAMP",  SQL_TOK_CLOCK_TIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CLOSE",  SQL_TOK_CLOSE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "COALESCE",  SQL_TOK_COALESCE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COBOL",  SQL_TOK_COBOL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COLLATE",  SQL_TOK_COLLATE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COLLATION",  SQL_TOK_COLLATION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COLLATION_CATALOG",  SQL_TOK_COLLATION_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COLLATION_NAME",  SQL_TOK_COLLATION_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COLLATION_SCHEMA",  SQL_TOK_COLLATION_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COLLECT",  SQL_TOK_COLLECT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COLUMN",  SQL_TOK_COLUMN,  STL_KEYWORD_CATEGORY_RESERVED },
    { "COLUMNAR",  SQL_TOK_COLUMNAR,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "COLUMNS",  SQL_TOK_COLUMNS,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "COLUMN_NAME",  SQL_TOK_COLUMN_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COMMAND_FUNCTION",  SQL_TOK_COMMAND_FUNCTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COMMAND_FUNCTION_CODE",  SQL_TOK_COMMAND_FUNCTION_CODE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COMMENT",  SQL_TOK_COMMENT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "COMMIT",  SQL_TOK_COMMIT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "COMMITTED",  SQL_TOK_COMMITTED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COMPILE",  SQL_TOK_COMPILE,  STL_KEYWORD_CATEGORY_GSQL },
    { "CONCAT",  SQL_TOK_CONCAT,  STL_KEYWORD_CATEGORY_GSQL },     
    { "CONCATENATE",  SQL_TOK_CONCATENATE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CONDITION",  SQL_TOK_CONDITION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONDITION_NUMBER",  SQL_TOK_CONDITION_NUMBER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONNECT",  SQL_TOK_CONNECT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CONNECTION",  SQL_TOK_CONNECTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONNECTION_NAME",  SQL_TOK_CONNECTION_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONSTRAINT",  SQL_TOK_CONSTRAINT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CONSTRAINTS",  SQL_TOK_CONSTRAINTS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONSTRAINT_CATALOG",  SQL_TOK_CONSTRAINT_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONSTRAINT_NAME",  SQL_TOK_CONSTRAINT_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONSTRAINT_SCHEMA",  SQL_TOK_CONSTRAINT_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONSTRUCTOR",  SQL_TOK_CONSTRUCTOR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONTAINS",  SQL_TOK_CONTAINS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONTENTS",  SQL_TOK_CONTENTS,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CONTINUE",  SQL_TOK_CONTINUE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONTROL",  SQL_TOK_CONTROL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CONTROLFILE",  SQL_TOK_CONTROLFILE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CONVERT",  SQL_TOK_CONVERT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CORR",  SQL_TOK_CORR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CORRESPONDING",  SQL_TOK_CORRESPONDING,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "CORRUPTION",  SQL_TOK_CORRUPTION,  STL_KEYWORD_CATEGORY_GSQL },
    { "COS",  SQL_TOK_COS,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "COT",  SQL_TOK_COT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "COUNT",  SQL_TOK_COUNT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COVAR_POP",  SQL_TOK_COVAR_POP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "COVAR_SAMP",  SQL_TOK_COVAR_SAMP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CREATE",  SQL_TOK_CREATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CROSS",  SQL_TOK_CROSS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CUBE",  SQL_TOK_CUBE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CUME_DIST",  SQL_TOK_CUME_DIST,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "CUMULATIVE",  SQL_TOK_CUMULATIVE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CURRENT",  SQL_TOK_CURRENT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_CATALOG",  SQL_TOK_CURRENT_CATALOG,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_DATE",  SQL_TOK_CURRENT_DATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_DEFAULT_TRANSFORM_GROUP",  SQL_TOK_CURRENT_DEFAULT_TRANSFORM_GROUP,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_PATH",  SQL_TOK_CURRENT_PATH,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_ROLE",  SQL_TOK_CURRENT_ROLE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_ROW",  SQL_TOK_CURRENT_ROW,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_SCHEMA",  SQL_TOK_CURRENT_SCHEMA,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_TIME",  SQL_TOK_CURRENT_TIME,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_TIMESTAMP",  SQL_TOK_CURRENT_TIMESTAMP,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_TRANSFORM_GROUP_FOR_TYPE",  SQL_TOK_CURRENT_TRANSFORM_GROUP_FOR_TYPE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRENT_USER",  SQL_TOK_CURRENT_USER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "CURRVAL",  SQL_TOK_CURRVAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CURSOR",  SQL_TOK_CURSOR,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "CURSOR_NAME",  SQL_TOK_CURSOR_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "CYCLE",  SQL_TOK_CYCLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "D",  SQL_TOK_D,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "DATA",  SQL_TOK_DATA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DATABASE",  SQL_TOK_DATABASE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DATAFILE",  SQL_TOK_DATAFILE,  STL_KEYWORD_CATEGORY_GSQL },
    { "DATAFILES",  SQL_TOK_DATAFILES,  STL_KEYWORD_CATEGORY_GSQL },
    { "DATE",  SQL_TOK_DATE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DATEADD",  SQL_TOK_DATEADD,  STL_KEYWORD_CATEGORY_GSQL },
    { "DATEDIFF",  SQL_TOK_DATEDIFF,  STL_KEYWORD_CATEGORY_GSQL },    
    { "DATETIME_INTERVAL_CODE",  SQL_TOK_DATETIME_INTERVAL_CODE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DATETIME_INTERVAL_PRECISION",  SQL_TOK_DATETIME_INTERVAL_PRECISION,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "DATE_ADD",  SQL_TOK_DATE_ADD,  STL_KEYWORD_CATEGORY_GSQL },    
    { "DATE_PART",  SQL_TOK_DATE_PART,  STL_KEYWORD_CATEGORY_GSQL },
    { "DAY",  SQL_TOK_DAY,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "DAYOFYEAR", SQL_TOK_DAYOFYEAR,  STL_KEYWORD_CATEGORY_GSQL },
    { "DAYS",  SQL_TOK_DAYS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEALLOCATE",  SQL_TOK_DEALLOCATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DEC",  SQL_TOK_DEC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DECIMAL",  SQL_TOK_DECIMAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DECLARE",  SQL_TOK_DECLARE,  STL_KEYWORD_CATEGORY_RESERVED },
    { "DECODE",  SQL_TOK_DECODE,  STL_KEYWORD_CATEGORY_GSQL },
    { "DEFAULT",  SQL_TOK_DEFAULT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DEFAULTS",  SQL_TOK_DEFAULTS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEFERRABLE",  SQL_TOK_DEFERRABLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEFERRED",  SQL_TOK_DEFERRED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEFINED",  SQL_TOK_DEFINED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEFINER",  SQL_TOK_DEFINER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEGREE",  SQL_TOK_DEGREE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEGREES",  SQL_TOK_DEGREES,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "DELETE",  SQL_TOK_DELETE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DENSE_RANK",  SQL_TOK_DENSE_RANK,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEPTH",  SQL_TOK_DEPTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DEREF",  SQL_TOK_DEREF,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DERIVED",  SQL_TOK_DERIVED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DESC",  SQL_TOK_DESC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DESCRIBE",  SQL_TOK_DESCRIBE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DESCRIPTOR",  SQL_TOK_DESCRIPTOR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DETERMINISTIC",  SQL_TOK_DETERMINISTIC,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DIAGNOSTICS",  SQL_TOK_DIAGNOSTICS,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "DIFFERENTIAL",  SQL_TOK_DIFFERENTIAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "DISABLE",  SQL_TOK_DISABLE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "DISCONNECT",  SQL_TOK_DISCONNECT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DISK",  SQL_TOK_DISK,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "DISPATCH",  SQL_TOK_DISPATCH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DISTINCT",  SQL_TOK_DISTINCT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DIVISION",  SQL_TOK_DIVISION,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "DOMAIN",  SQL_TOK_DOMAIN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DOUBLE",  SQL_TOK_DOUBLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DROP",  SQL_TOK_DROP,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "DUMP",  SQL_TOK_DUMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "DYNAMIC",  SQL_TOK_DYNAMIC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DYNAMIC_FUNCTION",  SQL_TOK_DYNAMIC_FUNCTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "DYNAMIC_FUNCTION_CODE",  SQL_TOK_DYNAMIC_FUNCTION_CODE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "EACH",  SQL_TOK_EACH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ELEMENT",  SQL_TOK_ELEMENT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ELSE",  SQL_TOK_ELSE,  STL_KEYWORD_CATEGORY_RESERVED },
    { "ENABLE",  SQL_TOK_ENABLE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "END",  SQL_TOK_END,  STL_KEYWORD_CATEGORY_RESERVED },
    { "END_EXEC",  SQL_TOK_END_EXEC,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "END_FRAME",  SQL_TOK_END_FRAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "END_PARTITION",  SQL_TOK_END_PARTITION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ENFORCED",  SQL_TOK_ENFORCED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EQUALS",  SQL_TOK_EQUALS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ESCAPE",  SQL_TOK_ESCAPE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "EVERY",  SQL_TOK_EVERY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EXCEPT",  SQL_TOK_EXCEPT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "EXCLUDE",  SQL_TOK_EXCLUDE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EXCLUDING",  SQL_TOK_EXCLUDING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EXCLUSIVE",  SQL_TOK_EXCLUSIVE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "EXEC",  SQL_TOK_EXEC,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "EXECUTE",  SQL_TOK_EXECUTE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "EXISTS",  SQL_TOK_EXISTS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "EXP",  SQL_TOK_EXP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EXPIRE",  SQL_TOK_EXPIRE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "EXPRESSION",  SQL_TOK_EXPRESSION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EXTERNAL",  SQL_TOK_EXTERNAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EXTRACT",  SQL_TOK_EXTRACT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "EXTSIZE",  SQL_TOK_EXTSIZE,  STL_KEYWORD_CATEGORY_GSQL }, 

    { "FACTORIAL",  SQL_TOK_FACTORIAL,  STL_KEYWORD_CATEGORY_GSQL },
    { "FAILED_LOGIN_ATTEMPTS", SQL_TOK_FAILED_LOGIN_ATTEMPTS,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "FALSE",  SQL_TOK_FALSE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FETCH",  SQL_TOK_FETCH,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FILE",  SQL_TOK_FILE,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "FILES",  SQL_TOK_FILES,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FILTER",  SQL_TOK_FILTER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FINAL",  SQL_TOK_FINAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FIRST",  SQL_TOK_FIRST,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FIRST_VALUE",  SQL_TOK_FIRST_VALUE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FLAG",  SQL_TOK_FLAG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FLOAT",  SQL_TOK_FLOAT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FLOAT4",  SQL_TOK_FLOAT4,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FLOAT8",  SQL_TOK_FLOAT8,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FLOOR",  SQL_TOK_FLOOR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FLUSH",  SQL_TOK_FLUSH,  STL_KEYWORD_CATEGORY_GSQL },
    { "FLUSHING",  SQL_TOK_FLUSHING,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "FOLLOWING",  SQL_TOK_FOLLOWING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FOR",  SQL_TOK_FOR,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FORCE",  SQL_TOK_FORCE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "FOREIGN",  SQL_TOK_FOREIGN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FOREVER",  SQL_TOK_FOREVER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FORTRAN",  SQL_TOK_FORTRAN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FOUND",  SQL_TOK_FOUND,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FRAME_ROW",  SQL_TOK_FRAME_ROW,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "FREE",  SQL_TOK_FREE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FROM",  SQL_TOK_FROM,  STL_KEYWORD_CATEGORY_RESERVED },
    { "FROM_UNIXTIME",  SQL_TOK_FROM_UNIXTIME,  STL_KEYWORD_CATEGORY_GSQL },
    { "FULL",  SQL_TOK_FULL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FUNCTION",  SQL_TOK_FUNCTION,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "FUSION",  SQL_TOK_FUSION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "G",  SQL_TOK_G,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "GENERAL",  SQL_TOK_GENERAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "GENERATED",  SQL_TOK_GENERATED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "GET",  SQL_TOK_GET,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "GLOBAL",  SQL_TOK_GLOBAL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "GO",  SQL_TOK_GO,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "GOTO",  SQL_TOK_GOTO,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "GRANT",  SQL_TOK_GRANT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "GRANTED",  SQL_TOK_GRANTED,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "GREATEST",  SQL_TOK_GREATEST,  STL_KEYWORD_CATEGORY_GSQL },     
    { "GROUP",  SQL_TOK_GROUP,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "GROUPING",  SQL_TOK_GROUPING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "GROUPS",  SQL_TOK_GROUPS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "HASH",  SQL_TOK_HASH,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "HASH_AJ",  SQL_TOK_HASH_AJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "HASH_ISJ",  SQL_TOK_HASH_ISJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "HASH_SJ",  SQL_TOK_HASH_SJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "HAVING",  SQL_TOK_HAVING,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "HIERARCHY",  SQL_TOK_HIERARCHY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "HISTORY",  SQL_TOK_HISTORY,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "HOLD",  SQL_TOK_HOLD,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "HOUR",  SQL_TOK_HOUR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "HOURS",  SQL_TOK_HOURS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "IDENTIFIED",  SQL_TOK_IDENTIFIED,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "IDENTITY",  SQL_TOK_IDENTITY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "IF",  SQL_TOK_IF,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "IGNORE",  SQL_TOK_IGNORE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "IMAGE",  SQL_TOK_IMAGE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "IMMEDIATE",  SQL_TOK_IMMEDIATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "IMPLEMENTATION",  SQL_TOK_IMPLEMENTATION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "IN",  SQL_TOK_IN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "INCLUDING",  SQL_TOK_INCLUDING,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "INCOMPLETE",  SQL_TOK_INCOMPLETE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INCREASE",  SQL_TOK_INCREASE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "INCREMENT",  SQL_TOK_INCREMENT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INCREMENTAL",  SQL_TOK_INCREMENTAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "INDEX",  SQL_TOK_INDEX,  STL_KEYWORD_CATEGORY_GSQL },
    { "INDEX_ASC",  SQL_TOK_INDEX_ASC,  STL_KEYWORD_CATEGORY_GSQL },
    { "INDEX_COMBINE",  SQL_TOK_INDEX_COMBINE,  STL_KEYWORD_CATEGORY_GSQL },
    { "INDEX_DESC",  SQL_TOK_INDEX_DESC,  STL_KEYWORD_CATEGORY_GSQL },
    { "INDICATOR",  SQL_TOK_INDICATOR,  STL_KEYWORD_CATEGORY_RESERVED },
    { "INITCAP",  SQL_TOK_INITCAP,  STL_KEYWORD_CATEGORY_GSQL },
    { "INITIAL",  SQL_TOK_INITIAL,  STL_KEYWORD_CATEGORY_GSQL },
    { "INITIALLY",  SQL_TOK_INITIALLY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INITRANS",  SQL_TOK_INITRANS,  STL_KEYWORD_CATEGORY_GSQL },
    { "INNER",  SQL_TOK_INNER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "INOUT",  SQL_TOK_INOUT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "INPUT",  SQL_TOK_INPUT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INSENSITIVE",  SQL_TOK_INSENSITIVE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INSERT",  SQL_TOK_INSERT,  STL_KEYWORD_CATEGORY_RESERVED },  
    { "INSTANCE",  SQL_TOK_INSTANCE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INSTANTIABLE",  SQL_TOK_INSTANTIABLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INSTEAD",  SQL_TOK_INSTEAD,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "INSTR",  SQL_TOK_INSTR,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "INT",  SQL_TOK_INT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INT2",  SQL_TOK_INT2,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INT4",  SQL_TOK_INT4,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INT8",  SQL_TOK_INT8,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INTEGER",  SQL_TOK_INTEGER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INTEGRITY",  SQL_TOK_INTEGRITY,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "INTERSECT",  SQL_TOK_INTERSECT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "INTERSECTION",  SQL_TOK_INTERSECTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INTERVAL",  SQL_TOK_INTERVAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "INTO",  SQL_TOK_INTO,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "INVOKER",  SQL_TOK_INVOKER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "IN_KEY_RANGE",  SQL_TOK_IN_KEY_RANGE,  STL_KEYWORD_CATEGORY_GSQL },
    { "IRRECOVERABLE",  SQL_TOK_IRRECOVERABLE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "IS",  SQL_TOK_IS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ISOLATION",  SQL_TOK_ISOLATION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "JOIN",  SQL_TOK_JOIN,  STL_KEYWORD_CATEGORY_RESERVED }, 

    { "K",  SQL_TOK_K,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "KEEP",  SQL_TOK_KEEP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "KEY",  SQL_TOK_KEY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "KEYSET",  SQL_TOK_KEYSET,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "KEY_MEMBER",  SQL_TOK_KEY_MEMBER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "KEY_TYPE",  SQL_TOK_KEY_TYPE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "KILL",  SQL_TOK_KILL,  STL_KEYWORD_CATEGORY_GSQL }, 

    { "LAG",  SQL_TOK_LAG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LANGUAGE",  SQL_TOK_LANGUAGE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LARGE",  SQL_TOK_LARGE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LAST",  SQL_TOK_LAST,  STL_KEYWORD_CATEGORY_RESERVED },
    { "LAST_DAY",  SQL_TOK_LAST_DAY,  STL_KEYWORD_CATEGORY_GSQL },     
    { "LAST_VALUE",  SQL_TOK_LAST_VALUE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LATERAL",  SQL_TOK_LATERAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LEAD",  SQL_TOK_LEAD,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LEADING",  SQL_TOK_LEADING,  STL_KEYWORD_CATEGORY_RESERVED },
    { "LEAST",  SQL_TOK_LEAST,  STL_KEYWORD_CATEGORY_GSQL },         
    { "LEFT",  SQL_TOK_LEFT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "LENGTH",  SQL_TOK_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LENGTHB",  SQL_TOK_LENGTHB,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "LEVEL",  SQL_TOK_LEVEL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LIKE",  SQL_TOK_LIKE,  STL_KEYWORD_CATEGORY_RESERVED },
    { "LIKE_REGEX",  SQL_TOK_LIKE_REGEX,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LIMIT",  SQL_TOK_LIMIT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "LIST",  SQL_TOK_LIST,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LN",  SQL_TOK_LN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LOCAL",  SQL_TOK_LOCAL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "LOCALTIME",  SQL_TOK_LOCALTIME,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "LOCALTIMESTAMP",  SQL_TOK_LOCALTIMESTAMP,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "LOCATOR",  SQL_TOK_LOCATOR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LOCK",  SQL_TOK_LOCK,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "LOCKED",  SQL_TOK_LOCKED,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "LOG",  SQL_TOK_LOG,  STL_KEYWORD_CATEGORY_GSQL },
    { "LOGFILE", SQL_TOK_LOGFILE, STL_KEYWORD_CATEGORY_GSQL },
    { "LOGGING",  SQL_TOK_LOGGING,  STL_KEYWORD_CATEGORY_GSQL },
    { "LOGON_USER",  SQL_TOK_LOGON_USER,  STL_KEYWORD_CATEGORY_GSQL },
    { "LOGS",  SQL_TOK_LOGS,  STL_KEYWORD_CATEGORY_GSQL },
    { "LONG",  SQL_TOK_LONG,  STL_KEYWORD_CATEGORY_GSQL },
    { "LOOPBACK",  SQL_TOK_LOOPBACK,  STL_KEYWORD_CATEGORY_GSQL },
    { "LOWER",  SQL_TOK_LOWER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "LPAD",  SQL_TOK_LPAD,  STL_KEYWORD_CATEGORY_GSQL },
    { "LTRIM",  SQL_TOK_LTRIM,  STL_KEYWORD_CATEGORY_GSQL },

    { "M",  SQL_TOK_M,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MAP",  SQL_TOK_MAP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MATCH",  SQL_TOK_MATCH,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "MATCHED",  SQL_TOK_MATCHED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MAX",  SQL_TOK_MAX,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MAXSIZE",  SQL_TOK_MAXSIZE,  STL_KEYWORD_CATEGORY_GSQL },
    { "MAXTRANS",  SQL_TOK_MAXTRANS,  STL_KEYWORD_CATEGORY_GSQL },
    { "MAXVALUE",  SQL_TOK_MAXVALUE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MAX_CARDINALITY",  SQL_TOK_MAX_CARDINALITY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MEMBER",  SQL_TOK_MEMBER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "MEMORY",  SQL_TOK_MEMORY,  STL_KEYWORD_CATEGORY_GSQL },
    { "MERGE",  SQL_TOK_MERGE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "MERGE_AJ",  SQL_TOK_MERGE_AJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "MERGE_SJ",  SQL_TOK_MERGE_SJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "MESSAGE_LENGTH",  SQL_TOK_MESSAGE_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MESSAGE_OCTET_LENGTH",  SQL_TOK_MESSAGE_OCTET_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MESSAGE_TEXT",  SQL_TOK_MESSAGE_TEXT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "METHOD",  SQL_TOK_METHOD,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "MICROSECOND", SQL_TOK_MICROSECOND,  STL_KEYWORD_CATEGORY_GSQL },
    { "MILLISECOND",  SQL_TOK_MILLISECOND,  STL_KEYWORD_CATEGORY_GSQL },
    { "MIN",  SQL_TOK_MIN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MINSIZE",  SQL_TOK_MINSIZE,  STL_KEYWORD_CATEGORY_GSQL },
    { "MINUS",  SQL_TOK_MINUS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "MINUTE",  SQL_TOK_MINUTE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MINUTES",  SQL_TOK_MINUTES,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MINVALUE",  SQL_TOK_MINVALUE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MOD",  SQL_TOK_MOD,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MODE",  SQL_TOK_MODE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "MODIFIES",  SQL_TOK_MODIFIES,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MODULE",  SQL_TOK_MODULE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MONTH",  SQL_TOK_MONTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MORE",  SQL_TOK_MORE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MOUNT",  SQL_TOK_MOUNT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "MULTIPLICATION",  SQL_TOK_MULTIPLICATION,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "MULTISET",  SQL_TOK_MULTISET,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "MUMPS",  SQL_TOK_MUMPS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "NAME",  SQL_TOK_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NAMES",  SQL_TOK_NAMES,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NATIONAL",  SQL_TOK_NATIONAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NATIVE_BIGINT",  SQL_TOK_NATIVE_BIGINT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NATIVE_DOUBLE",  SQL_TOK_NATIVE_DOUBLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NATIVE_INTEGER",  SQL_TOK_NATIVE_INTEGER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NATIVE_REAL",  SQL_TOK_NATIVE_REAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NATIVE_SMALLINT",  SQL_TOK_NATIVE_SMALLINT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NATURAL",  SQL_TOK_NATURAL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "NCHAR",  SQL_TOK_NCHAR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NCLOB",  SQL_TOK_NCLOB,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NEGATIVE",  SQL_TOK_NEGATIVE,  STL_KEYWORD_CATEGORY_GSQL },
    { "NESTING",  SQL_TOK_NESTING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NEW",  SQL_TOK_NEW,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "NEXT",  SQL_TOK_NEXT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "NEXTVAL",  SQL_TOK_NEXTVAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NFC",  SQL_TOK_NFC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NFD",  SQL_TOK_NFD,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NFKC",  SQL_TOK_NFKC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NFKD",  SQL_TOK_NFKD,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NL_AJ",  SQL_TOK_NL_AJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "NL_ISJ",  SQL_TOK_NL_ISJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "NL_SJ",  SQL_TOK_NL_SJ,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "NO",  SQL_TOK_NO,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "NOARCHIVELOG",  SQL_TOK_NOARCHIVELOG,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NOCACHE",  SQL_TOK_NOCACHE,  STL_KEYWORD_CATEGORY_GSQL },
    { "NOCYCLE",  SQL_TOK_NOCYCLE,  STL_KEYWORD_CATEGORY_GSQL },
    { "NOLOGGING",  SQL_TOK_NOLOGGING,  STL_KEYWORD_CATEGORY_GSQL },
    { "NOMAXVALUE",  SQL_TOK_NOMAXVALUE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NOMINVALUE",  SQL_TOK_NOMINVALUE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NONE",  SQL_TOK_NONE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NOPARALLEL",  SQL_TOK_NOPARALLEL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NORESETLOGS",  SQL_TOK_NORESETLOGS,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NORMAL",  SQL_TOK_NORMAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NORMALIZE",  SQL_TOK_NORMALIZE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NORMALIZED",  SQL_TOK_NORMALIZED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NOT",  SQL_TOK_NOT,  STL_KEYWORD_CATEGORY_RESERVED },
    { "NOVALIDATE",  SQL_TOK_NOVALIDATE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "NOWAIT",  SQL_TOK_NOWAIT,  STL_KEYWORD_CATEGORY_GSQL },
    { "NO_INDEX",  SQL_TOK_NO_INDEX,  STL_KEYWORD_CATEGORY_GSQL },
    { "NO_PUSH_PRED",  SQL_TOK_NO_PUSH_PRED,  STL_KEYWORD_CATEGORY_GSQL },
    { "NO_PUSH_SUBQ",  SQL_TOK_NO_PUSH_SUBQ,  STL_KEYWORD_CATEGORY_GSQL },
    { "NO_QUERY_TRANSFORMATION",  SQL_TOK_NO_QUERY_TRANSFORMATION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NO_UNNEST",  SQL_TOK_NO_UNNEST,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NO_USE_HASH",  SQL_TOK_NO_USE_HASH,  STL_KEYWORD_CATEGORY_GSQL },
    { "NO_USE_INL",  SQL_TOK_NO_USE_INL,  STL_KEYWORD_CATEGORY_GSQL },
    { "NO_USE_MERGE",  SQL_TOK_NO_USE_MERGE,  STL_KEYWORD_CATEGORY_GSQL },
    { "NO_USE_NL",  SQL_TOK_NO_USE_NL,  STL_KEYWORD_CATEGORY_GSQL },
    { "NTH_VALUE",  SQL_TOK_NTH_VALUE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NTILE",  SQL_TOK_NTILE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NULL",  SQL_TOK_NULL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "NULLABLE",  SQL_TOK_NULLABLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NULLIF",  SQL_TOK_NULLIF,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NULLS",  SQL_TOK_NULLS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NUMBER",  SQL_TOK_NUMBER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "NUMERIC",  SQL_TOK_NUMERIC,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "NVL",  SQL_TOK_NVL,  STL_KEYWORD_CATEGORY_GSQL },
    { "NVL2",  SQL_TOK_NVL2,  STL_KEYWORD_CATEGORY_GSQL },    

    { "OBJECT",  SQL_TOK_OBJECT,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "OBSOLETE",  SQL_TOK_OBSOLETE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OCCURRENCES_REGEX",  SQL_TOK_OCCURRENCES_REGEX,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OCTETS",  SQL_TOK_OCTETS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OCTET_LENGTH",  SQL_TOK_OCTET_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OF",  SQL_TOK_OF,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "OFF",  SQL_TOK_OFF,  STL_KEYWORD_CATEGORY_GSQL },
    { "OFFLINE",  SQL_TOK_OFFLINE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "OFFSET",  SQL_TOK_OFFSET,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "OJ", SQL_TOK_OJ, STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "OLD",  SQL_TOK_OLD,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ON",  SQL_TOK_ON,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ONLINE",  SQL_TOK_ONLINE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ONLY",  SQL_TOK_ONLY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OPEN",  SQL_TOK_OPEN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "OPERATIONAL",  SQL_TOK_OPERATIONAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "OPTION",  SQL_TOK_OPTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OPTIONS",  SQL_TOK_OPTIONS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OR",  SQL_TOK_OR,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ORDER",  SQL_TOK_ORDER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ORDERED",  SQL_TOK_ORDERED,  STL_KEYWORD_CATEGORY_GSQL },
    { "ORDERING",  SQL_TOK_ORDERING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ORDINALITY",  SQL_TOK_ORDINALITY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OTHERS",  SQL_TOK_OTHERS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OUT",  SQL_TOK_OUT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "OUTER",  SQL_TOK_OUTER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OUTPUT",  SQL_TOK_OUTPUT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OVER",  SQL_TOK_OVER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OVERLAPS",  SQL_TOK_OVERLAPS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OVERLAY",  SQL_TOK_OVERLAY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "OVERRIDING",  SQL_TOK_OVERRIDING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "P",  SQL_TOK_P,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PAD",  SQL_TOK_PAD,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "PAGE",  SQL_TOK_PAGE,  STL_KEYWORD_CATEGORY_GSQL },
    { "PARALLEL",  SQL_TOK_PARALLEL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "PARAMETER",  SQL_TOK_PARAMETER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARAMETER_MODE",  SQL_TOK_PARAMETER_MODE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARAMETER_NAME",  SQL_TOK_PARAMETER_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARAMETER_ORDINAL_POSITION",  SQL_TOK_PARAMETER_ORDINAL_POSITION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARAMETER_SPECIFIC_CATALOG",  SQL_TOK_PARAMETER_SPECIFIC_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARAMETER_SPECIFIC_NAME",  SQL_TOK_PARAMETER_SPECIFIC_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARAMETER_SPECIFIC_SCHEMA",  SQL_TOK_PARAMETER_SPECIFIC_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARTIAL",  SQL_TOK_PARTIAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PARTITION",  SQL_TOK_PARTITION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PASCAL",  SQL_TOK_PASCAL,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "PASSWORD",  SQL_TOK_PASSWORD,  STL_KEYWORD_CATEGORY_GSQL },
    { "PASSWORD_GRACE_TIME",  SQL_TOK_PASSWORD_GRACE_TIME,  STL_KEYWORD_CATEGORY_GSQL },
    { "PASSWORD_LIFE_TIME",  SQL_TOK_PASSWORD_LIFE_TIME,  STL_KEYWORD_CATEGORY_GSQL },
    { "PASSWORD_LOCK_TIME",  SQL_TOK_PASSWORD_LOCK_TIME,  STL_KEYWORD_CATEGORY_GSQL },
    { "PASSWORD_REUSE_MAX",  SQL_TOK_PASSWORD_REUSE_MAX,  STL_KEYWORD_CATEGORY_GSQL },
    { "PASSWORD_REUSE_TIME",  SQL_TOK_PASSWORD_REUSE_TIME,  STL_KEYWORD_CATEGORY_GSQL },
    { "PASSWORD_VERIFY_FUNCTION",  SQL_TOK_PASSWORD_VERIFY_FUNCTION,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "PATH",  SQL_TOK_PATH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PCTFREE",  SQL_TOK_PCTFREE,  STL_KEYWORD_CATEGORY_GSQL },
    { "PCTUSED",  SQL_TOK_PCTUSED,  STL_KEYWORD_CATEGORY_GSQL },
    { "PERCENTILE_CONT",  SQL_TOK_PERCENTILE_CONT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PERCENTILE_DISC",  SQL_TOK_PERCENTILE_DISC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PERCENT_RANK",  SQL_TOK_PERCENT_RANK,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PI",  SQL_TOK_PI,  STL_KEYWORD_CATEGORY_GSQL },
    { "PLACING",  SQL_TOK_PLACING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PLAN",  SQL_TOK_PLAN,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "PLI",  SQL_TOK_PLI,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "POSITION",  SQL_TOK_POSITION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "POSITION_REGEX",  SQL_TOK_POSITION_REGEX,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "POSITIVE",  SQL_TOK_POSITIVE,  STL_KEYWORD_CATEGORY_GSQL },
    { "POST_TRANSACTION",  SQL_TOK_POST_TRANSACTION,  STL_KEYWORD_CATEGORY_GSQL },
    { "POWER",  SQL_TOK_POWER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PRECEDING",  SQL_TOK_PRECEDING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PRECISION",  SQL_TOK_PRECISION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PREPARE",  SQL_TOK_PREPARE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "PRESERVE",  SQL_TOK_PRESERVE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PRIMARY",  SQL_TOK_PRIMARY,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "PRIOR",  SQL_TOK_PRIOR,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "PRIVILEGES",  SQL_TOK_PRIVILEGES,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PROCEDURE",  SQL_TOK_PROCEDURE,  STL_KEYWORD_CATEGORY_RESERVED },
    { "PROFILE",  SQL_TOK_PROFILE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "PUBLIC",  SQL_TOK_PUBLIC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "PUSH_PRED",  SQL_TOK_PUSH_PRED,  STL_KEYWORD_CATEGORY_GSQL },
    { "PUSH_SUBQ",  SQL_TOK_PUSH_SUBQ,  STL_KEYWORD_CATEGORY_GSQL },

    { "QUARTER",  SQL_TOK_QUARTER, STL_KEYWORD_CATEGORY_GSQL },    
    { "QUERY",  SQL_TOK_QUERY,  STL_KEYWORD_CATEGORY_NON_RESERVED },

    { "RADIANS",  SQL_TOK_RADIANS,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "RANDOM",  SQL_TOK_RANDOM,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "RANGE",  SQL_TOK_RANGE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RANK",  SQL_TOK_RANK,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "READ",  SQL_TOK_READ,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "READS",  SQL_TOK_READS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REAL",  SQL_TOK_REAL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RECOVER",  SQL_TOK_RECOVER,  STL_KEYWORD_CATEGORY_GSQL },
    { "RECOVERY",  SQL_TOK_RECOVERY,  STL_KEYWORD_CATEGORY_GSQL },
    { "RECURSIVE",  SQL_TOK_RECURSIVE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REF",  SQL_TOK_REF,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "REFERENCES",  SQL_TOK_REFERENCES,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "REFERENCING",  SQL_TOK_REFERENCING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGISTER",  SQL_TOK_REGISTER,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "REGR_AVGX",  SQL_TOK_REGR_AVGX,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_AVGY",  SQL_TOK_REGR_AVGY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_COUNT",  SQL_TOK_REGR_COUNT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_INTERCEPT",  SQL_TOK_REGR_INTERCEPT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_R2",  SQL_TOK_REGR_R2,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_SLOPE",  SQL_TOK_REGR_SLOPE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_SXX",  SQL_TOK_REGR_SXX,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_SXY",  SQL_TOK_REGR_SXY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "REGR_SYY",  SQL_TOK_REGR_SYY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RELATIVE",  SQL_TOK_RELATIVE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "RELEASE",  SQL_TOK_RELEASE,  STL_KEYWORD_CATEGORY_RESERVED },
    { "RENAME",  SQL_TOK_RENAME,  STL_KEYWORD_CATEGORY_RESERVED },
    { "REPEAT",  SQL_TOK_REPEAT,  STL_KEYWORD_CATEGORY_GSQL },
    { "REPEATABLE",  SQL_TOK_REPEATABLE,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "REPLACE",  SQL_TOK_REPLACE,  STL_KEYWORD_CATEGORY_GSQL },
    { "RESET",  SQL_TOK_RESET,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "RESETLOGS",  SQL_TOK_RESETLOGS,  STL_KEYWORD_CATEGORY_GSQL },
    { "RESPECT",  SQL_TOK_RESPECT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RESTART",  SQL_TOK_RESTART,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "RESTORE",  SQL_TOK_RESTORE,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "RESTRICT",  SQL_TOK_RESTRICT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RESULT",  SQL_TOK_RESULT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "RETURN",  SQL_TOK_RETURN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "RETURNED_CARDINALITY",  SQL_TOK_RETURNED_CARDINALITY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RETURNED_LENGTH",  SQL_TOK_RETURNED_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RETURNED_OCTET_LENGTH",  SQL_TOK_RETURNED_OCTET_LENGTH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RETURNED_SQLSTATE",  SQL_TOK_RETURNED_SQLSTATE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "RETURNING",  SQL_TOK_RETURNING,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "RETURNS",  SQL_TOK_RETURNS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "REUSE",  SQL_TOK_REUSE,  STL_KEYWORD_CATEGORY_GSQL },
    { "REVOKE",  SQL_TOK_REVOKE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "RIGHT",  SQL_TOK_RIGHT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ROLE",  SQL_TOK_ROLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ROLLBACK",  SQL_TOK_ROLLBACK,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ROLLUP",  SQL_TOK_ROLLUP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ROUND",  SQL_TOK_ROUND,  STL_KEYWORD_CATEGORY_GSQL },
    { "ROUTINE",  SQL_TOK_ROUTINE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ROUTINE_CATALOG",  SQL_TOK_ROUTINE_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ROUTINE_NAME",  SQL_TOK_ROUTINE_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ROUTINE_SCHEMA",  SQL_TOK_ROUTINE_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ROW",  SQL_TOK_ROW,  STL_KEYWORD_CATEGORY_RESERVED },
    { "ROWID",  SQL_TOK_ROWID, STL_KEYWORD_CATEGORY_RESERVED },
    { "ROWID_OBJECT_ID", SQL_TOK_ROWID_OBJECT_ID, STL_KEYWORD_CATEGORY_GSQL },
    { "ROWID_PAGE_ID", SQL_TOK_ROWID_PAGE_ID, STL_KEYWORD_CATEGORY_GSQL },
    { "ROWID_ROW_NUMBER", SQL_TOK_ROWID_ROW_NUMBER, STL_KEYWORD_CATEGORY_GSQL },
    { "ROWID_TABLESPACE_ID", SQL_TOK_ROWID_TABLESPACE_ID, STL_KEYWORD_CATEGORY_GSQL },
    { "ROWS",  SQL_TOK_ROWS,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ROW_COUNT",  SQL_TOK_ROW_COUNT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "ROW_DATE",  SQL_TOK_ROW_DATE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ROW_LOCALTIME",  SQL_TOK_ROW_LOCALTIME,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ROW_LOCALTIMESTAMP",  SQL_TOK_ROW_LOCALTIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ROW_NUMBER",  SQL_TOK_ROW_NUMBER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "ROW_TIME",  SQL_TOK_ROW_TIME,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "ROW_TIMESTAMP",  SQL_TOK_ROW_TIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "RPAD",  SQL_TOK_RPAD,  STL_KEYWORD_CATEGORY_GSQL },
    { "RTRIM",  SQL_TOK_RTRIM,  STL_KEYWORD_CATEGORY_GSQL },

    { "SAVEPOINT",  SQL_TOK_SAVEPOINT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SCALE",  SQL_TOK_SCALE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SCHEMA",  SQL_TOK_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SCHEMA_NAME",  SQL_TOK_SCHEMA_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SCOPE",  SQL_TOK_SCOPE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SCOPE_CATALOG",  SQL_TOK_SCOPE_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SCOPE_NAME",  SQL_TOK_SCOPE_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SCOPE_SCHEMA",  SQL_TOK_SCOPE_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SCROLL",  SQL_TOK_SCROLL,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SEARCH",  SQL_TOK_SEARCH,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SECOND",  SQL_TOK_SECOND,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SECONDS",  SQL_TOK_SECONDS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SECTION",  SQL_TOK_SECTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SECURITY",  SQL_TOK_SECURITY,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "SEGMENT",  SQL_TOK_SEGMENT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SELECT",  SQL_TOK_SELECT,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SELF",  SQL_TOK_SELF,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SEMI",  SQL_TOK_SEMI,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SENSITIVE",  SQL_TOK_SENSITIVE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SEQUENCE",  SQL_TOK_SEQUENCE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SERIALIZABLE",  SQL_TOK_SERIALIZABLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SERVER_NAME",  SQL_TOK_SERVER_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SESSION",  SQL_TOK_SESSION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SESSION_ID",  SQL_TOK_SESSION_ID, STL_KEYWORD_CATEGORY_GSQL }, 
    { "SESSION_SERIAL",  SQL_TOK_SESSION_SERIAL, STL_KEYWORD_CATEGORY_GSQL }, 
    { "SESSION_USER",  SQL_TOK_SESSION_USER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SET",  SQL_TOK_SET,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SETS",  SQL_TOK_SETS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SHARE",  SQL_TOK_SHARE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SHIFT_LEFT",  SQL_TOK_SHIFT_LEFT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SHIFT_RIGHT",  SQL_TOK_SHIFT_RIGHT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SIGN",  SQL_TOK_SIGN, STL_KEYWORD_CATEGORY_GSQL }, 
    { "SIMILAR",  SQL_TOK_SIMILAR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SIMPLE",  SQL_TOK_SIMPLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SIN",  SQL_TOK_SIN, STL_KEYWORD_CATEGORY_GSQL }, 
    { "SIZE",  SQL_TOK_SIZE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SKIP",  SQL_TOK_SKIP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SLEEP",  SQL_TOK_SLEEP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SMALLINT",  SQL_TOK_SMALLINT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SOME",  SQL_TOK_SOME,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SOURCE",  SQL_TOK_SOURCE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SPACE",  SQL_TOK_SPACE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SPECIFIC",  SQL_TOK_SPECIFIC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SPECIFICTYPE",  SQL_TOK_SPECIFICTYPE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SPECIFIC_NAME",  SQL_TOK_SPECIFIC_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SPFILE",  SQL_TOK_SPFILE,  STL_KEYWORD_CATEGORY_GSQL },
    { "SPLIT_PART",  SQL_TOK_SPLIT_PART,  STL_KEYWORD_CATEGORY_GSQL },
    { "SQL",  SQL_TOK_SQL,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SQLEXCEPTION",  SQL_TOK_SQLEXCEPTION,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SQLSTATE",  SQL_TOK_SQLSTATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SQLWARNING",  SQL_TOK_SQLWARNING,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SQRT",  SQL_TOK_SQRT,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "START",  SQL_TOK_START,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "STATE",  SQL_TOK_STATE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "STATEMENT",  SQL_TOK_STATEMENT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "STATEMENT_DATE",  SQL_TOK_STATEMENT_DATE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "STATEMENT_LOCALTIME",  SQL_TOK_STATEMENT_LOCALTIME,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "STATEMENT_LOCALTIMESTAMP",  SQL_TOK_STATEMENT_LOCALTIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "STATEMENT_TIME",  SQL_TOK_STATEMENT_TIME,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "STATEMENT_TIMESTAMP",  SQL_TOK_STATEMENT_TIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL },
    { "STATEMENT_VIEW_SCN",  SQL_TOK_STATEMENT_VIEW_SCN,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "STATIC",  SQL_TOK_STATIC,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "STDDEV_POP",  SQL_TOK_STDDEV_POP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "STDDEV_SAMP",  SQL_TOK_STDDEV_SAMP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "STOP",  SQL_TOK_STOP,  STL_KEYWORD_CATEGORY_GSQL },
    { "STORAGE",  SQL_TOK_STORAGE,  STL_KEYWORD_CATEGORY_GSQL },
    { "STRUCTURE",  SQL_TOK_STRUCTURE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "STYLE",  SQL_TOK_STYLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SUBCLASS_ORIGIN",  SQL_TOK_SUBCLASS_ORIGIN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SUBMULTISET",  SQL_TOK_SUBMULTISET,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SUBSTR",  SQL_TOK_SUBSTR,  STL_KEYWORD_CATEGORY_GSQL },
    { "SUBSTRB",  SQL_TOK_SUBSTRB,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SUBSTRING",  SQL_TOK_SUBSTRING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SUBSTRING_REGEX",  SQL_TOK_SUBSTRING_REGEX,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SUBTRACTION",  SQL_TOK_SUBTRACTION,  STL_KEYWORD_CATEGORY_GSQL },
    { "SUGGESTION",  SQL_TOK_SUGGESTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "SUM",  SQL_TOK_SUM,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "SUPPLEMENTAL",  SQL_TOK_SUPPLEMENTAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SWITCH",  SQL_TOK_SWITCH,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "SYMMETRIC",  SQL_TOK_SYMMETRIC,  STL_KEYWORD_CATEGORY_RESERVED },
    { "SYNONYM",  SQL_TOK_SYNONYM,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SYSDATE",  SQL_TOK_SYSDATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SYSTEM",  SQL_TOK_SYSTEM,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SYSTEM_USER",  SQL_TOK_SYSTEM_USER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SYSTIME",  SQL_TOK_SYSTIME,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "SYSTIMESTAMP",  SQL_TOK_SYSTIMESTAMP,  STL_KEYWORD_CATEGORY_RESERVED }, 

    { "T",  SQL_TOK_T,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TABLE",  SQL_TOK_TABLE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "TABLESAMPLE",  SQL_TOK_TABLESAMPLE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TABLESPACE",  SQL_TOK_TABLESPACE,  STL_KEYWORD_CATEGORY_GSQL },
    { "TABLE_NAME",  SQL_TOK_TABLE_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TAN",  SQL_TOK_TAN, STL_KEYWORD_CATEGORY_GSQL }, 
    { "TEMPFILE",  SQL_TOK_TEMPFILE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TEMPORARY",  SQL_TOK_TEMPORARY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "THEN",  SQL_TOK_THEN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "TIES",  SQL_TOK_TIES,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TIME",  SQL_TOK_TIME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TIMESTAMP",  SQL_TOK_TIMESTAMP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TIMEZONE_HOUR",  SQL_TOK_TIMEZONE_HOUR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TIMEZONE_MINUTE",  SQL_TOK_TIMEZONE_MINUTE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TO",  SQL_TOK_TO,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "TOP_LEVEL_COUNT",  SQL_TOK_TOP_LEVEL_COUNT,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "TO_CHAR",  SQL_TOK_TO_CHAR, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_DATE",  SQL_TOK_TO_DATE, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_NATIVE_DOUBLE",  SQL_TOK_TO_NATIVE_DOUBLE, STL_KEYWORD_CATEGORY_GSQL },    
    { "TO_NATIVE_REAL",  SQL_TOK_TO_NATIVE_REAL, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_NUMBER",  SQL_TOK_TO_NUMBER, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_TIME",  SQL_TOK_TO_TIME, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_TIMESTAMP",  SQL_TOK_TO_TIMESTAMP, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_TIMESTAMP_TZ",  SQL_TOK_TO_TIMESTAMP_TZ, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_TIMESTAMP_WITH_TIME_ZONE",  SQL_TOK_TO_TIMESTAMP_WITH_TIME_ZONE, STL_KEYWORD_CATEGORY_GSQL },        
    { "TO_TIME_TZ",  SQL_TOK_TO_TIME_TZ, STL_KEYWORD_CATEGORY_GSQL },
    { "TO_TIME_WITH_TIME_ZONE",  SQL_TOK_TO_TIME_WITH_TIME_ZONE, STL_KEYWORD_CATEGORY_GSQL },
    { "TRAILING",  SQL_TOK_TRAILING,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "TRANSACTION",  SQL_TOK_TRANSACTION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRANSACTIONAL",  SQL_TOK_TRANSACTIONAL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "TRANSACTIONS_COMMITTED",  SQL_TOK_TRANSACTIONS_COMMITTED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRANSACTIONS_ROLLED_BACK",  SQL_TOK_TRANSACTIONS_ROLLED_BACK,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRANSACTION_ACTIVE",  SQL_TOK_TRANSACTION_ACTIVE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRANSACTION_DATE",  SQL_TOK_TRANSACTION_DATE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "TRANSACTION_LOCALTIME",  SQL_TOK_TRANSACTION_LOCALTIME,  STL_KEYWORD_CATEGORY_GSQL },
    { "TRANSACTION_LOCALTIMESTAMP",  SQL_TOK_TRANSACTION_LOCALTIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "TRANSACTION_TIME",  SQL_TOK_TRANSACTION_TIME,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "TRANSACTION_TIMESTAMP",  SQL_TOK_TRANSACTION_TIMESTAMP,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "TRANSFORM",  SQL_TOK_TRANSFORM,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRANSFORMS",  SQL_TOK_TRANSFORMS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRANSLATE",  SQL_TOK_TRANSLATE,  STL_KEYWORD_CATEGORY_NON_RESERVED },
    { "TRANSLATE_REGEX",  SQL_TOK_TRANSLATE_REGEX,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRANSLATION",  SQL_TOK_TRANSLATION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TREAT",  SQL_TOK_TREAT,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRIGGER",  SQL_TOK_TRIGGER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "TRIGGER_CATALOG",  SQL_TOK_TRIGGER_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRIGGER_NAME",  SQL_TOK_TRIGGER_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRIGGER_SCHEMA",  SQL_TOK_TRIGGER_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRIM",  SQL_TOK_TRIM,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRIM_ARRAY",  SQL_TOK_TRIM_ARRAY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TRUE",  SQL_TOK_TRUE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "TRUNC",  SQL_TOK_TRUNC,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "TRUNCATE",  SQL_TOK_TRUNCATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "TS",  SQL_TOK_TS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "TYPE",  SQL_TOK_TYPE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "UESCAPE",  SQL_TOK_UESCAPE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "UNBOUNDED",  SQL_TOK_UNBOUNDED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "UNCOMMITTED",  SQL_TOK_UNCOMMITTED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "UNDER",  SQL_TOK_UNDER,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "UNDO",  SQL_TOK_UNDO,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "UNION",  SQL_TOK_UNION,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "UNIQUE",  SQL_TOK_UNIQUE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "UNKNOWN",  SQL_TOK_UNKNOWN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "UNLIMITED",  SQL_TOK_UNLIMITED,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "UNLOCK",  SQL_TOK_UNLOCK,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "UNNAMED",  SQL_TOK_UNNAMED,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "UNNEST",  SQL_TOK_UNNEST,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "UNSET",  SQL_TOK_UNSET,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "UNTIL",  SQL_TOK_UNTIL,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "UNUSED",  SQL_TOK_UNUSED,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "UPDATE",  SQL_TOK_UPDATE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "UPPER",  SQL_TOK_UPPER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "USAGE",  SQL_TOK_USAGE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "USER",  SQL_TOK_USER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "USER_DEFINED_TYPE_CATALOG",  SQL_TOK_USER_DEFINED_TYPE_CATALOG,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "USER_DEFINED_TYPE_CODE",  SQL_TOK_USER_DEFINED_TYPE_CODE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "USER_DEFINED_TYPE_NAME",  SQL_TOK_USER_DEFINED_TYPE_NAME,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "USER_DEFINED_TYPE_SCHEMA",  SQL_TOK_USER_DEFINED_TYPE_SCHEMA,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "USER_ID",  SQL_TOK_USER_ID, STL_KEYWORD_CATEGORY_GSQL }, 
    { "USE_DISTINCT_HASH",  SQL_TOK_USE_DISTINCT_HASH,  STL_KEYWORD_CATEGORY_GSQL },
    { "USE_GROUP_HASH",  SQL_TOK_USE_GROUP_HASH,  STL_KEYWORD_CATEGORY_GSQL },
    { "USE_HASH",  SQL_TOK_USE_HASH,  STL_KEYWORD_CATEGORY_GSQL },
    { "USE_INL",  SQL_TOK_USE_INL,  STL_KEYWORD_CATEGORY_GSQL },
    { "USE_MERGE",  SQL_TOK_USE_MERGE,  STL_KEYWORD_CATEGORY_GSQL },
    { "USE_NL",  SQL_TOK_USE_NL,  STL_KEYWORD_CATEGORY_GSQL },
    { "USING",  SQL_TOK_USING,  STL_KEYWORD_CATEGORY_RESERVED }, 

    { "VALIDATE",  SQL_TOK_VALIDATE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "VALUE",  SQL_TOK_VALUE,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "VALUES",  SQL_TOK_VALUES,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "VALUE_OF",  SQL_TOK_VALUE_OF,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VARBINARY",  SQL_TOK_VARBINARY,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VARCHAR",  SQL_TOK_VARCHAR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VARCHAR2",  SQL_TOK_VARCHAR2,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VARYING",  SQL_TOK_VARYING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VAR_POP",  SQL_TOK_VAR_POP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VAR_SAMP",  SQL_TOK_VAR_SAMP,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VERSION",  SQL_TOK_VERSION,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VERSIONING",  SQL_TOK_VERSIONING,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VERSIONS",  SQL_TOK_VERSIONS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "VIEW",  SQL_TOK_VIEW,  STL_KEYWORD_CATEGORY_RESERVED }, 

    { "WAIT",  SQL_TOK_WAIT,  STL_KEYWORD_CATEGORY_GSQL },
    { "WAKEUP",  SQL_TOK_WAKEUP,  STL_KEYWORD_CATEGORY_GSQL },
    { "WEEK", SQL_TOK_WEEK,  STL_KEYWORD_CATEGORY_GSQL },
    { "WEEKDAY", SQL_TOK_WEEKDAY,  STL_KEYWORD_CATEGORY_GSQL },
    { "WHEN",  SQL_TOK_WHEN,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "WHENEVER",  SQL_TOK_WHENEVER,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "WHERE",  SQL_TOK_WHERE,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "WIDTH_BUCKET",  SQL_TOK_WIDTH_BUCKET,  STL_KEYWORD_CATEGORY_GSQL }, 
    { "WINDOW",  SQL_TOK_WINDOW,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "WITH",  SQL_TOK_WITH,  STL_KEYWORD_CATEGORY_RESERVED }, 
    { "WITHIN",  SQL_TOK_WITHIN,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "WITHOUT",  SQL_TOK_WITHOUT,  STL_KEYWORD_CATEGORY_RESERVED },
    { "WORK",  SQL_TOK_WORK,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "WRITE",  SQL_TOK_WRITE,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 

    { "YEAR",  SQL_TOK_YEAR,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "YEARS",  SQL_TOK_YEARS,  STL_KEYWORD_CATEGORY_NON_RESERVED }, 
    { "YES",  SQL_TOK_YES,  STL_KEYWORD_CATEGORY_GSQL },

    { "ZONE",  SQL_TOK_ZONE,  STL_KEYWORD_CATEGORY_NON_RESERVED }
};


const stlInt16  @STL_PARSER_PREFIX@KeyWordCount = STL_KEY_WORD_COUNT( @STL_PARSER_PREFIX@KeyWordList );

/**
 * @brief keyword 찾기
 * @param[in,out]   aIdentifier    문자열
 *
 * @return keyword 정보
 */
const stlKeyWord * @STL_PARSER_PREFIX@ScanKeyWordLookup( stlChar * aIdentifier )
{
    const stlKeyWord  *  sLow;
    const stlKeyWord  *  sHigh;
    const stlKeyWord  *  sMiddle;
    const stlKeyWord  *  sResultKeyWord;
    stlInt32             sLength;
    stlInt32             sDifference;

    
    /*
     * check identifier length
     */
    
    sLength = 0;
    while( aIdentifier[ sLength ] != 0 )
    {
        sLength++;
    }

    if( sLength >= STL_KEY_WORD_MAX_LENGTH )
    {
        sResultKeyWord = NULL;
    }
    else
    {
        /*
         * scan keyword
         */

        sLow           = @STL_PARSER_PREFIX@KeyWordList;
        sHigh          = & @STL_PARSER_PREFIX@KeyWordList[ @STL_PARSER_PREFIX@KeyWordCount - 1 ];
        sResultKeyWord = NULL;
            
        while( sLow <= sHigh )
        {
            sMiddle = sLow + ( ( sHigh - sLow ) / 2 );
        
            sDifference = stlStrcmp( sMiddle->mName, aIdentifier );
        
            if( sDifference == 0 )
            {
                sResultKeyWord = sMiddle;
                break;
            }
            else if( sDifference < 0 )
            {
                sLow = sMiddle + 1;
            }
            else
            {
                sHigh = sMiddle - 1;
            }
        }
    }

    
    /*
     * output 설정
     */

    return sResultKeyWord;
}


stlInt32 STL_PARSER_ERROR( YYLTYPE        * aLocation,
                           stlParseParam  * aParam,
                           void           * aScanner,
                           const stlChar  * aMsg )
{
    stlInt32   i;
    stlInt32   sCurLineNo = 1;
    stlChar  * sStartPtr = aParam->mBuffer;
    stlChar  * sEndPtr;
    stlChar  * sErrMsg;
    stlChar    sErrLineMsgBuffer[128];
    stlInt32   sErrMsgLength;

    /**
     * 에러 메세지의 총길이는 (원본 SQL의 길이 + 에러 위치 메세지 길이 +
     * 에러 라인 메세지 길이)의 총합과 같다.
     * (에러 위치 메시지 길이 + 에러 라인 메세지 길이)를 정확히 예상할수도 있지만
     * 대략 원본 메세지 길이의 4배보다는 작음을 보장할수 있다.
     */
    
    STL_TRY( aParam->mErrSkip == STL_FALSE );
        
    sErrMsgLength = (stlStrlen( sStartPtr ) + 1) * 4;

    STL_TRY( aParam->mAllocator( aParam->mContext,
                                 sErrMsgLength,
                                 (void**)&sErrMsg,
                                 aParam->mErrorStack )
             == STL_SUCCESS );

    sErrMsg[0] = '\0';
    
    while( sCurLineNo < aParam->mLineNo )
    {
        if( *sStartPtr == '\n' )
        {
            sCurLineNo++;
        }
        sStartPtr++;
    }
    sEndPtr = sStartPtr;
    while( (*sEndPtr != '\n') && (*sEndPtr != '\0') )
    {
        sEndPtr++;
    }

    /**
     * 원본 SQL 저장
     */
    stlStrnncat( sErrMsg, "\n", sErrMsgLength, STL_UINT32_MAX );
    stlStrnncat( sErrMsg, sStartPtr, sErrMsgLength, sEndPtr - sStartPtr + 1 );
    stlStrnncat( sErrMsg, "\n", sErrMsgLength, STL_UINT32_MAX );

    /**
     * 에러 위치 메세지 저장
     */
    for( i = 1; i < aParam->mColumn; i++ )
    {
        stlStrnncat( sErrMsg, ".", sErrMsgLength, STL_UINT32_MAX );
    }
    stlStrnncat( sErrMsg, "^", sErrMsgLength, STL_UINT32_MAX );
    for( i = 0; i < aParam->mLength - 2; i++ )
    {
        stlStrnncat( sErrMsg, " ", sErrMsgLength, STL_UINT32_MAX );
    }
    if( aParam->mLength >= 2 )
    {
        stlStrnncat( sErrMsg, "^", sErrMsgLength, STL_UINT32_MAX );
    }
    stlStrnncat( sErrMsg, "\n", sErrMsgLength, STL_UINT32_MAX );

    /**
     * 에러 라인 메세지 저장
     */
    stlSnprintf( sErrLineMsgBuffer,
                 128,
                 "Error at line %d",
                 aParam->mLineNo );
    stlStrnncat( sErrMsg, sErrLineMsgBuffer, sErrMsgLength, STL_UINT32_MAX );
    
    aParam->mErrStatus = STL_FAILURE;
    aParam->mErrMsg = sErrMsg;

    return 0;

    STL_FINISH;

    return 0;
}
