/**
 * @brief
 * <BR> 1. STL_INCLUDE_PARSE_GRAMMER_H
 * <BR> 2. STL_PARSER_PARSER_PREFIX
 */

%{
#include <stl.h>
@STL_INCLUDE_GRAMMER_H@

#define YYLLOC_DEFAULT(Current, Rhs, N)         \
    do {                                        \
        if (N)                                  \
            (Current) = (Rhs)[1];               \
        else                                    \
            (Current) = (Rhs)[0];               \
    } while (0)

%}


%pure-parser
%locations

%parse-param {stlParseParam * param}
%parse-param {void          * scanner}
%lex-param   {yyscan_t      * scanner}

%left SQL_TOK_PLUS_SIGN
%left SQL_TOK_MINUS_SIGN
%left SQL_TOK_ASTERISK
%left SQL_TOK_SOLIDUS
%right SQL_TOK_LEFT_PAREN
%left SQL_TOK_RIGHT_PAREN
%left SQL_TOK_COMMA
%left SQL_TOK_AND
%left SQL_TOK_OR
%left SQL_TOK_CONCAT_OPER
%left SQL_TOK_LIKE
%left SQL_TOK_IN
%left SQL_TOK_BETWEEN
%left SQL_TOK_NOT
%left SQL_TOK_IS
%right SQL_TOK_AT

/* need type definitions */



/***********************************************************************
 * keyword category : STL_KEYWORD_CATEGORY_RESERVED
 * - 테이블 이름이나 컬럼 이름으로 사용될 수 없는 keyword token 이다.
 * - NON_RESERVED 로 변경할 수 있다면 최대한 변경
 * - 추가가 필요하다면 신중하게 판단해야 함.
 ***********************************************************************/

%token
SQL_TOK_ABSOLUTE
SQL_TOK_ACCESS
SQL_TOK_ALL
SQL_TOK_ALLOCATE
SQL_TOK_ALTER
SQL_TOK_AND
SQL_TOK_ANY
SQL_TOK_ARE
SQL_TOK_AS
SQL_TOK_ASYMMETRIC
SQL_TOK_AT
SQL_TOK_AUTHORIZATION

SQL_TOK_BEGIN
SQL_TOK_BETWEEN
SQL_TOK_BOTH
SQL_TOK_BY

SQL_TOK_CALL
SQL_TOK_CASE
SQL_TOK_CHECK
SQL_TOK_CLOSE
SQL_TOK_COLUMN
SQL_TOK_COMMENT
SQL_TOK_COMMIT
SQL_TOK_CONNECT
SQL_TOK_CONSTRAINT
SQL_TOK_CREATE
SQL_TOK_CROSS
SQL_TOK_CURRENT
SQL_TOK_CURRENT_CATALOG
SQL_TOK_CURRENT_DATE
SQL_TOK_CURRENT_DEFAULT_TRANSFORM_GROUP
SQL_TOK_CURRENT_PATH
SQL_TOK_CURRENT_ROLE
SQL_TOK_CURRENT_ROW
SQL_TOK_CURRENT_SCHEMA
SQL_TOK_CURRENT_TIME
SQL_TOK_CURRENT_TIMESTAMP
SQL_TOK_CURRENT_TRANSFORM_GROUP_FOR_TYPE
SQL_TOK_CURRENT_USER

SQL_TOK_DATABASE
SQL_TOK_DEALLOCATE
SQL_TOK_DECLARE
SQL_TOK_DEFAULT
SQL_TOK_DELETE
SQL_TOK_DEREF
SQL_TOK_DESCRIBE
SQL_TOK_DETERMINISTIC
SQL_TOK_DISCONNECT
SQL_TOK_DISTINCT
SQL_TOK_DROP

SQL_TOK_ELSE
SQL_TOK_END
SQL_TOK_END_EXEC
SQL_TOK_ESCAPE
SQL_TOK_EXCEPT
SQL_TOK_EXEC
SQL_TOK_EXECUTE
SQL_TOK_EXISTS

SQL_TOK_FALSE
SQL_TOK_FETCH
SQL_TOK_FILTER
SQL_TOK_FIRST
SQL_TOK_FOR
SQL_TOK_FOREIGN
SQL_TOK_FREE
SQL_TOK_FROM
SQL_TOK_FULL
SQL_TOK_FUNCTION

SQL_TOK_GET
SQL_TOK_GLOBAL
SQL_TOK_GRANT
SQL_TOK_GROUP

SQL_TOK_HAVING
SQL_TOK_HOLD

SQL_TOK_IDENTIFIED
SQL_TOK_IF
SQL_TOK_IMMEDIATE
SQL_TOK_IN
SQL_TOK_INDICATOR
SQL_TOK_INNER
SQL_TOK_INOUT
SQL_TOK_INSERT
SQL_TOK_INTERSECT
SQL_TOK_INTO
SQL_TOK_IS

SQL_TOK_JOIN

SQL_TOK_LAST
SQL_TOK_LEADING
SQL_TOK_LEFT
SQL_TOK_LIKE
SQL_TOK_LIMIT
SQL_TOK_LOCAL
SQL_TOK_LOCALTIME
SQL_TOK_LOCALTIMESTAMP

SQL_TOK_MATCH
SQL_TOK_MEMBER
SQL_TOK_MERGE
SQL_TOK_MINUS

SQL_TOK_NATURAL
SQL_TOK_NEW
SQL_TOK_NEXT
SQL_TOK_NOT
SQL_TOK_NULL

SQL_TOK_OF
SQL_TOK_OFFSET
SQL_TOK_OLD
SQL_TOK_ON
SQL_TOK_OPEN
SQL_TOK_OR
SQL_TOK_ORDER
SQL_TOK_OUT

SQL_TOK_PREPARE
SQL_TOK_PRIMARY
SQL_TOK_PRIOR
SQL_TOK_PROCEDURE
SQL_TOK_PROFILE

SQL_TOK_REF
SQL_TOK_REFERENCES
SQL_TOK_RELATIVE
SQL_TOK_RELEASE
SQL_TOK_RENAME
SQL_TOK_RETURN
SQL_TOK_RETURNING
SQL_TOK_RETURNS
SQL_TOK_REVOKE
SQL_TOK_RIGHT
SQL_TOK_ROLLBACK
SQL_TOK_ROW
SQL_TOK_ROWID
SQL_TOK_ROW_NUMBER
SQL_TOK_ROWS

SQL_TOK_SAVEPOINT
SQL_TOK_SELECT
SQL_TOK_SESSION_USER
SQL_TOK_SET
SQL_TOK_SOME
SQL_TOK_SQL
SQL_TOK_SQLEXCEPTION
SQL_TOK_SQLSTATE
SQL_TOK_SQLWARNING
SQL_TOK_START
SQL_TOK_SYMMETRIC
SQL_TOK_SYNONYM
SQL_TOK_SYSDATE
SQL_TOK_SYSTEM
SQL_TOK_SYSTEM_USER
SQL_TOK_SYSTIME
SQL_TOK_SYSTIMESTAMP

SQL_TOK_TABLE
SQL_TOK_THEN
SQL_TOK_TO
SQL_TOK_TRAILING
SQL_TOK_TRIGGER
SQL_TOK_TRUNCATE
SQL_TOK_TRUE

SQL_TOK_UNION
SQL_TOK_UNIQUE
SQL_TOK_UNKNOWN
SQL_TOK_UPDATE
SQL_TOK_UPPER
SQL_TOK_USER
SQL_TOK_USING

SQL_TOK_VALUES
SQL_TOK_VIEW

SQL_TOK_WHEN
SQL_TOK_WHENEVER
SQL_TOK_WHERE
SQL_TOK_WINDOW
SQL_TOK_WITH
SQL_TOK_WITHOUT



/***********************************************************************
 * keyword category : STL_KEYWORD_CATEGORY_NON_RESERVED
 * - table_name, column_name 으로 사용가능한 keyword token
 * - SQL 표준에 정의된 non-reserved keyword 임
 * - 주의) nonreserved_keyword BNF 에 추가해야 함.
 ***********************************************************************/


%token
SQL_TOK_A
SQL_TOK_ABS
SQL_TOK_ACTION
SQL_TOK_ADA
SQL_TOK_ADD
SQL_TOK_ADMIN
SQL_TOK_ADMINISTRATION
SQL_TOK_AFTER
SQL_TOK_ALWAYS
SQL_TOK_ARRAY
SQL_TOK_ARRAY_AGG
SQL_TOK_ASC
SQL_TOK_ASSERTION
SQL_TOK_ASSIGNMENT
SQL_TOK_ATOMIC
SQL_TOK_ATTRIBUTE
SQL_TOK_ATTRIBUTES
SQL_TOK_AUTOMATICALLY
SQL_TOK_AVG

SQL_TOK_B
SQL_TOK_BEFORE
SQL_TOK_BEGIN_FRAME
SQL_TOK_BEGIN_PARTITION
SQL_TOK_BERNOULLI
SQL_TOK_BIGINT
SQL_TOK_BINARY
SQL_TOK_BLOB
SQL_TOK_BOOLEAN
SQL_TOK_BREADTH

SQL_TOK_C
SQL_TOK_CALLED
SQL_TOK_CARDINALITY
SQL_TOK_CASCADE
SQL_TOK_CASCADED
SQL_TOK_CAST
SQL_TOK_CATALOG
SQL_TOK_CATALOG_NAME
SQL_TOK_CEIL
SQL_TOK_CEILING
SQL_TOK_CHAIN
SQL_TOK_CHAR
SQL_TOK_CHARACTERISTICS
SQL_TOK_CHARACTER
SQL_TOK_CHARACTERS
SQL_TOK_CHARACTER_SET_CATALOG
SQL_TOK_CHARACTER_SET_NAME
SQL_TOK_CHARACTER_SET_SCHEMA
SQL_TOK_CHARACTER_LENGTH
SQL_TOK_CHAR_LENGTH
SQL_TOK_CHECKPOINT
SQL_TOK_CLASS_ORIGIN
SQL_TOK_CLOB
SQL_TOK_COALESCE
SQL_TOK_COBOL
SQL_TOK_COLLATE
SQL_TOK_COLLATION
SQL_TOK_COLLATION_CATALOG
SQL_TOK_COLLATION_NAME
SQL_TOK_COLLATION_SCHEMA
SQL_TOK_COLLECT
SQL_TOK_COLUMN_NAME
SQL_TOK_COMMAND_FUNCTION
SQL_TOK_COMMAND_FUNCTION_CODE
SQL_TOK_COMMITTED
SQL_TOK_CONDITION
SQL_TOK_CONDITION_NUMBER
SQL_TOK_CONNECTION
SQL_TOK_CONNECTION_NAME
SQL_TOK_CONSTRAINTS
SQL_TOK_CONSTRAINT_CATALOG
SQL_TOK_CONSTRAINT_NAME
SQL_TOK_CONSTRAINT_SCHEMA
SQL_TOK_CONSTRUCTOR
SQL_TOK_CONTAINS
SQL_TOK_CONTINUE
SQL_TOK_CONTROL
SQL_TOK_CONVERT
SQL_TOK_CORR
SQL_TOK_CORRESPONDING
SQL_TOK_COUNT
SQL_TOK_COVAR_POP
SQL_TOK_COVAR_SAMP
SQL_TOK_CUBE
SQL_TOK_CUME_DIST
SQL_TOK_CURSOR_NAME
SQL_TOK_CYCLE

SQL_TOK_D
SQL_TOK_DATA
SQL_TOK_DATE
SQL_TOK_DATETIME_INTERVAL_CODE
SQL_TOK_DATETIME_INTERVAL_PRECISION
SQL_TOK_DAY
SQL_TOK_DAYS
SQL_TOK_DEC
SQL_TOK_DECIMAL
SQL_TOK_DEFAULTS
SQL_TOK_DEFERRABLE
SQL_TOK_DEFERRED
SQL_TOK_DEFINED
SQL_TOK_DEFINER
SQL_TOK_DEGREE
SQL_TOK_DENSE_RANK
SQL_TOK_DEPTH
SQL_TOK_DERIVED
SQL_TOK_DESC
SQL_TOK_DESCRIPTOR
SQL_TOK_DIAGNOSTICS
SQL_TOK_DISPATCH
SQL_TOK_DOMAIN
SQL_TOK_DOUBLE
SQL_TOK_DYNAMIC
SQL_TOK_DYNAMIC_FUNCTION
SQL_TOK_DYNAMIC_FUNCTION_CODE

SQL_TOK_EACH
SQL_TOK_ELEMENT
SQL_TOK_END_FRAME
SQL_TOK_END_PARTITION
SQL_TOK_ENFORCED
SQL_TOK_EQUALS
SQL_TOK_EVERY
SQL_TOK_EXCLUDE
SQL_TOK_EXCLUDING
SQL_TOK_EXP
SQL_TOK_EXPRESSION
SQL_TOK_EXTERNAL
SQL_TOK_EXTRACT

SQL_TOK_FILE
SQL_TOK_FILES
SQL_TOK_FINAL
SQL_TOK_FIRST_VALUE
SQL_TOK_FLAG
SQL_TOK_FLOAT
SQL_TOK_FLOAT4
SQL_TOK_FLOAT8
SQL_TOK_FLOOR
SQL_TOK_FOLLOWING
SQL_TOK_FOREVER
SQL_TOK_FORTRAN
SQL_TOK_FRAME_ROW
SQL_TOK_FOUND
SQL_TOK_FUSION

SQL_TOK_G
SQL_TOK_GENERAL
SQL_TOK_GENERATED
SQL_TOK_GO
SQL_TOK_GOTO
SQL_TOK_GRANTED
SQL_TOK_GROUPING
SQL_TOK_GROUPS

SQL_TOK_HASH_AJ
SQL_TOK_HASH_ISJ
SQL_TOK_HASH_SJ
SQL_TOK_HIERARCHY
SQL_TOK_HOUR
SQL_TOK_HOURS

SQL_TOK_IDENTITY
SQL_TOK_IGNORE
SQL_TOK_IMAGE
SQL_TOK_IMPLEMENTATION
SQL_TOK_INCLUDING
SQL_TOK_INCREMENT
SQL_TOK_INITIALLY
SQL_TOK_INPUT
SQL_TOK_INSENSITIVE
SQL_TOK_INSTANCE
SQL_TOK_INSTANTIABLE
SQL_TOK_INSTEAD
SQL_TOK_INT
SQL_TOK_INT2
SQL_TOK_INT4
SQL_TOK_INT8
SQL_TOK_INTEGER
SQL_TOK_INTERSECTION
SQL_TOK_INTERVAL
SQL_TOK_INVOKER
SQL_TOK_ISOLATION

SQL_TOK_K
SQL_TOK_KEEP
SQL_TOK_KEY
SQL_TOK_KEY_MEMBER
SQL_TOK_KEY_TYPE

SQL_TOK_LAG
SQL_TOK_LANGUAGE
SQL_TOK_LARGE
SQL_TOK_LAST_VALUE
SQL_TOK_LATERAL
SQL_TOK_LEAD
SQL_TOK_LENGTH
SQL_TOK_LEVEL
SQL_TOK_LIKE_REGEX
SQL_TOK_LIST
SQL_TOK_LN
SQL_TOK_LOCATOR
SQL_TOK_LOWER

SQL_TOK_M
SQL_TOK_MAP
SQL_TOK_MATCHED
SQL_TOK_MAX
SQL_TOK_MAXVALUE
SQL_TOK_MAX_CARDINALITY
SQL_TOK_MERGE_AJ
SQL_TOK_MERGE_SJ
SQL_TOK_MESSAGE_LENGTH
SQL_TOK_MESSAGE_OCTET_LENGTH
SQL_TOK_MESSAGE_TEXT
SQL_TOK_METHOD
SQL_TOK_MIN
SQL_TOK_MINVALUE
SQL_TOK_MINUTE
SQL_TOK_MINUTES
SQL_TOK_MOD
SQL_TOK_MODIFIES
SQL_TOK_MODULE
SQL_TOK_MONTH
SQL_TOK_MORE
SQL_TOK_MULTISET
SQL_TOK_MUMPS

SQL_TOK_NAME
SQL_TOK_NAMES
SQL_TOK_NATIONAL
SQL_TOK_NATIVE_BIGINT
SQL_TOK_NATIVE_DOUBLE
SQL_TOK_NATIVE_INTEGER
SQL_TOK_NATIVE_REAL
SQL_TOK_NATIVE_SMALLINT
SQL_TOK_NCHAR
SQL_TOK_NCLOB
SQL_TOK_NESTING
SQL_TOK_NFC
SQL_TOK_NFD
SQL_TOK_NFKC
SQL_TOK_NFKD
SQL_TOK_NL_AJ
SQL_TOK_NL_ISJ
SQL_TOK_NL_SJ
SQL_TOK_NO
SQL_TOK_NO_QUERY_TRANSFORMATION
SQL_TOK_NO_UNNEST
SQL_TOK_NONE
SQL_TOK_NORMALIZE
SQL_TOK_NORMALIZED
SQL_TOK_NTH_VALUE
SQL_TOK_NTILE
SQL_TOK_NULLABLE
SQL_TOK_NULLIF
SQL_TOK_NULLS
SQL_TOK_NUMBER
SQL_TOK_NUMERIC

SQL_TOK_OBJECT
SQL_TOK_OBSOLETE
SQL_TOK_OCCURRENCES_REGEX
SQL_TOK_OCTETS
SQL_TOK_OCTET_LENGTH
SQL_TOK_OJ
SQL_TOK_ONLY
SQL_TOK_OPTION
SQL_TOK_OPTIONS
SQL_TOK_ORDERING
SQL_TOK_ORDINALITY
SQL_TOK_OTHERS
SQL_TOK_OUTER
SQL_TOK_OUTPUT
SQL_TOK_OVER
SQL_TOK_OVERLAPS
SQL_TOK_OVERLAY
SQL_TOK_OVERRIDING

SQL_TOK_P
SQL_TOK_PAD
SQL_TOK_PARAMETER
SQL_TOK_PARAMETER_MODE
SQL_TOK_PARAMETER_NAME
SQL_TOK_PARAMETER_ORDINAL_POSITION
SQL_TOK_PARAMETER_SPECIFIC_CATALOG
SQL_TOK_PARAMETER_SPECIFIC_NAME
SQL_TOK_PARAMETER_SPECIFIC_SCHEMA
SQL_TOK_PARTIAL
SQL_TOK_PARTITION
SQL_TOK_PASCAL
SQL_TOK_PATH
SQL_TOK_PERCENT_RANK
SQL_TOK_PERCENTILE_CONT
SQL_TOK_PERCENTILE_DISC
SQL_TOK_PLACING
SQL_TOK_PLI
SQL_TOK_POSITION
SQL_TOK_POSITION_REGEX
SQL_TOK_POWER
SQL_TOK_PRECEDING
SQL_TOK_PRECISION
SQL_TOK_PRESERVE
SQL_TOK_PRIVILEGES
SQL_TOK_PUBLIC

SQL_TOK_QUERY

SQL_TOK_RANGE
SQL_TOK_RANK
SQL_TOK_READS
SQL_TOK_REAL
SQL_TOK_RECURSIVE
SQL_TOK_REFERENCING
SQL_TOK_REGR_AVGX
SQL_TOK_REGR_AVGY
SQL_TOK_REGR_COUNT
SQL_TOK_REGR_INTERCEPT
SQL_TOK_REGR_R2
SQL_TOK_REGR_SLOPE
SQL_TOK_REGR_SXX
SQL_TOK_REGR_SXY
SQL_TOK_REGR_SYY
SQL_TOK_REPEATABLE
SQL_TOK_RESPECT
SQL_TOK_RESTART
SQL_TOK_RESTORE
SQL_TOK_RESTRICT
SQL_TOK_RETURNED_CARDINALITY
SQL_TOK_RETURNED_LENGTH
SQL_TOK_RETURNED_OCTET_LENGTH
SQL_TOK_RETURNED_SQLSTATE
SQL_TOK_ROLE
SQL_TOK_ROLLUP
SQL_TOK_ROUTINE
SQL_TOK_ROUTINE_CATALOG
SQL_TOK_ROUTINE_NAME
SQL_TOK_ROUTINE_SCHEMA
SQL_TOK_ROW_COUNT

SQL_TOK_SCALE
SQL_TOK_SCHEMA
SQL_TOK_SCHEMA_NAME
SQL_TOK_SCOPE
SQL_TOK_SCOPE_CATALOG
SQL_TOK_SCOPE_NAME
SQL_TOK_SCOPE_SCHEMA
SQL_TOK_SCROLL
SQL_TOK_SEARCH
SQL_TOK_SECOND
SQL_TOK_SECONDS
SQL_TOK_SECTION
SQL_TOK_SECURITY
SQL_TOK_SELF
SQL_TOK_SENSITIVE
SQL_TOK_SEQUENCE
SQL_TOK_SERIALIZABLE
SQL_TOK_SERVER_NAME
SQL_TOK_SESSION
SQL_TOK_SETS
SQL_TOK_SIMILAR
SQL_TOK_SIMPLE
SQL_TOK_SIZE
SQL_TOK_SMALLINT
SQL_TOK_SOURCE
SQL_TOK_SPACE
SQL_TOK_SPECIFIC
SQL_TOK_SPECIFICTYPE
SQL_TOK_SPECIFIC_NAME
SQL_TOK_STATE
SQL_TOK_STATEMENT
SQL_TOK_STATIC
SQL_TOK_STDDEV_POP
SQL_TOK_STDDEV_SAMP
SQL_TOK_STRUCTURE
SQL_TOK_STYLE
SQL_TOK_SUBCLASS_ORIGIN
SQL_TOK_SUBMULTISET
SQL_TOK_SUBSTRB
SQL_TOK_SUBSTRING
SQL_TOK_SUBSTRING_REGEX
SQL_TOK_SUGGESTION
SQL_TOK_SUM

SQL_TOK_T
SQL_TOK_TABLESAMPLE
SQL_TOK_TABLE_NAME
SQL_TOK_TEMPFILE
SQL_TOK_TEMPORARY
SQL_TOK_TIES
SQL_TOK_TIME
SQL_TOK_TIMESTAMP
SQL_TOK_TIMEZONE_HOUR
SQL_TOK_TIMEZONE_MINUTE
SQL_TOK_TOP_LEVEL_COUNT
SQL_TOK_TRANSACTION
SQL_TOK_TRANSACTION_ACTIVE
SQL_TOK_TRANSACTIONS_COMMITTED
SQL_TOK_TRANSACTIONS_ROLLED_BACK
SQL_TOK_TRANSFORM
SQL_TOK_TRANSFORMS
SQL_TOK_TRANSLATE
SQL_TOK_TRANSLATE_REGEX
SQL_TOK_TRANSLATION
SQL_TOK_TREAT
SQL_TOK_TRIGGER_CATALOG
SQL_TOK_TRIGGER_NAME
SQL_TOK_TRIGGER_SCHEMA
SQL_TOK_TRIM
SQL_TOK_TRIM_ARRAY
SQL_TOK_TS
SQL_TOK_TYPE

SQL_TOK_UESCAPE
SQL_TOK_UNBOUNDED
SQL_TOK_UNCOMMITTED
SQL_TOK_UNDER
SQL_TOK_UNDO
SQL_TOK_UNNAMED
SQL_TOK_UNNEST
SQL_TOK_USAGE
SQL_TOK_USER_DEFINED_TYPE_CATALOG
SQL_TOK_USER_DEFINED_TYPE_CODE
SQL_TOK_USER_DEFINED_TYPE_NAME
SQL_TOK_USER_DEFINED_TYPE_SCHEMA

SQL_TOK_VALUE_OF
SQL_TOK_VAR_POP
SQL_TOK_VAR_SAMP
SQL_TOK_VARBINARY
SQL_TOK_VARCHAR
SQL_TOK_VARCHAR2
SQL_TOK_VARYING
SQL_TOK_VERSION
SQL_TOK_VERSIONING
SQL_TOK_VERSIONS

SQL_TOK_WITHIN
SQL_TOK_WORK
SQL_TOK_WRITE

SQL_TOK_YEAR
SQL_TOK_YEARS

SQL_TOK_ZONE


/***********************************************************************
 * keyword category : STL_KEYWORD_CATEGORY_GSQL
 * - table_name, column_name 으로 사용가능한 keyword token
 * - SQL 표준에 정의되지 않은 non-reserved keyword 임 
 * - 주의) gsql_keyword BNF 에 추가해야 함.
 ***********************************************************************/


%token
SQL_TOK_ABORT
SQL_TOK_ACCOUNT
SQL_TOK_ACOS
SQL_TOK_ADDDATE
SQL_TOK_ADDITION
SQL_TOK_ADDTIME
SQL_TOK_ADD_MONTHS
SQL_TOK_AGER
SQL_TOK_ANTI
SQL_TOK_ARCHIVELOG
SQL_TOK_ASENSITIVE
SQL_TOK_ASIN
SQL_TOK_ATAN
SQL_TOK_ATAN2
SQL_TOK_AUTOEXTEND

SQL_TOK_BACKUP
SQL_TOK_BITAND
SQL_TOK_BITNOT
SQL_TOK_BITOR
SQL_TOK_BITXOR
SQL_TOK_BIT_LENGTH
SQL_TOK_BREAKPOINT
SQL_TOK_BYTE
SQL_TOK_BYTE_LENGTH

SQL_TOK_CACHE
SQL_TOK_CANCEL
SQL_TOK_CASE2
SQL_TOK_CBRT
SQL_TOK_CHANGE
SQL_TOK_CHR
SQL_TOK_CLEANUP
SQL_TOK_CLEAR
SQL_TOK_CLOCK_DATE
SQL_TOK_CLOCK_LOCALTIME
SQL_TOK_CLOCK_LOCALTIMESTAMP
SQL_TOK_CLOCK_TIME
SQL_TOK_CLOCK_TIMESTAMP
SQL_TOK_COLUMNAR
SQL_TOK_COLUMNS
SQL_TOK_COMPILE
SQL_TOK_CONCAT
SQL_TOK_CONCATENATE
SQL_TOK_CONTENTS
SQL_TOK_CONTROLFILE
SQL_TOK_CORRUPTION
SQL_TOK_COS
SQL_TOK_COT
SQL_TOK_CUMULATIVE
SQL_TOK_CURRVAL
SQL_TOK_CURSOR

SQL_TOK_DATAFILE
SQL_TOK_DATAFILES
SQL_TOK_DATEADD
SQL_TOK_DATEDIFF
SQL_TOK_DATE_ADD
SQL_TOK_DATE_PART
SQL_TOK_DAYOFYEAR
SQL_TOK_DECODE
SQL_TOK_DEGREES
SQL_TOK_DIFFERENTIAL
SQL_TOK_DISABLE
SQL_TOK_DISK
SQL_TOK_DIVISION
SQL_TOK_DUMP

SQL_TOK_ENABLE
SQL_TOK_EXCLUSIVE
SQL_TOK_EXPIRE
SQL_TOK_EXTSIZE

SQL_TOK_FACTORIAL
SQL_TOK_FAILED_LOGIN_ATTEMPTS
SQL_TOK_FLUSH
SQL_TOK_FLUSHING
SQL_TOK_FORCE
SQL_TOK_FROM_UNIXTIME

SQL_TOK_GREATEST

SQL_TOK_HASH
SQL_TOK_HISTORY

SQL_TOK_INCOMPLETE
SQL_TOK_INCREASE
SQL_TOK_INCREMENTAL
SQL_TOK_INDEX
SQL_TOK_INDEX_ASC
SQL_TOK_INDEX_COMBINE
SQL_TOK_INDEX_DESC
SQL_TOK_INITCAP
SQL_TOK_INITIAL
SQL_TOK_INITRANS
SQL_TOK_INSTR
SQL_TOK_INTEGRITY
SQL_TOK_IN_KEY_RANGE
SQL_TOK_IRRECOVERABLE

SQL_TOK_KEYSET
SQL_TOK_KILL

SQL_TOK_LAST_DAY
SQL_TOK_LEAST
SQL_TOK_LENGTHB
SQL_TOK_LOCK
SQL_TOK_LOCKED
SQL_TOK_LOG
SQL_TOK_LOGFILE
SQL_TOK_LOGGING
SQL_TOK_LOGON_USER
SQL_TOK_LOGS
SQL_TOK_LONG
SQL_TOK_LOOPBACK
SQL_TOK_LPAD
SQL_TOK_LTRIM

SQL_TOK_MAXSIZE
SQL_TOK_MAXTRANS
SQL_TOK_MEMORY
SQL_TOK_MICROSECOND
SQL_TOK_MILLISECOND
SQL_TOK_MINSIZE
SQL_TOK_MODE
SQL_TOK_MOUNT
SQL_TOK_MULTIPLICATION

SQL_TOK_NEGATIVE
SQL_TOK_NEXTVAL
SQL_TOK_NOARCHIVELOG
SQL_TOK_NOCACHE
SQL_TOK_NOCYCLE
SQL_TOK_NOLOGGING
SQL_TOK_NOMAXVALUE
SQL_TOK_NOMINVALUE
SQL_TOK_NOPARALLEL
SQL_TOK_NORESETLOGS
SQL_TOK_NORMAL
SQL_TOK_NOVALIDATE
SQL_TOK_NOWAIT
SQL_TOK_NO_INDEX
SQL_TOK_NO_PUSH_PRED
SQL_TOK_NO_PUSH_SUBQ
SQL_TOK_NO_USE_HASH
SQL_TOK_NO_USE_INL
SQL_TOK_NO_USE_MERGE
SQL_TOK_NO_USE_NL
SQL_TOK_NVL
SQL_TOK_NVL2

SQL_TOK_OFF
SQL_TOK_OFFLINE
SQL_TOK_ONLINE
SQL_TOK_OPERATIONAL
SQL_TOK_ORDERED

SQL_TOK_PAGE
SQL_TOK_PARALLEL
SQL_TOK_PASSWORD
SQL_TOK_PASSWORD_GRACE_TIME
SQL_TOK_PASSWORD_LIFE_TIME
SQL_TOK_PASSWORD_LOCK_TIME
SQL_TOK_PASSWORD_REUSE_MAX
SQL_TOK_PASSWORD_REUSE_TIME
SQL_TOK_PASSWORD_VERIFY_FUNCTION
SQL_TOK_PCTFREE
SQL_TOK_PCTUSED
SQL_TOK_PI
SQL_TOK_PLAN
SQL_TOK_POSITIVE
SQL_TOK_POST_TRANSACTION
SQL_TOK_PUSH_PRED
SQL_TOK_PUSH_SUBQ

SQL_TOK_QUARTER

SQL_TOK_RADIANS
SQL_TOK_RANDOM
SQL_TOK_READ
SQL_TOK_RECOVER
SQL_TOK_RECOVERY
SQL_TOK_REGISTER
SQL_TOK_REPEAT
SQL_TOK_REPLACE
SQL_TOK_RESET
SQL_TOK_RESETLOGS
SQL_TOK_RESULT
SQL_TOK_REUSE
SQL_TOK_ROUND
SQL_TOK_ROWID_OBJECT_ID
SQL_TOK_ROWID_PAGE_ID
SQL_TOK_ROWID_ROW_NUMBER
SQL_TOK_ROWID_TABLESPACE_ID
SQL_TOK_ROW_DATE
SQL_TOK_ROW_LOCALTIME
SQL_TOK_ROW_LOCALTIMESTAMP
SQL_TOK_ROW_TIME
SQL_TOK_ROW_TIMESTAMP
SQL_TOK_RPAD
SQL_TOK_RTRIM

SQL_TOK_SEGMENT
SQL_TOK_SEMI
SQL_TOK_SESSION_ID
SQL_TOK_SESSION_SERIAL
SQL_TOK_SHARE
SQL_TOK_SHIFT_LEFT
SQL_TOK_SHIFT_RIGHT
SQL_TOK_SIGN
SQL_TOK_SIN
SQL_TOK_SKIP
SQL_TOK_SLEEP
SQL_TOK_SPFILE
SQL_TOK_SPLIT_PART
SQL_TOK_SQRT
SQL_TOK_STATEMENT_DATE
SQL_TOK_STATEMENT_LOCALTIME
SQL_TOK_STATEMENT_LOCALTIMESTAMP
SQL_TOK_STATEMENT_TIME
SQL_TOK_STATEMENT_TIMESTAMP
SQL_TOK_STATEMENT_VIEW_SCN
SQL_TOK_STOP
SQL_TOK_STORAGE
SQL_TOK_SUBSTR
SQL_TOK_SUBTRACTION
SQL_TOK_SUPPLEMENTAL
SQL_TOK_SWITCH
SQL_TOK_TABLESPACE
SQL_TOK_TAN
SQL_TOK_TO_CHAR
SQL_TOK_TO_DATE
SQL_TOK_TO_NATIVE_DOUBLE
SQL_TOK_TO_NATIVE_REAL
SQL_TOK_TO_NUMBER
SQL_TOK_TO_TIME
SQL_TOK_TO_TIMESTAMP
SQL_TOK_TO_TIMESTAMP_TZ
SQL_TOK_TO_TIMESTAMP_WITH_TIME_ZONE
SQL_TOK_TO_TIME_TZ
SQL_TOK_TO_TIME_WITH_TIME_ZONE
SQL_TOK_TRANSACTIONAL
SQL_TOK_TRANSACTION_DATE
SQL_TOK_TRANSACTION_LOCALTIME
SQL_TOK_TRANSACTION_LOCALTIMESTAMP
SQL_TOK_TRANSACTION_TIME
SQL_TOK_TRANSACTION_TIMESTAMP
SQL_TOK_TRUNC

SQL_TOK_UNLIMITED
SQL_TOK_UNLOCK
SQL_TOK_UNSET
SQL_TOK_UNTIL
SQL_TOK_UNUSED
SQL_TOK_USER_ID
SQL_TOK_USE_DISTINCT_HASH
SQL_TOK_USE_GROUP_HASH
SQL_TOK_USE_HASH
SQL_TOK_USE_INL
SQL_TOK_USE_MERGE
SQL_TOK_USE_NL

SQL_TOK_VALIDATE
SQL_TOK_VALUE

SQL_TOK_WAIT
SQL_TOK_WAKEUP
SQL_TOK_WEEK
SQL_TOK_WEEKDAY
SQL_TOK_WIDTH_BUCKET

SQL_TOK_YES


/*
 * SQL special charater
 */

%token
SQL_TOK_PLUS_SIGN
SQL_TOK_MINUS_SIGN
SQL_TOK_ASTERISK
SQL_TOK_SOLIDUS
SQL_TOK_COMMA
SQL_TOK_PERIOD
SQL_TOK_QUOTE
SQL_TOK_DOUBLE_QUOTE
SQL_TOK_REVERSE_SOLIDUS

SQL_TOK_PERCENT
SQL_TOK_AMPERSAND
SQL_TOK_LEFT_PAREN
SQL_TOK_RIGHT_PAREN
SQL_TOK_LEFT_BRACKET
SQL_TOK_RIGHT_BRACKET
SQL_TOK_LEFT_BRACE
SQL_TOK_RIGHT_BRACE
SQL_TOK_LEFT_BRACKET_TRIGRAPH
SQL_TOK_RIGHT_BRACKET_TRIGRAPH

SQL_TOK_COLON
SQL_TOK_SEMICOLON
SQL_TOK_UNDERSCORE
SQL_TOK_QUESTION_MARK
SQL_TOK_CIRCUMFLEX
SQL_TOK_VERTICAL_BAR

SQL_TOK_LESS_THAN_OPERATOR
SQL_TOK_GREATER_THAN_OPERATOR
SQL_TOK_EQUAL_OPERATOR
SQL_TOK_NOT_EQUAL_OPERATOR
SQL_TOK_NOT_EQUAL_OPERATOR_EXPAND
SQL_TOK_LESS_THAN_EQUAL_OPERATOR
SQL_TOK_GREATER_THAN_EQUAL_OPERATOR

SQL_TOK_CONCAT_OPER

SQL_TOK_DOLLAR_SIGN

SQL_TOK_SHARP
SQL_TOK_AT_SIGN

SQL_TOK_OUTER_MARK

/*
 * SQL token
 */

%token
// SQL_TOK_COMMENT_INTRODUCER
SQL_TOK_COMMENT_INTRODUCER_HINT
SQL_TOK_COMMENT_TERMINATOR
// SQL_TOK_SIMPLE_COMMENT
// SQL_TOK_WHITE_SPACE

SQL_TOK_IDENTIFIER
SQL_TOK_HOST_VARIABLE
SQL_TOK_UNSIGNED_INTEGER
SQL_TOK_HEXIT_STRING
SQL_TOK_UNSIGNED_EXACT_NUMERIC_LITERAL
SQL_TOK_UNSIGNED_APPROXIMATE_NUMERIC_LITERAL

// SQL_TOK_SEPARATOR

SQL_TOK_QUOTE_STRING
SQL_TOK_DOUBLE_QUOTE_STRING
 //SQL_TOK_BRACKETED_COMMENT

SQL_TOK_NOT_APPLICABLE

SQL_TOK_WITH_TIME_ZONE

SQL_TOK_NOT_DEFERRABLE
SQL_TOK_NOT_ENFORCED

%%

/********************************************************************
 * STATEMENTS
 ********************************************************************/

start_text:
      command
    {
        /**
         * Server, gsql 등에서 사용하는 일반적인 command
         */
        STL_PARSER_START_TEXT____COMMAND();
    }
    | command SQL_TOK_SEMICOLON
    {
        /**
         * Embedded SQL 등과 같이 끝을 알수 없는 command
         * terminator를 만나게 되면 종료 처리를 해야 함
         */
        STL_PARSER_START_TEXT____COMMAND_TERMINATOR();
    }
    ;

command:
    /* empty */
    {
        /**
         * ; 과 같이 그냥 엔터친 경우의 처리
         */
        STL_PARSER_COMMAND____EMPTY();
    }
    |
    sql_command
    {
        /**
         * SQL COMMAND
         * - 어디서나 사용할 수 있는 SQL statement
         */
    }
    |
    dynamic_sql_command
    {
        /**
         * DYANAMIC SQL COMMAND
         * - Embedded SQL, PSM 등에서만 사용가능한 Dynamic SQL
         */
    }
    |
    partial_phrase_syntax
    {
        /**
         * PARTIAL PHARASE SYNTAX
         * - Syntax Replacement 를 위해 QP 내부적으로만 사용하는 기능임.
         */
    }
    ;


/*****************************************
 * SQL COMMAND
 * - 완전한 SQL 문장임
 *****************************************/

sql_command:
      alter_database_statement   { STL_PARSER_COMMAND____ALTER_DATABASE(); }
    | user_definition            { STL_PARSER_COMMAND____USER_DEFINITION(); }
    | drop_user_statement        { STL_PARSER_COMMAND____DROP_USER(); }
    | alter_user_statement       { STL_PARSER_COMMAND____ALTER_USER(); }
    | profile_definition         { STL_PARSER_COMMAND____PROFILE_DEFINITION(); }
    | drop_profile_statement     { STL_PARSER_COMMAND____DROP_PROFILE(); }
    | alter_profile_statement    { STL_PARSER_COMMAND____ALTER_PROFILE(); }
    | grant_privilege_statement  { STL_PARSER_COMMAND____GRANT_PRIVILEGE(); }
    | revoke_privilege_statement { STL_PARSER_COMMAND____REVOKE_PRIVILEGE(); }
    | tablespace_definition      { STL_PARSER_COMMAND____TABLESPACE_DEFINITION(); }
    | alter_tablespace_statement { STL_PARSER_COMMAND____ALTER_TABLESPACE(); }
    | drop_tablespace_statement  { STL_PARSER_COMMAND____DROP_TABLESPACE(); }
    | schema_definition          { STL_PARSER_COMMAND____SCHEMA_DEFINITION(); }
    | drop_schema_statement      { STL_PARSER_COMMAND____DROP_SCHEMA(); }
    | table_definition           { STL_PARSER_COMMAND____TABLE_DEFINITION(); }
    | drop_table_statement       { STL_PARSER_COMMAND____DROP_TABLE(); }
    | alter_table_statement      { STL_PARSER_COMMAND____ALTER_TABLE(); }
    | view_definition            { STL_PARSER_COMMAND____VIEW_DEFINITION(); }
    | drop_view_statement        { STL_PARSER_COMMAND____DROP_VIEW(); }
    | alter_view_statement       { STL_PARSER_COMMAND____ALTER_VIEW(); }
    | sequence_definition        { STL_PARSER_COMMAND____SEQUENCE_DEFINITION(); }
    | drop_sequence_statement    { STL_PARSER_COMMAND____DROP_SEQUENCE(); }
    | alter_sequence_statement   { STL_PARSER_COMMAND____ALTER_SEQUENCE(); }
    | synonym_definition         { STL_PARSER_COMMAND____SYNONYM_DEFINITION(); }
    | drop_synonym_statement     { STL_PARSER_COMMAND____DROP_SYNONYM(); }
    | index_definition           { STL_PARSER_COMMAND____INDEX_DEFINITION(); }
    | drop_index_statement       { STL_PARSER_COMMAND____DROP_INDEX(); }
    | alter_index_statement      { STL_PARSER_COMMAND____ALTER_INDEX(); }
    | truncate_table_statement   { STL_PARSER_COMMAND____TRUNCATE_TABLE(); }
    | insert_statement           { STL_PARSER_COMMAND____INSERT(); }
    | update_statement           { STL_PARSER_COMMAND____UPDATE(); }
    | update_statement_positioned   { STL_PARSER_COMMAND____UPDATE_POSITIONED(); }
    | delete_statement           { STL_PARSER_COMMAND____DELETE(); }
    | delete_statement_positioned   { STL_PARSER_COMMAND____DELETE_POSITIONED(); }
    | select_statement           { STL_PARSER_COMMAND____SELECT(); }
    | select_into_statement      { STL_PARSER_COMMAND____SELECT_INTO(); }
    | savepoint_statement        { STL_PARSER_COMMAND____SAVEPOINT(); }
    | release_savepoint_statement    { STL_PARSER_COMMAND____RELEASE_SAVEPOINT(); }
    | commit_statement           { STL_PARSER_COMMAND____COMMIT(); }
    | rollback_statement         { STL_PARSER_COMMAND____ROLLBACK(); }
    | alter_system_statement     { STL_PARSER_COMMAND____ALTER_SYSTEM(); }
    | alter_session_statement    { STL_PARSER_COMMAND____ALTER_SESSION(); }
    | lock_table_statement       { STL_PARSER_COMMAND____LOCK_TABLE(); }
    | comment_statement          { STL_PARSER_COMMAND____COMMENT(); }
    | set_constraint_mode_statement  { STL_PARSER_COMMAND____SET_CONSTRAINT_MODE(); }
    | set_transaction_statement  { STL_PARSER_COMMAND____SET_TRANSACTION(); }
    | set_session_characteristics_statement  { STL_PARSER_COMMAND____SET_SESSION_CHARACTERISTICS(); }
    | set_session_auth_statement { STL_PARSER_COMMAND____SET_SESSION_AUTH(); }
    | set_time_zone_statement    { STL_PARSER_COMMAND____SET_TIME_ZONE(); }
    | declare_statement          { STL_PARSER_COMMAND____DECLARE_STATEMENT(); }
    | declare_cursor             { STL_PARSER_COMMAND____DECLARE_CURSOR(); }
    | open_statement             { STL_PARSER_COMMAND____OPEN_CURSOR(); }
    | close_statement            { STL_PARSER_COMMAND____CLOSE_CURSOR(); }
    | fetch_statement            { STL_PARSER_COMMAND____FETCH_CURSOR(); }
    | connection_statement       { STL_PARSER_COMMAND____CONNECTION(); }
    ;

/*
 * CREATE USER
 */

user_definition:
    SQL_TOK_CREATE SQL_TOK_USER identifier SQL_TOK_IDENTIFIED SQL_TOK_BY sensitive_password
    user_profile
    password_expire
    account_lock
    default_tablespace
    temporary_tablespace
    {
        STL_PARSE_USER_DEFINTION____WITH_SCHEMA_EMPTY();
    }
    |
    SQL_TOK_CREATE SQL_TOK_USER identifier SQL_TOK_IDENTIFIED SQL_TOK_BY sensitive_password
    user_profile
    password_expire
    account_lock
    default_tablespace
    temporary_tablespace
    SQL_TOK_WITH SQL_TOK_SCHEMA 
    {
        STL_PARSE_USER_DEFINTION____WITH_SCHEMA_EMPTY();
    }
    |
    SQL_TOK_CREATE SQL_TOK_USER identifier SQL_TOK_IDENTIFIED SQL_TOK_BY sensitive_password
    user_profile
    password_expire
    account_lock
    default_tablespace
    temporary_tablespace
    SQL_TOK_WITH SQL_TOK_SCHEMA identifier
    {
        STL_PARSE_USER_DEFINTION____WITH_SCHEMA_NAME();
    }
    |
    SQL_TOK_CREATE SQL_TOK_USER identifier SQL_TOK_IDENTIFIED SQL_TOK_BY sensitive_password
    user_profile
    password_expire
    account_lock
    default_tablespace
    temporary_tablespace
    SQL_TOK_WITHOUT SQL_TOK_SCHEMA
    {
        STL_PARSE_USER_DEFINTION____WITHOUT_SCHEMA_NAME();
    }
    ;

sensitive_password:
    regualar_identifier
    {
        STL_PARSE_SENSITIVE_PASSWORD____REGULAR();
    }
    |
    delimited_identifier
    {
        STL_PARSE_SENSITIVE_PASSWORD____DELIMITED();
    }
    ;

user_profile:
    /*
     * empty
     */
    {
        STL_PARSE_USER_PROFILE____NULL();
    }
    |
    SQL_TOK_PROFILE SQL_TOK_NULL
    {
        STL_PARSE_USER_PROFILE____NULL();
    }
    |
    SQL_TOK_PROFILE identifier
    {
        STL_PARSE_USER_PROFILE____NAME();
    }
    |
    SQL_TOK_PROFILE SQL_TOK_DEFAULT
    {
        STL_PARSE_USER_PROFILE____DEFAULT();
    }
    ;

password_expire:
    /*
     * empty
     */
    {
        STL_PARSE_PASSWORD_EXPIRE____EMPTY();
    }
    |
    SQL_TOK_PASSWORD SQL_TOK_EXPIRE
    {
        STL_PARSE_PASSWORD_EXPIRE____EXIST();
    }
    ;

account_lock:
    /*
     * empty
     */
    {
        STL_PARSE_ACCOUNT____UNLOCK();
    }
    |
    SQL_TOK_ACCOUNT SQL_TOK_UNLOCK
    {
        STL_PARSE_ACCOUNT____UNLOCK();
    }
    |
    SQL_TOK_ACCOUNT SQL_TOK_LOCK
    {
        STL_PARSE_ACCOUNT____LOCK();
    }
    ;

default_tablespace:
    /*
     * empty
     */
    {
        STL_PARSE_DEFAULT_TABLESPACE____EMPTY();
    }
    |
    SQL_TOK_DEFAULT SQL_TOK_TABLESPACE identifier
    {
        STL_PARSE_DEFAULT_TABLESPACE____NAME();
    }
    ;

temporary_tablespace:
    /*
     * empty
     */
    {
        STL_PARSE_TEMPORARY_TABLESPACE____EMPTY();
    }
    |
    SQL_TOK_TEMPORARY SQL_TOK_TABLESPACE identifier
    {
        STL_PARSE_TEMPORARY_TABLESPACE____NAME();
    }
    ;

/*
 * DROP USER
 */

drop_user_statement:
    SQL_TOK_DROP SQL_TOK_USER drop_if_exists_option
    identifier // user_name
    drop_behavior
    {
        STL_PARSER_DROP_USER_STATEMENT();
    }
    ;


/*
 * ALTER USER
 */

alter_user_statement:
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_IDENTIFIED SQL_TOK_BY sensitive_password
    {
        STL_PARSER_ALTER_USER_STATEMENT____PASSWORD_ONLY();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_IDENTIFIED SQL_TOK_BY sensitive_password
    SQL_TOK_REPLACE sensitive_password
    {
        STL_PARSER_ALTER_USER_STATEMENT____PASSWORD_REPLACE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    alter_profile
    {
        STL_PARSER_ALTER_USER_STATEMENT____ALTER_PROFILE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_PASSWORD SQL_TOK_EXPIRE
    {
        STL_PARSER_ALTER_USER_STATEMENT____PASSWORD_EXPIRE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_ACCOUNT SQL_TOK_LOCK
    {
        STL_PARSER_ALTER_USER_STATEMENT____ACCOUNT_LOCK();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_ACCOUNT SQL_TOK_UNLOCK
    {
        STL_PARSER_ALTER_USER_STATEMENT____ACCOUNT_UNLOCK();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_DEFAULT SQL_TOK_TABLESPACE identifier
    {
        STL_PARSER_ALTER_USER_STATEMENT____DEFAULT_SPACE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_TEMPORARY SQL_TOK_TABLESPACE identifier
    {
        STL_PARSER_ALTER_USER_STATEMENT____TEMPORARY_SPACE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER identifier
    SQL_TOK_SCHEMA SQL_TOK_PATH SQL_TOK_LEFT_PAREN schema_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ALTER_USER_STATEMENT____SCHEMA_PATH();
    }
    ;

alter_profile:
    SQL_TOK_PROFILE SQL_TOK_NULL
    {
        STL_PARSE_USER_PROFILE____NULL();
    }
    |
    SQL_TOK_PROFILE identifier
    {
        STL_PARSE_USER_PROFILE____NAME();
    }
    |
    SQL_TOK_PROFILE SQL_TOK_DEFAULT
    {
        STL_PARSE_USER_PROFILE____DEFAULT();
    }
    ;

schema_name_list:
    schema_name
    {
        STL_PARSER_SCHEMA_NAME_LIST____SCHEMA_NAME();
    }
    |
    schema_name_list SQL_TOK_COMMA schema_name
    {
        STL_PARSER_SCHEMA_NAME_LIST____SCHEMA_NAME_LIST();
    }
    ;

schema_name:
    identifier
    {
        STL_PARSER_SCHEMA_NAME____IDENTIFIER();
    }
    |
    SQL_TOK_CURRENT SQL_TOK_PATH
    {
        STL_PARSER_SCHEMA_NAME____CURRENT_PATH();
    }
    ;

/*
 * CREATE PROFILE
 */

profile_definition:
    SQL_TOK_CREATE SQL_TOK_PROFILE identifier SQL_TOK_LIMIT password_parameters
    {
        STL_PARSER_PROFILE_DEFINITION____();
    }
    ;

password_parameters:
    password_parameter
    {
        STL_PARSER_PASSWORD_PARAMETERS____PARAMETER();
    }
    | password_parameters password_parameter
    {
        STL_PARSER_PASSWORD_PARAMETERS____PARAMETER_LIST();
    }
    ;

password_parameter:
    failed_login_attempts
    {
        STL_PARSER_PASSWORD_PARAMETER____FAILED_LOGIN_ATTEMPTS();
    }
    | password_life_time
    {
        STL_PARSER_PASSWORD_PARAMETER____PASSWORD_LIFE_TIME();
    }
    | password_lock_time
    {
        STL_PARSER_PASSWORD_PARAMETER____PASSWORD_LOCK_TIME();
    }
    | password_grace_time
    {
        STL_PARSER_PASSWORD_PARAMETER____PASSWORD_GRACE_TIME();
    }
    | password_reuse_max
    {
        STL_PARSER_PASSWORD_PARAMETER____PASSWORD_REUSE_MAX();
    }
    | password_reuse_time
    {
        STL_PARSER_PASSWORD_PARAMETER____PASSWORD_REUSE_TIME();
    }
    | password_verify_function
    {
        STL_PARSER_PASSWORD_PARAMETER____PASSWORD_VERIFY_FUNCTION();
    }
    ;

failed_login_attempts:
    SQL_TOK_FAILED_LOGIN_ATTEMPTS unsigned_integer
    {
        STL_PARSER_FAILED_LOGIN_ATTEMPTS____UNSIGNED_INTEGER();
    }
    | SQL_TOK_FAILED_LOGIN_ATTEMPTS SQL_TOK_UNLIMITED
    {
        STL_PARSER_FAILED_LOGIN_ATTEMPTS____UNLIMITED();
    }
    | SQL_TOK_FAILED_LOGIN_ATTEMPTS SQL_TOK_DEFAULT
    {
        STL_PARSER_FAILED_LOGIN_ATTEMPTS____DEFAULT();
    }
    ;

password_life_time:
    SQL_TOK_PASSWORD_LIFE_TIME password_parameter_number_interval
    {
        STL_PARSER_PASSWORD_LIFE_TIME____INTERVAL_VALUE();
    }
    | SQL_TOK_PASSWORD_LIFE_TIME SQL_TOK_UNLIMITED
    {
        STL_PARSER_PASSWORD_LIFE_TIME____UNLIMITED();
    }
    | SQL_TOK_PASSWORD_LIFE_TIME SQL_TOK_DEFAULT
    {
        STL_PARSER_PASSWORD_LIFE_TIME____DEFAULT();
    }
    ;

password_lock_time:
    SQL_TOK_PASSWORD_LOCK_TIME password_parameter_number_interval
    {
        STL_PARSER_PASSWORD_LOCK_TIME____INTERVAL_VALUE();
    }
    | SQL_TOK_PASSWORD_LOCK_TIME SQL_TOK_UNLIMITED
    {
        STL_PARSER_PASSWORD_LOCK_TIME____UNLIMITED();
    }
    | SQL_TOK_PASSWORD_LOCK_TIME SQL_TOK_DEFAULT
    {
        STL_PARSER_PASSWORD_LOCK_TIME____DEFAULT();
    }
    ;

password_grace_time:
    SQL_TOK_PASSWORD_GRACE_TIME password_parameter_number_interval
    {
        STL_PARSER_PASSWORD_GRACE_TIME____INTERVAL_VALUE();
    }
    | SQL_TOK_PASSWORD_GRACE_TIME SQL_TOK_UNLIMITED
    {
        STL_PARSER_PASSWORD_GRACE_TIME____UNLIMITED();
    }
    | SQL_TOK_PASSWORD_GRACE_TIME SQL_TOK_DEFAULT
    {
        STL_PARSER_PASSWORD_GRACE_TIME____DEFAULT();
    }
    ;


password_reuse_max:
    SQL_TOK_PASSWORD_REUSE_MAX unsigned_integer
    {
        STL_PARSER_PASSWORD_REUSE_MAX____UNSIGNED_INTEGER();
    }
    | SQL_TOK_PASSWORD_REUSE_MAX SQL_TOK_UNLIMITED
    {
        STL_PARSER_PASSWORD_REUSE_MAX____UNLIMITED();
    }
    | SQL_TOK_PASSWORD_REUSE_MAX SQL_TOK_DEFAULT
    {
        STL_PARSER_PASSWORD_REUSE_MAX____DEFAULT();
    }
    ;


password_reuse_time:
    SQL_TOK_PASSWORD_REUSE_TIME password_parameter_number_interval
    {
        STL_PARSER_PASSWORD_REUSE_TIME____INTERVAL_VALUE();
    }
    | SQL_TOK_PASSWORD_REUSE_TIME SQL_TOK_UNLIMITED
    {
        STL_PARSER_PASSWORD_REUSE_TIME____UNLIMITED();
    }
    | SQL_TOK_PASSWORD_REUSE_TIME SQL_TOK_DEFAULT
    {
        STL_PARSER_PASSWORD_REUSE_TIME____DEFAULT();
    }
    ;

password_verify_function:
    SQL_TOK_PASSWORD_VERIFY_FUNCTION identifier
    {
        STL_PARSER_PASSWORD_VERIFY_FUNCTION____VERIFY_POLICY();
    }
    | SQL_TOK_PASSWORD_VERIFY_FUNCTION SQL_TOK_NULL
    {
        STL_PARSER_PASSWORD_VERIFY_FUNCTION____NULL();
    } 
    | SQL_TOK_PASSWORD_VERIFY_FUNCTION SQL_TOK_DEFAULT
    {
        STL_PARSER_PASSWORD_VERIFY_FUNCTION____DEFAULT();
    }
    ;

password_parameter_number_interval:
    unsigned_integer
    {
        STL_PARSER_PASSWORD_PARAMTER_NUMBER_INTERVAL____NUMBER( );
    }
    | unsigned_integer SQL_TOK_SOLIDUS unsigned_integer
    {
        STL_PARSER_PASSWORD_PARAMTER_NUMBER_INTERVAL____DIVIDE( );
    }
    ;

/*
 * DROP PROFILE
 */

drop_profile_statement:
    SQL_TOK_DROP SQL_TOK_PROFILE drop_if_exists_option
    identifier  // profile name
    {
        STL_PARSER_DROP_PROFILE_STATEMENT____();
    }
    | SQL_TOK_DROP SQL_TOK_PROFILE drop_if_exists_option
    identifier  // profile name
    SQL_TOK_CASCADE
    {
        STL_PARSER_DROP_PROFILE_STATEMENT____CASCADE();
    }
    ;

/*
 * ALTER PROFILE
 */

alter_profile_statement:
    SQL_TOK_ALTER SQL_TOK_PROFILE identifier SQL_TOK_LIMIT password_parameters
    {
        STL_PARSER_ALTER_PROFILE_STATEMENT____USER_PROFILE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_PROFILE SQL_TOK_DEFAULT SQL_TOK_LIMIT password_parameters
    {
        STL_PARSER_ALTER_PROFILE_STATEMENT____DEFAULT_PROFILE();
    }
    ;

/*
 * GRANT PRIVILEGE
 */

grant_privilege_statement:
    SQL_TOK_GRANT privilege
    SQL_TOK_TO grantee_list
    {
        STL_PARSER_GRANT_PRIVILEGE____WITHOUT_GRANT();
    }
    |
    SQL_TOK_GRANT privilege
    SQL_TOK_TO grantee_list
    SQL_TOK_WITH SQL_TOK_GRANT SQL_TOK_OPTION
    {
        STL_PARSER_GRANT_PRIVILEGE____WITH_GRANT();
    }
    |
    SQL_TOK_GRANT schema_privilege_without_schema
    SQL_TOK_TO grantee
    {
        STL_PARSER_GRANT_PRIVILEGE____WITHOUT_SCHEMA_PRIVILEGE_WITHOUT_GRANT();
    }
    |
    SQL_TOK_GRANT schema_privilege_without_schema
    SQL_TOK_TO grantee
    SQL_TOK_WITH SQL_TOK_GRANT SQL_TOK_OPTION
    {
        STL_PARSER_GRANT_PRIVILEGE____WITHOUT_SCHEMA_PRIVILEGE_WITH_GRANT();
    }
    ;

/*
 * REVOKE PRIVILEGE
 */

revoke_privilege_statement:
    SQL_TOK_REVOKE privilege
    SQL_TOK_FROM grantee_list
    revoke_behavior
    {
        STL_PARSER_REVOKE_PRIVILEGE____WITHOUT_GRANT();
    }
    |
    SQL_TOK_REVOKE SQL_TOK_GRANT SQL_TOK_OPTION SQL_TOK_FOR privilege
    SQL_TOK_FROM grantee_list
    revoke_behavior
    {
        STL_PARSER_REVOKE_PRIVILEGE____WITH_GRANT();
    }
    |
    SQL_TOK_REVOKE schema_privilege_without_schema
    SQL_TOK_FROM grantee
    revoke_behavior
    {
        STL_PARSER_REVOKE_PRIVILEGE____WITHOUT_SCHEMA_PRIVILEGE_WITHOUT_GRANT();
    }
    |
    SQL_TOK_REVOKE SQL_TOK_GRANT SQL_TOK_OPTION SQL_TOK_FOR schema_privilege_without_schema
    SQL_TOK_FROM grantee
    revoke_behavior
    {
        STL_PARSER_REVOKE_PRIVILEGE____WITHOUT_SCHEMA_PRIVILEGE_WITH_GRANT();
    }
    ;

revoke_behavior:
    /* empty */
    {
        STL_PARSER_REVOKE_BEHAVIOR____EMPTY();
    }
    | SQL_TOK_RESTRICT 
    {
        STL_PARSER_REVOKE_BEHAVIOR____RESTRICT();
    }
    | SQL_TOK_CASCADE
    {
        STL_PARSER_REVOKE_BEHAVIOR____CASCADE();
    }
    | SQL_TOK_CASCADE SQL_TOK_CONSTRAINTS
    {
        STL_PARSER_REVOKE_BEHAVIOR____CASCADE_CONSTRAINTS();
    }
    ;


grantee_list:  // qlpList
    grantee
    {
        STL_PARSER_GRANTEE_LIST____GRANTEE();
    }
    | grantee_list SQL_TOK_COMMA grantee
    {
        STL_PARSER_GRANTEE_LIST____GRANTEE_LIST();
    }
    ;

grantee:  
    identifier
    {
        STL_PARSER_GRANTEE_NAME();
    }
    ;

privilege:
    database_privilege
    {
        STL_PARSER_PRIVILEGE____DATABASE();
    }
    |
    tablespace_privilege
    {
        STL_PARSER_PRIVILEGE____TABLESPACE();
    }
    |
    schema_privilege_with_schema
    {
        STL_PARSER_PRIVILEGE____SCHEMA();
    }
    |
    table_privilege
    {
        STL_PARSER_PRIVILEGE____TABLE();
    }
    |
    sequence_privilege
    {
        STL_PARSER_PRIVILEGE____SEQUENCE();
    }
    ;

database_privilege:
    database_action_list
    {
        STL_PARSER_DATABASE_PRIVILEGE____ACTION_LIST();
    }
    |
    database_action_list
    SQL_TOK_ON SQL_TOK_DATABASE
    {
        STL_PARSER_DATABASE_PRIVILEGE____ACTION_LIST();
    }
    |
    SQL_TOK_ALL
    {
        STL_PARSER_DATABASE_PRIVILEGE____ALL_PRIVILEGES();
    }
    |
    SQL_TOK_ALL SQL_TOK_PRIVILEGES
    {
        STL_PARSER_DATABASE_PRIVILEGE____ALL_PRIVILEGES();
    }
    |
    SQL_TOK_ALL
    SQL_TOK_ON SQL_TOK_DATABASE
    {
        STL_PARSER_DATABASE_PRIVILEGE____ALL_PRIVILEGES();
    }
    |
    SQL_TOK_ALL SQL_TOK_PRIVILEGES
    SQL_TOK_ON SQL_TOK_DATABASE
    {
        STL_PARSER_DATABASE_PRIVILEGE____ALL_PRIVILEGES();
    }
    ;
    
database_action_list:  // qlpList
    database_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION();
    }
    | database_action_list SQL_TOK_COMMA database_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION_LIST();
    }
    ;

database_action:  
    SQL_TOK_ADMINISTRATION
    {
        STL_PARSER_DATABASE_ACTION____ADMINISTRATION();
    }
    |
    SQL_TOK_ALTER SQL_TOK_DATABASE
    {
        STL_PARSER_DATABASE_ACTION____ALTER_DATABASE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_SYSTEM
    {
        STL_PARSER_DATABASE_ACTION____ALTER_SYSTEM();
    }
    |
    SQL_TOK_ACCESS SQL_TOK_CONTROL
    {
        STL_PARSER_DATABASE_ACTION____ACCESS_CONTROL();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SESSION
    {
        STL_PARSER_DATABASE_ACTION____CREATE_SESSION();
    }
    |
    SQL_TOK_CREATE SQL_TOK_USER
    {
        STL_PARSER_DATABASE_ACTION____CREATE_USER();
    }
    |
    SQL_TOK_ALTER SQL_TOK_USER
    {
        STL_PARSER_DATABASE_ACTION____ALTER_USER();
    }
    |
    SQL_TOK_DROP SQL_TOK_USER
    {
        STL_PARSER_DATABASE_ACTION____DROP_USER();
    }
    |
    SQL_TOK_CREATE SQL_TOK_PROFILE
    {
        STL_PARSER_DATABASE_ACTION____CREATE_PROFILE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_PROFILE
    {
        STL_PARSER_DATABASE_ACTION____ALTER_PROFILE();
    }
    |
    SQL_TOK_DROP SQL_TOK_PROFILE
    {
        STL_PARSER_DATABASE_ACTION____DROP_PROFILE();
    }
    |
    SQL_TOK_CREATE SQL_TOK_ROLE
    {
        STL_PARSER_DATABASE_ACTION____CREATE_ROLE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_ROLE
    {
        STL_PARSER_DATABASE_ACTION____ALTER_ROLE();
    }
    |
    SQL_TOK_DROP SQL_TOK_ROLE
    {
        STL_PARSER_DATABASE_ACTION____DROP_ROLE();
    }
    |
    SQL_TOK_CREATE SQL_TOK_TABLESPACE
    {
        STL_PARSER_DATABASE_ACTION____CREATE_TABLESPACE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLESPACE
    {
        STL_PARSER_DATABASE_ACTION____ALTER_TABLESPACE();
    }
    |
    SQL_TOK_DROP SQL_TOK_TABLESPACE
    {
        STL_PARSER_DATABASE_ACTION____DROP_TABLESPACE();
    }
    |
    SQL_TOK_USAGE SQL_TOK_TABLESPACE
    {
        STL_PARSER_DATABASE_ACTION____USAGE_TABLESPACE();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SCHEMA
    {
        STL_PARSER_DATABASE_ACTION____CREATE_SCHEMA();
    }
    |
    SQL_TOK_ALTER SQL_TOK_SCHEMA
    {
        STL_PARSER_DATABASE_ACTION____ALTER_SCHEMA();
    }
    |
    SQL_TOK_DROP SQL_TOK_SCHEMA
    {
        STL_PARSER_DATABASE_ACTION____DROP_SCHEMA();
    }
    |
    SQL_TOK_CREATE SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____CREATE_ANY_TABLE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____ALTER_ANY_TABLE();
    }
    |
    SQL_TOK_DROP SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____DROP_ANY_TABLE();
    }
    |
    SQL_TOK_SELECT SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____SELECT_ANY_TABLE();
    }
    |
    SQL_TOK_INSERT SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____INSERT_ANY_TABLE();
    }
    |
    SQL_TOK_DELETE SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____DELETE_ANY_TABLE();
    }
    |
    SQL_TOK_UPDATE SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____UPDATE_ANY_TABLE();
    }
    |
    SQL_TOK_LOCK SQL_TOK_ANY SQL_TOK_TABLE
    {
        STL_PARSER_DATABASE_ACTION____LOCK_ANY_TABLE();
    }
    |
    SQL_TOK_CREATE SQL_TOK_ANY SQL_TOK_VIEW
    {
        STL_PARSER_DATABASE_ACTION____CREATE_ANY_VIEW();
    }
    |
    SQL_TOK_DROP SQL_TOK_ANY SQL_TOK_VIEW
    {
        STL_PARSER_DATABASE_ACTION____DROP_ANY_VIEW();
    }
    |
    SQL_TOK_CREATE SQL_TOK_ANY SQL_TOK_SEQUENCE
    {
        STL_PARSER_DATABASE_ACTION____CREATE_ANY_SEQUENCE();
    }
    |
    SQL_TOK_DROP SQL_TOK_ANY SQL_TOK_SEQUENCE
    {
        STL_PARSER_DATABASE_ACTION____DROP_ANY_SEQUENCE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_ANY SQL_TOK_SEQUENCE
    {
        STL_PARSER_DATABASE_ACTION____ALTER_ANY_SEQUENCE();
    }
    |
    SQL_TOK_USAGE SQL_TOK_ANY SQL_TOK_SEQUENCE
    {
        STL_PARSER_DATABASE_ACTION____USAGE_ANY_SEQUENCE();
    }
    |
    SQL_TOK_CREATE SQL_TOK_ANY SQL_TOK_INDEX
    {
        STL_PARSER_DATABASE_ACTION____CREATE_ANY_INDEX();
    }
    |
    SQL_TOK_ALTER SQL_TOK_ANY SQL_TOK_INDEX
    {
        STL_PARSER_DATABASE_ACTION____ALTER_ANY_INDEX();
    }
    |
    SQL_TOK_DROP SQL_TOK_ANY SQL_TOK_INDEX
    {
        STL_PARSER_DATABASE_ACTION____DROP_ANY_INDEX();
    }
    |
    SQL_TOK_CREATE SQL_TOK_ANY SQL_TOK_SYNONYM
    {
        STL_PARSER_DATABASE_ACTION____CREATE_ANY_SYNONYM();
    }
    |
    SQL_TOK_DROP SQL_TOK_ANY SQL_TOK_SYNONYM
    {
        STL_PARSER_DATABASE_ACTION____DROP_ANY_SYNONYM();
    }
    | 
    SQL_TOK_CREATE SQL_TOK_PUBLIC SQL_TOK_SYNONYM
    {
        STL_PARSER_DATABASE_ACTION____CREATE_PUBLIC_SYNONYM();
    }
    |
    SQL_TOK_DROP SQL_TOK_PUBLIC SQL_TOK_SYNONYM
    {
        STL_PARSER_DATABASE_ACTION____DROP_PUBLIC_SYNONYM();
    }
    ;

tablespace_privilege:
    tablespace_action_list
    SQL_TOK_ON SQL_TOK_TABLESPACE identifier
    {
        STL_PARSER_TABLESPACE_PRIVILEGE____ACTION_LIST();
    }
    |
    SQL_TOK_ALL
    SQL_TOK_ON SQL_TOK_TABLESPACE identifier
    {
        STL_PARSER_TABLESPACE_PRIVILEGE____ALL();
    }
    |
    SQL_TOK_ALL SQL_TOK_PRIVILEGES
    SQL_TOK_ON SQL_TOK_TABLESPACE identifier
    {
        STL_PARSER_TABLESPACE_PRIVILEGE____ALL_PRIVILEGES();
    }
    ;
    
tablespace_action_list:  // qlpList
    tablespace_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION();
    }
    | tablespace_action_list SQL_TOK_COMMA tablespace_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION_LIST();
    }
    ;

tablespace_action:  
    SQL_TOK_CREATE SQL_TOK_OBJECT
    {
        STL_PARSER_TABLESPACE_ACTION____CREATE_OBJECT();
    }
    ;

schema_privilege_with_schema:
    schema_action_list
    SQL_TOK_ON SQL_TOK_SCHEMA identifier
    {
        STL_PARSER_SCHEMA_PRIVILEGE____WITH_SCHEMA();
    }
    |
    SQL_TOK_ALL
    SQL_TOK_ON SQL_TOK_SCHEMA identifier
    {
        STL_PARSER_SCHEMA_PRIVILEGE____ALL();
    }
    |
    SQL_TOK_ALL SQL_TOK_PRIVILEGES
    SQL_TOK_ON SQL_TOK_SCHEMA identifier
    {
        STL_PARSER_SCHEMA_PRIVILEGE____ALL_PRIVILEGES();
    }
    ;

schema_privilege_without_schema:
    schema_action_list
    {
        STL_PARSER_SCHEMA_PRIVILEGE____WITHOUT_SCHEMA();
    }
    ;

schema_action_list:  // qlpList
    schema_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION();
    }
    | schema_action_list SQL_TOK_COMMA schema_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION_LIST();
    }
    ;

schema_action:  
    SQL_TOK_CONTROL SQL_TOK_SCHEMA
    {
        STL_PARSER_SCHEMA_ACTION____CONTROL_SCHEMA();
    }
    |
    SQL_TOK_CREATE SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____CREATE_TABLE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____ALTER_TABLE();
    }
    |
    SQL_TOK_DROP SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____DROP_TABLE();
    }
    |
    SQL_TOK_SELECT SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____SELECT_TABLE();
    }
    |
    SQL_TOK_INSERT SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____INSERT_TABLE();
    }
    |
    SQL_TOK_DELETE SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____DELETE_TABLE();
    }
    |
    SQL_TOK_UPDATE SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____UPDATE_TABLE();
    }
    |
    SQL_TOK_LOCK SQL_TOK_TABLE
    {
        STL_PARSER_SCHEMA_ACTION____LOCK_TABLE();
    }
    |
    SQL_TOK_CREATE SQL_TOK_VIEW
    {
        STL_PARSER_SCHEMA_ACTION____CREATE_VIEW();
    }
    |
    SQL_TOK_DROP SQL_TOK_VIEW
    {
        STL_PARSER_SCHEMA_ACTION____DROP_VIEW();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SEQUENCE
    {
        STL_PARSER_SCHEMA_ACTION____CREATE_SEQUENCE();
    }
    |
    SQL_TOK_ALTER SQL_TOK_SEQUENCE
    {
        STL_PARSER_SCHEMA_ACTION____ALTER_SEQUENCE();
    }
    |
    SQL_TOK_DROP SQL_TOK_SEQUENCE
    {
        STL_PARSER_SCHEMA_ACTION____DROP_SEQUENCE();
    }
    |
    SQL_TOK_USAGE SQL_TOK_SEQUENCE
    {
        STL_PARSER_SCHEMA_ACTION____USAGE_SEQUENCE();
    }
    |
    SQL_TOK_CREATE SQL_TOK_INDEX
    {
        STL_PARSER_SCHEMA_ACTION____CREATE_INDEX();
    }
    |
    SQL_TOK_ALTER SQL_TOK_INDEX
    {
        STL_PARSER_SCHEMA_ACTION____ALTER_INDEX();
    }
    |
    SQL_TOK_DROP SQL_TOK_INDEX
    {
        STL_PARSER_SCHEMA_ACTION____DROP_INDEX();
    }
    |
    SQL_TOK_ADD SQL_TOK_CONSTRAINT
    {
        STL_PARSER_SCHEMA_ACTION____ADD_CONSTRAINT();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SYNONYM
    {
        STL_PARSER_SCHEMA_ACTION____CREATE_SYNONYM();
    }
    |
    SQL_TOK_DROP SQL_TOK_SYNONYM
    {
        STL_PARSER_SCHEMA_ACTION____DROP_SYNONYM();
    }
    ;

table_privilege:
    table_action_list
    SQL_TOK_ON SQL_TOK_TABLE identifier_chain
    {
        STL_PARSER_TABLE_PRIVILEGE____ON_TABLE();
    }
    |
    table_action_list
    SQL_TOK_ON identifier_chain
    {
        STL_PARSER_TABLE_PRIVILEGE____ON();
    }
    |
    SQL_TOK_ALL
    SQL_TOK_ON SQL_TOK_TABLE identifier_chain
    {
        STL_PARSER_TABLE_PRIVILEGE____ALL_ON_TABLE();
    }
    |
    SQL_TOK_ALL SQL_TOK_PRIVILEGES
    SQL_TOK_ON SQL_TOK_TABLE identifier_chain
    {
        STL_PARSER_TABLE_PRIVILEGE____ALL_PRIVILEGES_ON_TABLE();
    }
    |
    SQL_TOK_ALL
    SQL_TOK_ON identifier_chain
    {
        STL_PARSER_TABLE_PRIVILEGE____ALL_ON();
    }
    |
    SQL_TOK_ALL SQL_TOK_PRIVILEGES
    SQL_TOK_ON identifier_chain
    {
        STL_PARSER_TABLE_PRIVILEGE____ALL_PRIVILEGES_ON();
    }
    ;
    
table_action_list:  
    table_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION();
    }
    |
    column_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION();
    }
    | table_action_list SQL_TOK_COMMA table_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION_LIST();
    }
    | table_action_list SQL_TOK_COMMA column_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION_LIST();
    }
    ;

table_action:  
    SQL_TOK_CONTROL SQL_TOK_TABLE
    {
        STL_PARSER_TABLE_ACTION____CONTROL_TABLE();
    }
    |
    SQL_TOK_SELECT
    {
        STL_PARSER_TABLE_ACTION____SELECT();
    }
    |
    SQL_TOK_INSERT
    {
        STL_PARSER_TABLE_ACTION____INSERT();
    }
    |
    SQL_TOK_UPDATE
    {
        STL_PARSER_TABLE_ACTION____UPDATE();
    }
    |
    SQL_TOK_DELETE
    {
        STL_PARSER_TABLE_ACTION____DELETE();
    }
    |
    SQL_TOK_TRIGGER
    {
        STL_PARSER_TABLE_ACTION____TRIGGER();
    }
    |
    SQL_TOK_REFERENCES
    {
        STL_PARSER_TABLE_ACTION____REFERENCES();
    }
    |
    SQL_TOK_LOCK
    {
        STL_PARSER_TABLE_ACTION____LOCK();
    }
    |
    SQL_TOK_INDEX
    {
        STL_PARSER_TABLE_ACTION____INDEX();
    }
    |
    SQL_TOK_ALTER
    {
        STL_PARSER_TABLE_ACTION____ALTER();
    }
    ;

column_action:  
    SQL_TOK_SELECT SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_COLUMN_ACTION____SELECT();
    }
    |
    SQL_TOK_INSERT SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_COLUMN_ACTION____INSERT();
    }
    |
    SQL_TOK_UPDATE SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_COLUMN_ACTION____UPDATE();
    }
    |
    SQL_TOK_REFERENCES SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_COLUMN_ACTION____REFERENCES();
    }
    ;


sequence_privilege:
    sequence_action_list
    SQL_TOK_ON SQL_TOK_SEQUENCE identifier_chain
    {
        STL_PARSER_SEQUENCE_PRIVILEGE____ACTION_LIST();
    }
    |
    SQL_TOK_ALL
    SQL_TOK_ON SQL_TOK_SEQUENCE identifier_chain
    {
        STL_PARSER_SEQUENCE_PRIVILEGE____ALL();
    }
    |
    SQL_TOK_ALL SQL_TOK_PRIVILEGES
    SQL_TOK_ON SQL_TOK_SEQUENCE identifier_chain
    {
        STL_PARSER_SEQUENCE_PRIVILEGE____ALL_PRIVILEGES();
    }
    ;
    
sequence_action_list:  // qlpList
    sequence_usage_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION();
    }
    | sequence_action_list SQL_TOK_COMMA sequence_usage_action
    {
        STL_PARSER_PRIVILEGE_ACTION_LIST____ACTION_LIST();
    }
    ;

sequence_usage_action:  
    SQL_TOK_USAGE
    {
        STL_PARSER_USAGE_ACTION____SEQUENCE();
    }
    ;

/*
 * TABLESPACE DEFINITION
 */

tablespace_definition:  // qlpTablespaceDef
    memory_data_tablespace_definition
    {
        STL_PARSER_TABLESPACE_DEFINITION();
    }
    | memory_temporary_tablespace_definition
    {
        STL_PARSER_TABLESPACE_DEFINITION();
    }
    | memory_undo_tablespace_definition
    {
        STL_PARSER_TABLESPACE_DEFINITION();
    }
    | disk_data_tablespace_definition
    {
        STL_PARSER_TABLESPACE_DEFINITION();
    }
    | disk_temporary_tablespace_definition
    {
        STL_PARSER_TABLESPACE_DEFINITION();
    }
    // | disk_undo_tablespace_definition
    // {
    //     STL_PARSER_TABLESPACE_DEFINITION();
    // }
    ;

memory_data_tablespace_definition:
    SQL_TOK_CREATE memory_data_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DATAFILE memory_datafile_list
    {
        STL_PARSER_TABLESPACE_DEFINITION____MEMORY_DATA_DATAFILE();
    }
    | SQL_TOK_CREATE memory_data_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DATAFILE memory_datafile_list
    data_tablespace_management_clause
    {
        STL_PARSER_TABLESPACE_DEFINITION____MEMORY_DATA_DATAFILE_ATTR();
    }
    ;


memory_temporary_tablespace_definition:
    SQL_TOK_CREATE memory_temporary_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_MEMORY memory_temporary_memory_list
    {
        STL_PARSER_TABLESPACE_DEFINITION____MEMORY_MEMORY();
    }
    | SQL_TOK_CREATE memory_temporary_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_MEMORY memory_temporary_memory_list temporary_tablespace_options
    {
        STL_PARSER_TABLESPACE_DEFINITION____MEMORY_MEMORY_ATTR();
    }
    ;

memory_undo_tablespace_definition:
    SQL_TOK_CREATE memory_undo_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DATAFILE memory_datafile_list
    {
        STL_PARSER_TABLESPACE_DEFINITION____MEMORY_UNDO_DATAFILE();
    }
    | SQL_TOK_CREATE memory_undo_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DATAFILE memory_datafile_list
    data_tablespace_management_clause
    {
        STL_PARSER_TABLESPACE_DEFINITION____MEMORY_UNDO_DATAFILE_ATTR();
    }
    ;

disk_data_tablespace_definition:
    SQL_TOK_CREATE disk_data_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DATAFILE disk_file_specifications
    {
        STL_PARSER_TABLESPACE_DEFINITION____DISK_DATA_DATAFILES();
    }
    | SQL_TOK_CREATE disk_data_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DATAFILE disk_file_specifications
    data_tablespace_management_clause
    {
        STL_PARSER_TABLESPACE_DEFINITION____DISK_DATA_DATAFILES_ATTR();
    }
    ;

disk_temporary_tablespace_definition:
    SQL_TOK_CREATE disk_temporary_tablespace SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_TEMPFILE disk_file_specifications
    {
        STL_PARSER_TABLESPACE_DEFINITION____DISK_TEMPORARY_DATAFILES();
    }
    ;


memory_data_tablespace:
    /* empty */
    {
    }
    | SQL_TOK_MEMORY
    | SQL_TOK_DATA
    | SQL_TOK_MEMORY SQL_TOK_DATA
    ;

memory_temporary_tablespace:
      SQL_TOK_TEMPORARY
    | SQL_TOK_MEMORY SQL_TOK_TEMPORARY
    ;

memory_undo_tablespace:
      SQL_TOK_UNDO
    | SQL_TOK_MEMORY SQL_TOK_UNDO
    ;

disk_data_tablespace:
      SQL_TOK_DISK
    | SQL_TOK_DISK SQL_TOK_DATA
    ;

disk_temporary_tablespace:
    SQL_TOK_DISK SQL_TOK_TEMPORARY
    ;


data_tablespace_management_clause:  // qlpTablespaceAttr
    permanent_tablespace_options
    {
        STL_PARSER_TABLESPACE_CLAUSE____();
    }
    ;


permanent_tablespace_options:  // qlpTablespaceAttr
    permanent_tablespace_option
    {
        STL_PARSER_PERMANENT_TABLESPACE_OPTIONS____ATTR();
    }
    | permanent_tablespace_options permanent_tablespace_option
    {
        STL_PARSER_PERMANENT_TABLESPACE_OPTIONS____ATTR_LIST();
    }
    ;

permanent_tablespace_option:  // qlpList
    SQL_TOK_LOGGING
    {
        STL_PARSER_PERMANENT_TABLESPACE_OPTION____LOGGING( );
    }
    | SQL_TOK_NOLOGGING
    {
        STL_PARSER_PERMANENT_TABLESPACE_OPTION____NO_LOGGING( );
    }
    | SQL_TOK_ONLINE
    {
        STL_PARSER_PERMANENT_TABLESPACE_OPTION____ONLINE( );
    }
    | SQL_TOK_OFFLINE
    {
        STL_PARSER_PERMANENT_TABLESPACE_OPTION____OFFLINE( );
    }
    | SQL_TOK_EXTSIZE size_clause
    {
        STL_PARSER_PERMANENT_TABLESPACE_OPTION____EXTSIZE( );
    }
    ;

temporary_tablespace_options:  // qlpTablespaceAttr
    temporary_tablespace_option
    {
        STL_PARSER_TEMPORARY_TABLESPACE_OPTIONS____ATTR();
    }
    | temporary_tablespace_options temporary_tablespace_option
    {
        STL_PARSER_TEMPORARY_TABLESPACE_OPTIONS____ATTR_LIST();
    }
    ;

temporary_tablespace_option:  // qlpList
    SQL_TOK_EXTSIZE size_clause
    {
        STL_PARSER_TEMPORARY_TABLESPACE_OPTION____EXTSIZE( );
    }
    ;

size_clause:  // qlpSize
    SQL_TOK_UNSIGNED_INTEGER byte_unit
    {
        STL_PARSER_SIZE_CLAUSE____();
    }
    ;

byte_unit:  // qlpList
    /* empty */
    {
        STL_PARSER_BYTE_UNIT____EMPTY( );
    }
    | SQL_TOK_B
    {
        STL_PARSER_BYTE_UNIT____BYTE( );
    }
    | SQL_TOK_K
    {
        STL_PARSER_BYTE_UNIT____KILO( );
    }
    | SQL_TOK_M
    {
        STL_PARSER_BYTE_UNIT____MEGA( );
    }
    | SQL_TOK_G
    {
        STL_PARSER_BYTE_UNIT____GIGA( );
    }
    | SQL_TOK_T
    {
        STL_PARSER_BYTE_UNIT____TERA( );
    }
    ;

memory_datafile_list:  // qlpList
    memory_datafile
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATIONS____SPEC( );
    }
    | memory_datafile_list SQL_TOK_COMMA memory_datafile
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATIONS____SPEC_LIST( );
    }
    ;

memory_datafile:  // qlpDatafile
    SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_SIZE size_clause
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATION____NAME_SIZE( );
    }
    | SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_SIZE size_clause
    SQL_TOK_REUSE
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATION____NAME_SIZE_REUSE( );
    }
    | SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_REUSE
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATION____NAME_REUSE( );
    }
    ;

memory_temporary_memory_list:  // qlpList
    memory_temporary_memory
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATIONS____SPEC( );
    }
    | memory_temporary_memory_list SQL_TOK_COMMA memory_temporary_memory
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATIONS____SPEC_LIST( );
    }
    ;

memory_temporary_memory:  // qlpDatafile
    SQL_TOK_QUOTE_STRING // memory_name
    SQL_TOK_SIZE size_clause
    {
        STL_PARSER_MEMORY_FILE_SPECIFICATION____NAME_SIZE( );
    }
    ;

disk_file_specifications:  // qlpList
    disk_file_specification
    {
        STL_PARSER_DISK_FILE_SPECIFICATIONS____SPEC( );
    }
    | disk_file_specifications SQL_TOK_COMMA disk_file_specification
    {
        STL_PARSER_DISK_FILE_SPECIFICATIONS____SPEC_LIST( );
    }
    ;

disk_file_specification:  // qlpDatafile
    SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_SIZE size_clause
    {
        STL_PARSER_DISK_FILE_SPECIFICATION____NAME_SIZE( );
    }
    | SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_SIZE size_clause
    SQL_TOK_REUSE
    {
        STL_PARSER_DISK_FILE_SPECIFICATION____NAME_SIZE_REUSE( );
    }
    | SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_SIZE size_clause
    SQL_TOK_REUSE
    autoextend_clause
    {
        STL_PARSER_DISK_FILE_SPECIFICATION____NAME_SIZE_REUSE_AUTOEXTEND( );
    }
    | SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_SIZE size_clause
    autoextend_clause
    {
        STL_PARSER_DISK_FILE_SPECIFICATION____NAME_SIZE_AUTOEXTEND( );
    }
    | SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_REUSE
    {
        STL_PARSER_DISK_FILE_SPECIFICATION____NAME_REUSE( );
    }
    | SQL_TOK_QUOTE_STRING // file_name
    SQL_TOK_REUSE
    autoextend_clause
    {
        STL_PARSER_DISK_FILE_SPECIFICATION____NAME_REUSE_AUTOEXTEND( );
    }
    ;

autoextend_clause:
    SQL_TOK_AUTOEXTEND SQL_TOK_ON
    {
        STL_PARSER_AUTOEXTEND_CLAUSE____ON( );
    }
    | SQL_TOK_AUTOEXTEND SQL_TOK_OFF
    {
        STL_PARSER_AUTOEXTEND_CLAUSE____OFF( );
    }
    | SQL_TOK_AUTOEXTEND SQL_TOK_ON SQL_TOK_NEXT size_clause
    {
        STL_PARSER_AUTOEXTEND_CLAUSE____ON_NEXT( );
    }
    | SQL_TOK_AUTOEXTEND SQL_TOK_ON maxsize_clause
    {
        STL_PARSER_AUTOEXTEND_CLAUSE____ON_MAXSIZE( );
    }
    | SQL_TOK_AUTOEXTEND SQL_TOK_ON SQL_TOK_NEXT size_clause maxsize_clause
    {
        STL_PARSER_AUTOEXTEND_CLAUSE____ON_NEXT_MAXSIZE( );
    }
    ;

maxsize_clause:
    SQL_TOK_MAXSIZE SQL_TOK_UNLIMITED
    {
        STL_PARSER_MAXSIZE_CLAUSE____UNLIMITED( );
    }
    | SQL_TOK_MAXSIZE size_clause
    {
        STL_PARSER_MAXSIZE_CLAUSE____SIZE( );
    }
    ;

/*
 * ALTER DATABASE
 */

alter_database_statement:
    SQL_TOK_ALTER SQL_TOK_DATABASE alter_database_clause
    {
        STL_PARSER_ALTER_DATABASE_STATEMENT____();
    }
    ;

alter_database_clause:
    alter_database_logfile_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____LOGFILE();
    }
    | alter_database_backup_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____BACKUP();
    }
    | alter_database_archivelog_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____ARCHIVELOG();
    }
    | alter_database_register_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____REGISTER();
    }
    | alter_database_recover_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____RECOVER();
    }
    | alter_database_restore_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____RESTORE();
    }
    | alter_database_delete_backup_list_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____DELETE_BACKUP_LIST();
    }
    | alter_database_clear_password_history_statement
    {
        STL_PARSE_ALTER_DATABASE_CLAUSE____CLEAR_PASSWORD_HISTORY();
    }
    ;

alter_database_logfile_statement:
    SQL_TOK_ADD SQL_TOK_LOGFILE group_clause
    SQL_TOK_LEFT_PAREN logfile_list SQL_TOK_RIGHT_PAREN
    SQL_TOK_SIZE size_clause
    {
        STL_PARSE_ALTER_DATABASE_LOGFILE_CLAUSE____ADD_GROUP();
    }
    | SQL_TOK_ADD SQL_TOK_LOGFILE group_clause
    SQL_TOK_LEFT_PAREN logfile_list SQL_TOK_RIGHT_PAREN
    SQL_TOK_SIZE size_clause SQL_TOK_REUSE
    {
        STL_PARSE_ALTER_DATABASE_LOGFILE_CLAUSE____ADD_GROUP_REUSE();
    }
    | SQL_TOK_ADD SQL_TOK_LOGFILE SQL_TOK_MEMBER
    add_logfile_list SQL_TOK_TO group_clause
    {
        STL_PARSE_ALTER_DATABASE_LOGFILE_CLAUSE____ADD_MEMBER();
    }
    | SQL_TOK_DROP SQL_TOK_LOGFILE group_clause
    {
        STL_PARSE_ALTER_DATABASE_LOGFILE_CLAUSE____DROP_GROUP();
    }
    | SQL_TOK_DROP SQL_TOK_LOGFILE SQL_TOK_MEMBER logfile_list
    {
        STL_PARSE_ALTER_DATABASE_LOGFILE_CLAUSE____DROP_MEMBER();
    }
    | SQL_TOK_RENAME SQL_TOK_LOGFILE
    logfile_list SQL_TOK_TO logfile_list
    {
        STL_PARSE_ALTER_DATABASE_LOGFILE_CLAUSE____RENAME();
    }
    ;

alter_database_backup_statement:
    SQL_TOK_BEGIN SQL_TOK_BACKUP
    {
        STL_PARSE_ALTER_DATABASE_BACKUP_CLAUSE____();
    }
    | SQL_TOK_END SQL_TOK_BACKUP
    {
        STL_PARSE_ALTER_DATABASE_BACKUP_CLAUSE____();
    }
    | SQL_TOK_BACKUP SQL_TOK_INCREMENTAL incremental_backup_option
    {
        STL_PARSE_ALTER_DATABASE_BACKUP_INCREMENTAL_CLAUSE____();
    }
    | SQL_TOK_BACKUP SQL_TOK_CONTROLFILE SQL_TOK_TO SQL_TOK_QUOTE_STRING
    {
        STL_PARSE_ALTER_DATABASE_BACKUP_CONTROLFILE_CLAUSE____();
    }
    ;

alter_database_delete_backup_list_statement:
    SQL_TOK_DELETE delete_backup_list_option SQL_TOK_BACKUP SQL_TOK_LIST
    including_backup_file_option
    {
        STL_PARSE_ALTER_DATABASE_DELETE_BACKUP_LIST_CLAUSE____();
    }
    ;

alter_database_clear_password_history_statement:
    SQL_TOK_CLEAR SQL_TOK_PASSWORD SQL_TOK_HISTORY
    {
        STL_PARSE_ALTER_DATABASE_CLEAR_PASSWORD_HISTORY_CLAUSE____();
    }
    ;

delete_backup_list_option:
    SQL_TOK_OBSOLETE
    {
        STL_PARSE_DELETE_BACKUP_LIST_OPTION____OBSOLETE();
    }
    | SQL_TOK_ALL
    {
        STL_PARSE_DELETE_BACKUP_LIST_OPTION____ALL();
    }
    ;

including_backup_file_option:
    /*
     * empty
     */
    {
        STL_PARSE_INCLUDING_BACKUP_FILE_OPTION____EMPTY();
    }
    |
    SQL_TOK_INCLUDING SQL_TOK_BACKUP SQL_TOK_FILES
    {
        STL_PARSE_INCLUDING_BACKUP_FILE_OPTION____INCLUDING_BACKUP_FILE();
    }
    ;

incremental_backup_option:
    SQL_TOK_LEVEL SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSE_INCREMENTAL_BACKUP_OPTION____NONE();
    }
    | SQL_TOK_LEVEL SQL_TOK_UNSIGNED_INTEGER SQL_TOK_CUMULATIVE
    {
        STL_PARSE_INCREMENTAL_BACKUP_OPTION____();
    }
    | SQL_TOK_LEVEL SQL_TOK_UNSIGNED_INTEGER SQL_TOK_DIFFERENTIAL
    {
        STL_PARSE_INCREMENTAL_BACKUP_OPTION____();
    }
    ;

alter_database_archivelog_statement:
    SQL_TOK_ARCHIVELOG
    {
        STL_PARSE_ALTER_DATABASE_ARCHIVELOG_CLAUSE____();
    }
    | SQL_TOK_NOARCHIVELOG
    {
        STL_PARSE_ALTER_DATABASE_NOARCHIVELOG_CLAUSE____();
    }
    ;

alter_database_register_statement:
    SQL_TOK_REGISTER SQL_TOK_IRRECOVERABLE SQL_TOK_SEGMENT segment_id_list
    {
        STL_PARSE_ALTER_DATABASE_REGISTER_CLAUSE____IRRECOVERABLE();
    }
    ;

add_logfile_list:
    add_logfile
    {
        STL_PARSER_LOG_FILE____STRING();
    }
    | add_logfile_list SQL_TOK_COMMA add_logfile
    {
        STL_PARSER_LOG_FILE____STRING_LIST();
    }
    ;

add_logfile:
    SQL_TOK_QUOTE_STRING 
    {
        STL_PARSER_LOG_FILE____NAME( );
    }
    | SQL_TOK_QUOTE_STRING SQL_TOK_REUSE
    {
        STL_PARSER_LOG_FILE____NAME_REUSE( );
    }
    ;

group_clause:
    SQL_TOK_GROUP SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_LOG_GROUP____NAME_SIZE( );
    }
    ;

logfile_list:
    SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_LOG_FILE_LIST____STRING();
    }
    | logfile_list SQL_TOK_COMMA SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_LOG_FILE_LIST____STRING_LIST();
    }
    ;

segment_id_list:
    unsigned_integer
    {
        STL_PARSER_SEGMENT_ID_LIST____INTEGER();
    }
    | segment_id_list SQL_TOK_COMMA unsigned_integer
    {
        STL_PARSER_SEGMENT_ID_LIST____INTEGER_LIST();
    }
    ;

alter_database_recover_statement:
    media_recovery_clause
    {
        STL_PARSE_ALTER_DATABASE_RECOVER_CLAUSE____DATABASE();
    }
    | SQL_TOK_RECOVER SQL_TOK_TABLESPACE identifier // space_name
    {
        STL_PARSE_ALTER_DATABASE_RECOVER_CLAUSE____TABLESPACE();
    }
    | SQL_TOK_RECOVER SQL_TOK_DATAFILE datafile_recovery_clause
    {
        STL_PARSE_ALTER_DATABASE_RECOVER_CLAUSE____DATAFILE();
    }
    ;

/**
 * Datafile, Page Recovery
 */
datafile_recovery_clause:
    datafile_recovery_object
    {
        STL_PARSE_RECOVER_DATAFILE____DATAFILE();
    }
    | datafile_recovery_clause SQL_TOK_COMMA datafile_recovery_object
    {
        STL_PARSE_RECOVER_DATAFILE____DATAFILE_LIST();
    }
    ;

datafile_recovery_object:
    SQL_TOK_QUOTE_STRING recovery_using_backup_option recovery_corruption_option
    {
        STL_PARSE_RECOVER_DATAFILE____TARGET();
    }
    ;

recovery_corruption_option:
    /* empty */
    {
        STL_PARSE_RECOVER_CORRUPTION_OPTION____NONE();
    }
    | SQL_TOK_CORRUPTION
    {
        STL_PARSE_RECOVER_CORRUPTION_OPTION____();
    }
    ;

recovery_using_backup_option:
    /* empty */
    {
        STL_PARSE_RECOVER_USING_OPTION____NONE();
    }
    | SQL_TOK_USING SQL_TOK_BACKUP SQL_TOK_QUOTE_STRING
    {
        STL_PARSE_RECOVER_USING_OPTION____();
    }
    ;

alter_database_restore_statement:
    SQL_TOK_RESTORE restore_until_option
    {
        STL_PARSE_ALTER_DATABASE_RESTORE_CLAUSE____DATABASE();
    }
    | SQL_TOK_RESTORE SQL_TOK_TABLESPACE identifier // space_name
    {
        STL_PARSE_ALTER_DATABASE_RESTORE_CLAUSE____TABLESPACE();
    }
    | SQL_TOK_RESTORE SQL_TOK_CONTROLFILE SQL_TOK_FROM SQL_TOK_QUOTE_STRING
    {
        STL_PARSE_ALTER_DATABASE_RESTORE_CONTROLFILE_CLAUSE____();
    }
    ;

media_recovery_clause:
    SQL_TOK_RECOVER    /* COMPLETE MEDIA RECOVERY */
    {
        STL_PARSE_MEDIA_RECOVERY_OPTION____FULL();
    }
    | incomplete_recovery_option using_backup_controlfile_option
    {
        STL_PARSE_MEDIA_RECOVERY_OPTION____INCOMPLETE_RECOVERY_INTERACTIVE();
    }
    |
    SQL_TOK_RECOVER SQL_TOK_UNTIL SQL_TOK_CHANGE SQL_TOK_UNSIGNED_INTEGER
    using_backup_controlfile_option
    {
        STL_PARSE_MEDIA_RECOVERY_OPTION____INCOMPLETE_RECOVERY_CHANGE();
    }
    |
    SQL_TOK_RECOVER SQL_TOK_UNTIL SQL_TOK_TIME datetime_string
    using_backup_controlfile_option
    {
        STL_PARSE_MEDIA_RECOVERY_OPTION____INCOMPLETE_RECOVERY_TIME();
    }
    ;

incomplete_recovery_option:
    SQL_TOK_BEGIN SQL_TOK_INCOMPLETE SQL_TOK_RECOVERY
    {
        STL_PARSE_INCOMPLETE_RECOVERY_OPTION____BEGIN();
    }
    | SQL_TOK_END SQL_TOK_INCOMPLETE SQL_TOK_RECOVERY
    {
        STL_PARSE_INCOMPLETE_RECOVERY_OPTION____END();
    }
    | SQL_TOK_RECOVER SQL_TOK_QUOTE_STRING
    {
        STL_PARSE_INCOMPLETE_RECOVERY_OPTION____MANUAL();
    }
    | SQL_TOK_RECOVER SQL_TOK_AUTOMATICALLY
    {
        STL_PARSE_INCOMPLETE_RECOVERY_OPTION____AUTO();
    }
    | SQL_TOK_RECOVER SQL_TOK_SUGGESTION
    {
        STL_PARSE_INCOMPLETE_RECOVERY_OPTION____SUGGESTION();
    }
    ;

using_backup_controlfile_option:
    /*
     * empty
     */
    {
        STL_PARSE_USING_CONTROLFILE_OPTION____USING_RECENT_CONTROLFILE();
    }
    | SQL_TOK_USING SQL_TOK_BACKUP SQL_TOK_CONTROLFILE
    {
        STL_PARSE_USING_CONTROLFILE_OPTION____USING_BACKUP_CONTROLFILE();
    }
    ;

restore_until_option:
    /*
     * empty
     */
    {
        STL_PARSE_RESTORE_UNTIL_OPTION____NONE();
    }
    | SQL_TOK_UNTIL SQL_TOK_CHANGE SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSE_RESTORE_UNTIL_OPTION____CHANGE();
    }
    | SQL_TOK_UNTIL SQL_TOK_TIME SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSE_RESTORE_UNTIL_OPTION____TIME();
    }
    ;

/*
 * ALTER TABLESPACE
 */

alter_tablespace_statement:
    alter_tablespace_add_statement
    {
        STL_PARSE_ALTER_TABLESPACE();
    }
    | alter_tablespace_backup_statement
    {
        STL_PARSE_ALTER_TABLESPACE();
    }
    | alter_tablespace_drop_statement
    {
        STL_PARSE_ALTER_TABLESPACE();
    }
    | alter_tablespace_onoff_statement
    {
        STL_PARSE_ALTER_TABLESPACE();
    }
    | alter_tablespace_rename_statement
    {
        STL_PARSE_ALTER_TABLESPACE();
    }
    | alter_tablespace_rename_file_statement
    {
        STL_PARSE_ALTER_TABLESPACE();
    }
    // | alter_tablespace_shrink_statement
    ;


alter_tablespace_add_statement:
    SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_ADD SQL_TOK_MEMORY memory_temporary_memory_list
    {
        ALTER_TABLESPACE_ADD____ADD_MEMORY();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_ADD SQL_TOK_DATAFILE disk_file_specifications
    {
        ALTER_TABLESPACE_ADD____ADD_DATAFILE();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_ADD SQL_TOK_TEMPFILE disk_file_specifications
    {
        ALTER_TABLESPACE_ADD____ADD_TEMPFILE();
    }
    ;

alter_tablespace_backup_statement:
    SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier SQL_TOK_BEGIN SQL_TOK_BACKUP
    {
        ALTER_TABLESPACE_BACKUP_CLAUSE____();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier SQL_TOK_END SQL_TOK_BACKUP
    {
        ALTER_TABLESPACE_BACKUP_CLAUSE____();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier SQL_TOK_BACKUP
    SQL_TOK_INCREMENTAL incremental_backup_option
    {
        ALTER_TABLESPACE_BACKUP_INCREMENTAL_CLAUSE____();
    }
    ;

alter_tablespace_drop_statement:
    SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DROP SQL_TOK_MEMORY SQL_TOK_QUOTE_STRING
    {
        ALTER_TABLESPACE_DROP____DROP_MEMORY();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DROP SQL_TOK_DATAFILE SQL_TOK_QUOTE_STRING
    {
        ALTER_TABLESPACE_DROP____DROP_DATAFILE();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_DROP SQL_TOK_TEMPFILE SQL_TOK_QUOTE_STRING
    {
        ALTER_TABLESPACE_DROP____DROP_TEMPFILE();
    }
    ;

alter_tablespace_onoff_statement:
    SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_ONLINE
    {
        ALTER_TABLESPACE_ONOFF____ONLINE();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_OFFLINE
    {
        ALTER_TABLESPACE_ONOFF____OFFLINE_EMPTY();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_OFFLINE SQL_TOK_NORMAL
    {
        ALTER_TABLESPACE_ONOFF____OFFLINE_NORMAL();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_OFFLINE SQL_TOK_IMMEDIATE
    {
        ALTER_TABLESPACE_ONOFF____OFFLINE_IMMEDIATE();
    }
    ;

alter_tablespace_rename_file_statement:
    SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_RENAME SQL_TOK_MEMORY rename_file_list SQL_TOK_TO rename_file_list
    {
        ALTER_TABLESPACE_RENAME____RENAME_MEMORY();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_RENAME SQL_TOK_DATAFILE rename_file_list SQL_TOK_TO rename_file_list
    {
        ALTER_TABLESPACE_RENAME____RENAME_DATAFILE();
    }
    | SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_RENAME SQL_TOK_TEMPFILE rename_file_list SQL_TOK_TO rename_file_list
    {
        ALTER_TABLESPACE_RENAME____RENAME_TEMPFILE();
    }
    ;

rename_file_list:
    SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_RENAME_FILE_LIST____STRING();
    }
    | rename_file_list SQL_TOK_COMMA SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_RENAME_FILE_LIST____STRING_LIST();
    }

alter_tablespace_rename_statement:
    SQL_TOK_ALTER SQL_TOK_TABLESPACE identifier // space_name
    SQL_TOK_RENAME SQL_TOK_TO identifier
    {
        ALTER_TABLESPACE_RENAME____();
    }
    ;

/*
 * DROP TABLESPACE
 */

drop_tablespace_statement:
    SQL_TOK_DROP SQL_TOK_TABLESPACE drop_if_exists_option
    identifier // tablespace_name
    including_contents_option
    drop_datafile_option
    drop_behavior
    {
        STL_PARSER_DROP_TABLESPACE_STATEMENT();
    }
    ;

including_contents_option:
    /*
     * empty
     */
    {
        STL_PARSER_INCLUDING_CONTENTS_OPTION____EMPTY();
    }
    |
    SQL_TOK_INCLUDING SQL_TOK_CONTENTS
    {
        STL_PARSER_INCLUDING_CONTENTS_OPTION____INCLUDING_CONTENTS();
    }
    ;

drop_datafile_option:
    /*
     * empty
     */
    {
        STL_PARSER_DROP_DATAFILE_OPTION____EMPTY();
    }
    |
    SQL_TOK_AND SQL_TOK_DATAFILES
    {
        STL_PARSER_DROP_DATAFILE_OPTION____AND_DATAFILES();
    }
    |
    SQL_TOK_KEEP SQL_TOK_DATAFILES
    {
        STL_PARSER_DROP_DATAFILE_OPTION____KEEP_DATAFILES();
    }
    ;


/*
 * SCHEMA DEFINITION
 */

schema_definition:  
    SQL_TOK_CREATE SQL_TOK_SCHEMA
    identifier   // schema_name
    {
        STL_PARSER_SCHEMA_DEFINITION_WITHOUT_DDL____SCHEMA_ONLY();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SCHEMA
    SQL_TOK_AUTHORIZATION identifier   // user_name 
    {
        STL_PARSER_SCHEMA_DEFINITION_WITHOUT_DDL____OWNER_ONLY();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SCHEMA
    identifier SQL_TOK_AUTHORIZATION identifier  // schema_name, user_name
    {
        STL_PARSER_SCHEMA_DEFINITION_WITHOUT_DDL____SCHEMA_AND_OWNER();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SCHEMA
    identifier   // schema_name
    schema_element_list
    {
        STL_PARSER_SCHEMA_DEFINITION_WITH_DDL____SCHEMA_ONLY();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SCHEMA
    SQL_TOK_AUTHORIZATION identifier   // user_name 
    schema_element_list
    {
        STL_PARSER_SCHEMA_DEFINITION_WITH_DDL____OWNER_ONLY();
    }
    |
    SQL_TOK_CREATE SQL_TOK_SCHEMA
    identifier SQL_TOK_AUTHORIZATION identifier  // schema_name, user_name
    schema_element_list
    {
        STL_PARSER_SCHEMA_DEFINITION_WITH_DDL____SCHEMA_AND_OWNER();
    }
    ;

schema_element_list:  
    schema_element
    {
        STL_PARSER_SCHEMA_ELEMENT_LIST____DDL();
    }
    | schema_element_list schema_element
    {
        STL_PARSER_SCHEMA_ELEMENT_LIST____DDL_LIST();
    }
    ;

schema_element:  
    table_definition
    {
        STL_PARSER_SCHEMA_ELEMENT____TABLE_DEFINITION();
    }
    |
    view_definition
    {
        STL_PARSER_SCHEMA_ELEMENT____VIEW_DEFINITION();
    }
    |
    index_definition
    {
        STL_PARSER_SCHEMA_ELEMENT____INDEX_DEFINITION();
    }
    |
    sequence_definition
    {
        STL_PARSER_SCHEMA_ELEMENT____SEQUENCE_DEFINITION();
    }
    |
    grant_privilege_statement
    {
        STL_PARSER_SCHEMA_ELEMENT____GRANT_PRIV_STATEMENT();
    }
    |
    comment_statement
    {
        STL_PARSER_SCHEMA_ELEMENT____COMMENT_STATEMENT();
    }
    ;


/*
 * DROP SCHEMA
 */

drop_schema_statement:
    SQL_TOK_DROP SQL_TOK_SCHEMA drop_if_exists_option
    identifier // schema_name
    drop_behavior
    {
        STL_PARSER_DROP_SCHEMA_STATEMENT();
    }
    ;

/*
 * TABLE DEFINITION
 */

table_definition:  // qlpTableDef
    SQL_TOK_CREATE
    table_scope
    SQL_TOK_TABLE identifier_chain // table_name
    table_contents_source
    // SQL_TOK_WITH system_versioning_clause
    // SQL_TOK_ON SQL_TOK_COMMIT table_commit_action SQL_TOK_ROWS
    {
        STL_PARSER_TABLE_DEFINITION____SCOPE_NAME_CONTENTS();
    }
    | SQL_TOK_CREATE
    table_scope
    SQL_TOK_TABLE identifier_chain // table_name
    table_contents_source
    // SQL_TOK_WITH system_versioning_clause
    // SQL_TOK_ON SQL_TOK_COMMIT table_commit_action SQL_TOK_ROWS
    relation_attribute_types
    {
        STL_PARSER_TABLE_DEFINITION____SCOPE_NAME_CONTENTS_RELATION();
    } 
    | SQL_TOK_CREATE
    table_scope
    SQL_TOK_TABLE identifier_chain // table_name
    view_column_list
    SQL_TOK_AS query_expression
    with_data_option
    {
        STL_PARSER_TABLE_DEFINITION____SCOPE_NAME_COLUMNLIST_SUBQUERY();
    }
    | SQL_TOK_CREATE
    table_scope
    SQL_TOK_TABLE identifier_chain // table_name
    view_column_list
    relation_attribute_types
    SQL_TOK_AS query_expression
    with_data_option
    {
        STL_PARSER_TABLE_DEFINITION____SCOPE_NAME_COLUMNLIST_RELATION_SUBQUERY();
    }
    ;

with_data_option:
    {
        STL_PARSER_WITH_DATA_OPTION____DATA();
    }
    | SQL_TOK_WITH SQL_TOK_NO SQL_TOK_DATA
    {
        STL_PARSER_WITH_DATA_OPTION____NO_DATA();
    }
    | SQL_TOK_WITH SQL_TOK_DATA
    {
        STL_PARSER_WITH_DATA_OPTION____DATA();
    }
    ;

relation_attribute_types:
    relation_attribute_list
    {
        STL_PARSER_RELATION_ATTRIBUTE_TYPES____LIST();
    }
    | tablespace_attribute_types
    {
        STL_PARSER_RELATION_ATTRIBUTE_TYPES____TABLESPACE();
    }
    | relation_attribute_list tablespace_attribute_types
    {
        STL_PARSER_RELATION_ATTRIBUTE_TYPES____LIST_TABLESPACE();
    }
    | relation_columnar_attribute_types
    {
        STL_PARSER_RELATION_ATTRIBUTE_TYPES____COLUMNAR();
    }
    | relation_columnar_attribute_types tablespace_attribute_types
    {
        STL_PARSER_RELATION_ATTRIBUTE_TYPES____COLUMNAR_TABLESPACE();
    }
    ;

relation_attribute_list:   // qlpList
    relation_attribute_type
    {
        STL_PARSER_RELATION_ATTRIBUTE_LIST____ATTR();
    }
    | relation_attribute_list relation_attribute_type
    {
        STL_PARSER_RELATION_ATTRIBUTE_LIST____ATTR_LIST();
    }
    ;

relation_columnar_attribute_types:
    SQL_TOK_WITH SQL_TOK_COLUMNAR SQL_TOK_OPTIONS
    {
        STL_PARSER_RELATION_ATTRIBUTE_COLUMNAR____WITH_COLUMNAR_OPTIONS();
    }
    | SQL_TOK_WITHOUT SQL_TOK_COLUMNAR SQL_TOK_OPTIONS
    {
        STL_PARSER_RELATION_ATTRIBUTE_COLUMNAR____WITHOUT_COLUMNAR_OPTIONS();
    }
    | SQL_TOK_WITH SQL_TOK_COLUMNAR SQL_TOK_OPTIONS segment_attribute_types
    {
        STL_PARSER_RELATION_ATTRIBUTE_COLUMNAR____WITH_COLUMNAR_OPTIONS_SEGMENT();
    }
    | SQL_TOK_WITHOUT SQL_TOK_COLUMNAR SQL_TOK_OPTIONS segment_attribute_types
    {
        STL_PARSER_RELATION_ATTRIBUTE_COLUMNAR____WITHOUT_COLUMNAR_OPTIONS_SEGMENT();
    }
    ;

relation_attribute_type:
    segment_attribute_types
    {
        STL_PARSER_RELATION_ATTRIBUTE_TYPE____SEGMENT();
    }
    | physical_attribute_type
    {
        STL_PARSER_RELATION_ATTRIBUTE_TYPE____PHYSICAL();
    }
    ;

tablespace_attribute_types:
    SQL_TOK_TABLESPACE identifier // tablespace_name
    {
        STL_PARSER_TABLESPACE_ATTRIBUTE_TYPES____();
    }
    ;

segment_attribute_types:
    SQL_TOK_STORAGE SQL_TOK_LEFT_PAREN segment_attribute_type_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SEGMENT_ATTRIBUTE_TYPES____LIST();
    }
    ;

segment_attribute_type_list:
    segment_attribute_type
    {
        STL_PARSER_SEGMENT_ATTRIBUTE_TYPE_LIST____ATTR();
    }
    | segment_attribute_type_list segment_attribute_type
    {
        STL_PARSER_SEGMENT_ATTRIBUTE_TYPE_LIST____ATTR_LIST();
    }
    ;

segment_attribute_type:
    SQL_TOK_INITIAL size_clause
    {
        STL_PARSER_SEGMENT_ATTRIBUTE_TYPE____INITIAL();
    }
    | SQL_TOK_NEXT size_clause
    {
        STL_PARSER_SEGMENT_ATTRIBUTE_TYPE____NEXT();
    }
    | SQL_TOK_MINSIZE size_clause
    {
        STL_PARSER_SEGMENT_ATTRIBUTE_TYPE____MINSIZE();
    }
    | SQL_TOK_MAXSIZE size_clause
    {
        STL_PARSER_SEGMENT_ATTRIBUTE_TYPE____MAXSIZE();
    }
    ;



physical_attribute_type:  // integer : qlpPhysicalAttrType
    SQL_TOK_PCTFREE SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_PHYSICAL_ATTRIBUTE_TYPE____PCTFREE();
    }
    | SQL_TOK_PCTUSED SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_PHYSICAL_ATTRIBUTE_TYPE____PCTUSED();
    }
    | SQL_TOK_INITRANS SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_PHYSICAL_ATTRIBUTE_TYPE____INITRANS();
    }
    | SQL_TOK_MAXTRANS SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_PHYSICAL_ATTRIBUTE_TYPE____MAXTRANS();
    }
    ;

table_scope:  // integer : qlpTableScope
/* empty */
    {
        STL_PARSER_TABLE_SCOPE____NON_TEMP();
    }
    | SQL_TOK_GLOBAL SQL_TOK_TEMPORARY
    {
        STL_PARSER_TABLE_SCOPE____GLOBAL_TEMP();
    }
    | SQL_TOK_LOCAL SQL_TOK_TEMPORARY
    {
        STL_PARSER_TABLE_SCOPE____LOCAL_TEMP();
    }
    ;

table_contents_source:  // qlpList
    table_element_list
    {
        STL_PARSER_TABLE_CONTENTS_SOURCE____ELEMENTS();
    }
    // | typed_table_clause
    // {
    // }
    // | as_subbuqry_clause
    // {
    // }
    ;

table_element_list:  // qlpList
    SQL_TOK_LEFT_PAREN table_element_2 SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TABLE_ELEMENT_LIST____();
    }
    ;

table_element_2:  // qlpList
    table_element
    {
        STL_PARSER_TABLE_ELEMENT_2____ELEMENT();
    }
    | table_element_2 SQL_TOK_COMMA table_element
    {
        STL_PARSER_TABLE_ELEMENT_2____LIST();
    }
    ;

table_element:  // qlpNode
    column_definition
    {
        STL_PARSER_TABLE_ELEMENT____COLUMN_DEF();
    }
    | table_constraint_definition
    {
        STL_PARSER_TABLE_ELEMENT____CONSTRAINT_DEF();
    }
    // | like_clause
    // {
    //     STL_NOT_SUPPORT();
    // }
    ;

// like_clause:  // ???
//     SQL_TOK_LIKE identifier_chain // table_name
//     {
//         STL_NOT_SUPPORT();
//     }
//     | SQL_TOK_LIKE identifier_chain // table_name
//     like_option
//     {
//         STL_NOT_SUPPORT();
//     }
//     ;

// like_option:  // integer : ???
//     identity_option
//     {
//         STL_NOT_SUPPORT();
//     }
//     | column_default_option
//     {
//         STL_NOT_SUPPORT();
//     }
//     | generation_option
//     {
//         STL_NOT_SUPPORT();
//     }
//     ;

// identity_option:  // integer : ???
//     SQL_TOK_INCLUDING SQL_TOK_IDENTITY
//     {
//         STL_NOT_SUPPORT();
//     }
//     | SQL_TOK_EXCLUDING SQL_TOK_IDENTITY
//     {
//         STL_NOT_SUPPORT();
//     }
//     ;

// column_default_option:  // integer : ???
//     SQL_TOK_INCLUDING SQL_TOK_DEFAULTS
//     {
//         STL_NOT_SUPPORT();
//     }
//     | SQL_TOK_EXCLUDING SQL_TOK_DEFAULTS
//     {
//         STL_NOT_SUPPORT();
//     }
//     ;

// generation_option:  // integer : ???
//     SQL_TOK_INCLUDING SQL_TOK_GENERATED
//     {
//         STL_NOT_SUPPORT();
//     }
//     | SQL_TOK_EXCLUDING SQL_TOK_GENERATED
//     {
//         STL_NOT_SUPPORT();
//     }
//     ;

table_constraint_definition:  // qlpList
    table_constraint_element
    {
        STL_PARSER_TABLE_CONSTRAINT_DEFINITION____CONSTRAINT();
    }
    ;

table_constraint_element:
    table_constraint
    {
        STL_PARSER_TABLE_CONSTRAINT_ELEMENT____DEF();
    }
    |
    constraint_name_definition table_constraint
    {
        STL_PARSER_TABLE_CONSTRAINT_ELEMENT____NAME_DEF();
    }
    |
    table_constraint constraint_characteristics
    {
        STL_PARSER_TABLE_CONSTRAINT_ELEMENT____DEF_WITH_CONSTARINT_CHARACTERISTICS();
    }
    |
    constraint_name_definition table_constraint constraint_characteristics
    {
        STL_PARSER_TABLE_CONSTRAINT_ELEMENT____NAME_DEF_WITH_CONSTARINT_CHARACTERISTICS();
    }
    ;

constraint_name_definition:  // qlpList
    SQL_TOK_CONSTRAINT constraint_name
    {
        STL_PARSER_CONSTRAINT_NAME_DEFINITION____();
    }
    ;

constraint_name:  // qlpList
    schema_qualified_name
    {
        STL_PARSER_CONSTRAINT_NAME____();
    }
    ;

constraint_characteristics:
    constraint_characteristic
    {
        STL_PARSER_CONSTRAINT_CHARACTERISTIC____FIRST();
    }
    |
    constraint_characteristics
    constraint_characteristic
    {
        STL_PARSER_CONSTRAINT_CHARACTERISTIC____NEXT();
    }
    ;

constraint_characteristic: // qlpValue : integer : qlpConstraintAttrType
    constraint_check_time
    {
        STL_PARSER_CONSTRAINT_CHARACTERISTICS____CHECKTIME();
    }
    | SQL_TOK_DEFERRABLE
    {
        STL_PARSER_CONSTRAINT_CHARACTERISTICS____DEFERRABLE();
    }
    | SQL_TOK_NOT_DEFERRABLE
    {
        STL_PARSER_CONSTRAINT_CHARACTERISTICS____NOT_DEFERRABLE();
    }
    // | constraint_enforcement
    // {
    //     STL_PARSER_CONSTRAINT_CHARACTERISTICS____ENFORCEMENT();
    // }
    ;

constraint_check_time:  // qlpValue : integer
    SQL_TOK_INITIALLY SQL_TOK_DEFERRED
    {
        STL_PARSER_CONSTRAINT_CHECK_TIME____INIT_DEFERRED();
    }
    | SQL_TOK_INITIALLY SQL_TOK_IMMEDIATE
    {
        STL_PARSER_CONSTRAINT_CHECK_TIME____INIT_IMMEDIATE();
    }
    ;

// constraint_enforcement:  // qlpList : qlpValue : integer
//     SQL_TOK_ENFORCED
//     {
//         STL_PARSER_CONSTRAINT_ENFORCEMENT____ENFORCED();
//     }
//     |
//     SQL_TOK_ENABLE
//     {
//         STL_PARSER_CONSTRAINT_ENFORCEMENT____ENFORCED();
//     }
//     |
//     SQL_TOK_NOT_ENFORCED
//     {
//         STL_PARSER_CONSTRAINT_ENFORCEMENT____NOT_ENFORCED();
//     }
//     |
//     SQL_TOK_DISABLE
//     {
//         STL_PARSER_CONSTRAINT_ENFORCEMENT____NOT_ENFORCED();
//     }
    // |
    // SQL_TOK_VALIDATE
    // {
    //     STL_PARSER_CONSTRAINT_ENFORCEMENT____VALIDATE();
    // }
    // |
    // SQL_TOK_NOVALIDATE
    // {
    //     STL_PARSER_CONSTRAINT_ENFORCEMENT____NOVALIDATE();
    // }
    ;

table_constraint:  // qlpConstraint
    unique_constraint_definition
    {
        STL_PARSER_TABLE_CONSTRAINT____UNIQUE();
    }
    |
    referential_constraint_definition
    {
        STL_PARSER_TABLE_CONSTRAINT____FK();
    }
    |
    check_constraint_definition
    {
        STL_PARSER_TABLE_CONSTRAINT____CHECK();
    }
    ;

unique_constraint_definition:  // qlpConstraint
    SQL_TOK_UNIQUE SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_UNIQUE_CONSTRAINT_DEFINITION____UNIQUE();
    }
    |
    SQL_TOK_UNIQUE SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    SQL_TOK_INDEX identifier
    index_tablespace_name
    {
        STL_PARSER_UNIQUE_CONSTRAINT_DEFINITION____UNIQUE_INDEX_OPTION();
    }
    |
    SQL_TOK_UNIQUE SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    SQL_TOK_INDEX identifier
    index_attribute_list
    index_tablespace_name
    {
        STL_PARSER_UNIQUE_CONSTRAINT_DEFINITION____UNIQUE_INDEX_ATTR_OPTION();
    }
    |
    SQL_TOK_PRIMARY SQL_TOK_KEY SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_UNIQUE_CONSTRAINT_DEFINITION____PK();
    }
    |
    SQL_TOK_PRIMARY SQL_TOK_KEY SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    SQL_TOK_INDEX identifier
    index_tablespace_name
    {
        STL_PARSER_UNIQUE_CONSTRAINT_DEFINITION____PK_INDEX_OPTION();
    }
    |
    SQL_TOK_PRIMARY SQL_TOK_KEY SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    SQL_TOK_INDEX identifier
    index_attribute_list
    index_tablespace_name
    {
        STL_PARSER_UNIQUE_CONSTRAINT_DEFINITION____PK_INDEX_ATTR_OPTION();
    }
    ;

index_tablespace_name:  // str
/* empty */
    {
        STL_PARSER_INDEX_TABLESPACE_NAME____DEFAULT_TBS();
    }
    | SQL_TOK_TABLESPACE identifier // tablespace_name
    {
        STL_PARSER_INDEX_TABLESPACE_NAME____TBS_NAME();
    }
    ;

key_column_list:  // qlpList
    index_column_list
    {
        STL_PARSER_KEY_COLUMN_LIST____();
    }
    ;

unique_column_list:  // qlpList
    column_name_list
    {
        STL_PARSER_UNIQUE_COLUMN_LIST____();
    }
    ;

referential_constraint_definition:  // qlpConstraint
    SQL_TOK_FOREIGN SQL_TOK_KEY SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    references_specification
    {
        STL_PARSER_REFERENTIAL_CONSTRAINT_DEFINITION____();
    }
    |
    SQL_TOK_FOREIGN SQL_TOK_KEY SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    references_specification
    SQL_TOK_INDEX identifier
    index_tablespace_name
    {
        STL_PARSER_REFERENTIAL_CONSTRAINT_DEFINITION____INDEX_OPTION();
    }
    |
    SQL_TOK_FOREIGN SQL_TOK_KEY SQL_TOK_LEFT_PAREN key_column_list SQL_TOK_RIGHT_PAREN
    references_specification
    SQL_TOK_INDEX identifier
    index_attribute_list
    index_tablespace_name
    {
        STL_PARSER_REFERENTIAL_CONSTRAINT_DEFINITION____INDEX_ATTR_OPTION();
    }
;

reference_column_list:  // qlpList
    column_name_list
    {
        STL_PARSER_REFERENCE_COLUMN_LIST____();
    }
    ;

column_definition:  // qlpColumnDef
/*    column_name
    {*/
        /* cannot build column info */
/*        STL_PARSER_NOT_SUPPORT();
    }
    |*/ column_name date_type_or_domain_name
    {
        STL_PARSER_COLUMN_DEFINITION____NAME_TYPE();
    }
    // | column_name
    // column_definition_second_clause
    // {
    //     STL_PARSER_COLUMN_DEFINITION____NAME_DEFINITION();
    // }
    // | column_name
    // column_constraint_definitions
    // {
    //     STL_PARSER_COLUMN_DEFINITION____NAME_CONSTRAINT();
    // }
    // | column_name
    // collate_clause
    // {
    //     /* not support collate clause */
    //     STL_PARSER_NOT_SUPPORT();
    // }
    | column_name date_type_or_domain_name
    column_definition_second_clause
    {
        STL_PARSER_COLUMN_DEFINITION____NAME_TYPE_DEFINITION();
    }
    | column_name date_type_or_domain_name
    column_constraint_definitions
    {
        STL_PARSER_COLUMN_DEFINITION____NAME_TYPE_CONSTRAINT();
    }
    // | column_name
    // column_constraint_definitions
    // column_definition_second_clause
    // {
    //     STL_PARSER_COLUMN_DEFINITION____NAME_CONSTRAINT_DEFINITION();
    // }
    | column_name date_type_or_domain_name
    collate_clause
    {
        /* not support collate clause */
        STL_PARSER_NOT_SUPPORT( a3 );
    }
    // | column_name
    // column_definition_second_clause
    // collate_clause
    // {
    //     /* not support collate clause */
    //     STL_PARSER_NOT_SUPPORT();
    // }
    // | column_name
    // column_constraint_definitions collate_clause
    // {
    //     /* not support collate clause */
    //     STL_PARSER_NOT_SUPPORT();
    // }
    | column_name date_type_or_domain_name
    column_definition_second_clause
    collate_clause
    {
        /* not support collate clause */
        STL_PARSER_NOT_SUPPORT( a4 );
    }
    | column_name date_type_or_domain_name
    column_constraint_definitions collate_clause
    {
        /* not support collate clause */
        STL_PARSER_NOT_SUPPORT( a4 );
    }
    |
    column_name date_type_or_domain_name
    column_constraint_definitions
    column_definition_second_clause
    {
        STL_PARSER_COLUMN_DEFINITION____NAME_TYPE_CONSTRAINT_DEFINITION();
    }
    |
    column_name date_type_or_domain_name
    column_definition_second_clause
    column_constraint_definitions
    {
        STL_PARSER_COLUMN_DEFINITION____NAME_TYPE_DEFINITION_CONSTRAINT();
    }
    | column_name date_type_or_domain_name
    column_constraint_definitions
    column_definition_second_clause
    collate_clause
    {
        /* not support collate clause */
        STL_PARSER_NOT_SUPPORT( a5 );
    }
    ;

date_type_or_domain_name:  // qlpTypeName
    data_type
    {
        STL_PARSER_DATE_TYPE_OR_DOMAIN_NAME____TYPE();
    }
    // | domain_name
    // {
    // }
    ;

column_definition_second_clause:  // qlpColDefSecond
    default_clause
    {
        STL_PARSER_COLUMN_DEFINITION_SECOND_CLAUSE____DEFAULT();
    }
    | identity_column_specification
    {
        STL_PARSER_COLUMN_DEFINITION_SECOND_CLAUSE____IDENTITY();
    }
    // | generation_clause
    // {
    //     STL_PARSER_COLUMN_DEFINITION_SECOND_CLAUSE____GENERATION();
    // }
    // | system_version_start_column_specification
    // {
    // }
    // | system_version_end_column_specification
    // {
    // }
    ;

column_constraint_definitions:  // qlpList
    column_constraint_definition
    {
        STL_PARSER_COLUMN_CONSTRAINT_DEFINITIONS____CONSTRAINT();
    }
    |
    column_constraint_definitions
    column_constraint_definition
    {
        STL_PARSER_COLUMN_CONSTRAINT_DEFINITIONS____CONSTRAINT_LIST();
    }
    ;

column_constraint_definition:  // qlpConstraintAttr
    column_constraint
    {
        STL_PARSER_COLUMN_CONSTRAINT_DEFINITION____CONSTRAINT();
    }
    |
    constraint_name_definition column_constraint
    {
        STL_PARSER_COLUMN_CONSTRAINT_DEFINITION____NAME_CONSTRAINT();
    }
    |
    column_constraint constraint_characteristics
    {
        STL_PARSER_COLUMN_CONSTRAINT_DEFINITION____CONSTRAINT_WITH_CONSTARINT_CHARACTERISTICS();
    }
    |
    constraint_name_definition column_constraint constraint_characteristics
    {
        STL_PARSER_COLUMN_CONSTRAINT_DEFINITION____NAME_CONSTRAINT_WITH_CONSTARINT_CHARACTERISTICS();
    }
    ;

column_constraint:  // qlpConstraint
    SQL_TOK_NULL
    {
        STL_PARSER_COLUMN_CONSTRAINT____NULL();
    }
    |
    SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_COLUMN_CONSTRAINT____NOT_NULL();
    }
    |
    SQL_TOK_PRIMARY SQL_TOK_KEY
    {
        STL_PARSER_COLUMN_CONSTRAINT____PRIMARY_KEY();
    }
    |
    SQL_TOK_PRIMARY SQL_TOK_KEY
    SQL_TOK_INDEX identifier
    index_tablespace_name
    {
        STL_PARSER_COLUMN_CONSTRAINT____PRIMARY_KEY_INDEX_OPTION();
    }
    |
    SQL_TOK_PRIMARY SQL_TOK_KEY
    SQL_TOK_INDEX identifier
    index_attribute_list
    index_tablespace_name
    {
        STL_PARSER_COLUMN_CONSTRAINT____PRIMARY_KEY_INDEX_ATTR_OPTION();
    }
    |
    SQL_TOK_UNIQUE
    {
        STL_PARSER_COLUMN_CONSTRAINT____UNIQUE();
    }
    |
    SQL_TOK_UNIQUE
    SQL_TOK_INDEX identifier
    index_tablespace_name
    {
        STL_PARSER_COLUMN_CONSTRAINT____UNIQUE_INDEX_OPTION();
    }
    |
    SQL_TOK_UNIQUE
    SQL_TOK_INDEX identifier
    index_attribute_list
    index_tablespace_name
    {
        STL_PARSER_COLUMN_CONSTRAINT____UNIQUE_INDEX_ATTR_OPTION();
    }
    | references_specification
    {
        STL_PARSER_COLUMN_CONSTRAINT____FK();
    }
    | references_specification SQL_TOK_INDEX identifier
    {
        STL_PARSER_COLUMN_CONSTRAINT____FK_INDEX();
    }
    | check_constraint_definition
    {
        STL_PARSER_COLUMN_CONSTRAINT____CHECK();
    }
    ;


references_specification:  // qlpConstraint
    SQL_TOK_REFERENCES
    identifier_chain // table_name
    referenced_columns  // referenced_table_and_columns
    {
        STL_PARSER_REFERENCES_SPECIFICATION____TABLE_COLUMNS();
    }
    | SQL_TOK_REFERENCES
    identifier_chain // table_name
    referenced_columns  // referenced_table_and_columns
    SQL_TOK_MATCH match_type
    {
        /* not support MATCH or Trigger */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_REFERENCES
    identifier_chain // table_name
    referenced_columns  // referenced_table_and_columns
    referential_triggered_action
    {
        /* not support MATCH or Trigger */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_REFERENCES
    identifier_chain // table_name
    referenced_columns  // referenced_table_and_columns
    SQL_TOK_MATCH match_type referential_triggered_action
    {
        /* not support MATCH or Trigger */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

referenced_columns:  // qlpList
    /* empty */
    {
        STL_PARSER_REFERENCED_COLUMNS____EMPTY();
    }
    | SQL_TOK_LEFT_PAREN reference_column_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_REFERENCED_COLUMNS____COLUMNS();
    }

// referenced_table_and_columns:
//     table_name
//     {
//     }
//     | table_name
//     SQL_TOK_LEFT_PAREN refernce_column_list SQL_TOK_RIGHT_PAREN
//     {
//     }
//     ;


match_type:  // qlpValue : integer : qlpFKMatchType
    SQL_TOK_FULL
    {
        STL_PARSER_MATCH_TYPE____FULL();
    }
    | SQL_TOK_PARTIAL
    {
        STL_PARSER_MATCH_TYPE____PARTIAL();
    }
    | SQL_TOK_SIMPLE
    {
        STL_PARSER_MATCH_TYPE____SIMPLE();
    }
    ;

referential_triggered_action:  // stlRefTriggerAction
    update_rule
    {
        STL_PARSER_REFERENTIAL_TRIGGERED_ACTION____UPDATE();
    }
    | update_rule delete_rule
    {
        STL_PARSER_REFERENTIAL_TRIGGERED_ACTION____UPDATE_DELETE();
    }
    | delete_rule
    {
        STL_PARSER_REFERENTIAL_TRIGGERED_ACTION____DELETE();
    }
    | delete_rule update_rule
    {
        STL_PARSER_REFERENTIAL_TRIGGERED_ACTION____DELETE_UPDATE();
    }
    ;

update_rule:  // qlpValue : integer : qlpFKAction
    SQL_TOK_UPDATE referential_action
    {
        STL_PARSER_UPDATE_RULE____();
    }
    ;

delete_rule:  // qlpValue : integer : qlpFKAction
    SQL_TOK_DELETE referential_action
    {
        STL_PARSER_DELETE_RULE____();
    }
    ;

referential_action:  // qlpValue : integer : qlpFKAction
    SQL_TOK_CASCADE
    {
        STL_PARSER_REFERENTIAL_ACTION____CASCADE();
    }
    | SQL_TOK_SET SQL_TOK_NULL
    {
        STL_PARSER_REFERENTIAL_ACTION____SET_NULL();
    }
    | SQL_TOK_SET SQL_TOK_DEFAULT
    {
        STL_PARSER_REFERENTIAL_ACTION____SET_DEFAULT();
    }
    | SQL_TOK_RESTRICT
    {
        STL_PARSER_REFERENTIAL_ACTION____RESTRICT();
    }
    | SQL_TOK_NO SQL_TOK_ACTION
    {
        STL_PARSER_REFERENTIAL_ACTION____NO_ACTION();
    }
    ;

check_constraint_definition:  // qlpConstraint
    SQL_TOK_CHECK SQL_TOK_LEFT_PAREN value_expression // boolean_value_expression  // search_condition
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHECK_CONSTRAINT_DEFINITION____();
    }
    ;


collate_clause:  // qlpList
    SQL_TOK_COLLATE collate_name
    {
        /* not support collate clause */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

collate_name:  // qlpList
    schema_qualified_name
    {
        /* not support collate clause */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

schema_qualified_name:  // qlpList
    identifier_chain // scheme_name SQL_TOK_PERIOD qualified_identifier
    {
        STL_PARSER_SCHEMA_QUALIFIED_NAME____();
    }
    ;

default_clause:  // qlpColDefSecond
    SQL_TOK_DEFAULT default_option
    {
        STL_PARSER_DEFAULT_CLAUSE____();
    }
    ;

default_option:  // qlpNode
    value_predicate_2 
    {
        STL_PARSER_DEFAULT_OPTION____VALUE_EXPR();
    }
    ;

identity_column_specification:  // qlpColDefSecond
    SQL_TOK_GENERATED SQL_TOK_ALWAYS SQL_TOK_AS SQL_TOK_IDENTITY
    {
        STL_PARSER_IDENTITY_COLUMN_SPECIFICATION____ALWAYS();
    }
    | SQL_TOK_GENERATED SQL_TOK_BY SQL_TOK_DEFAULT SQL_TOK_AS SQL_TOK_IDENTITY
    {
        STL_PARSER_IDENTITY_COLUMN_SPECIFICATION____BY_DEFAULT();
    }
    | SQL_TOK_GENERATED SQL_TOK_ALWAYS SQL_TOK_AS SQL_TOK_IDENTITY
    SQL_TOK_LEFT_PAREN common_sequence_generator_options SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_IDENTITY_COLUMN_SPECIFICATION____ALWAYS_SEQUENCE();
    }
    | SQL_TOK_GENERATED SQL_TOK_BY SQL_TOK_DEFAULT SQL_TOK_AS SQL_TOK_IDENTITY
    SQL_TOK_LEFT_PAREN common_sequence_generator_options SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_IDENTITY_COLUMN_SPECIFICATION____BY_DEFAULT_SEQUENCE();
    }
    ;

// generation_clause:  // qlpColDefSecond
//     SQL_TOK_GENERATED SQL_TOK_ALWAYS // generation_rule
//     SQL_TOK_AS
//     SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN // generation_expression
//     {
//         STL_PARSER_GENERATION_CLAUSE____();
//     }
//     ;

// generation_clause:
//     generation_rule SQL_TOK_AS generation_expression
//     {
//     }
//     ;

// generation_rule:
//     SQL_TOK_GENERATED SQL_TOK_ALWAYS
//     {
//     }
//     ;

// generation_expression:
//     SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
//     {
//     }
//     ;

common_sequence_generator_options:  // qlpList : qlpDefElem
    common_sequence_generator_option
    {
        STL_PARSER_COMMON_SEQUENCE_GENERATOR_OPTIONS____OPTION();
    }
    | common_sequence_generator_options common_sequence_generator_option
    {
        STL_PARSER_COMMON_SEQUENCE_GENERATOR_OPTIONS____OPTION_LIST();
    }
    ;

common_sequence_generator_option:  // qlpDefElem
    sequence_generator_start_with_option
    {
        STL_PARSER_COMMON_SEQUENCE_GENERATOR_OPTION____START_WITH();
    }
    | basic_sequence_generator_option
    {
        STL_PARSER_COMMON_SEQUENCE_GENERATOR_OPTION____SEQUENCE();
    }
    ;

sequence_generator_start_with_option:  // qlpDefElem
    SQL_TOK_START SQL_TOK_WITH sequence_generator_start_value
    {
        STL_PARSER_SEQUENCE_GENERATOR_START_WITH_OPTION____();
    }
    ;

sequence_generator_start_value:  // qlpValue : float
    signed_numeric_literal
    {
        STL_PARSER_SEQUENCE_GENERATOR_START_VALUE____();
    }
    ;

basic_sequence_generator_option:  // qlpDefElem
    sequence_generator_increment_by_option
    {
        STL_PARSER_BASIC_SEQUENCE_GENERATOR_OPTION____INCREMENT();
    }
    | sequence_generator_maxvalue_option
    {
        STL_PARSER_BASIC_SEQUENCE_GENERATOR_OPTION____MAXVALUE();
    }
    | sequence_generator_minvalue_option
    {
        STL_PARSER_BASIC_SEQUENCE_GENERATOR_OPTION____MINVALUE();
    }
    | sequence_generator_cycle_option
    {
        STL_PARSER_BASIC_SEQUENCE_GENERATOR_OPTION____CYCLE();
    }
    | sequence_generator_cache_option  // only gsql
    {
        STL_PARSER_BASIC_SEQUENCE_GENERATOR_OPTION____CACHE();
    }
    ;

sequence_generator_increment_by_option:  // qlpDefElem
    SQL_TOK_INCREMENT SQL_TOK_BY sequence_generator_increment
    {
        STL_PARSER_SEQUENCE_GENERATOR_INCREMENT_BY_OPTION____();
    }
    ;

sequence_generator_increment:  // qlpValue : float
    signed_numeric_literal
    {
        STL_PARSER_SEQUENCE_GENERATOR_INCREMENT____();
    }
    ;

sequence_generator_maxvalue_option:  // qlpDefElem
    SQL_TOK_MAXVALUE sequence_generator_max_value
    {
        STL_PARSER_SEQUENCE_GENERATOR_MAXVALUE_OPTION____MAXVALUE();
    }
    | SQL_TOK_NO SQL_TOK_MAXVALUE
    {
        STL_PARSER_SEQUENCE_GENERATOR_MAXVALUE_OPTION____NO_MAXVALUE();
    }
    | SQL_TOK_NOMAXVALUE
    {
        STL_PARSER_SEQUENCE_GENERATOR_MAXVALUE_OPTION____NOMAXVALUE();
    }
    ;

sequence_generator_max_value:  // qlpValue : float
    signed_numeric_literal
    {
        STL_PARSER_SEQUENCE_GENERATOR_MAX_VALUE____();
    }
    ;

sequence_generator_minvalue_option:  // qlpDefElem
    SQL_TOK_MINVALUE sequence_generator_min_value
    {
        STL_PARSER_SEQUENCE_GENERATOR_MINVALUE_OPTION____MINVALUE();
    }
    | SQL_TOK_NO SQL_TOK_MINVALUE
    {
        STL_PARSER_SEQUENCE_GENERATOR_MINVALUE_OPTION____NO_MINVALUE();
    }
    | SQL_TOK_NOMINVALUE
    {
        STL_PARSER_SEQUENCE_GENERATOR_MINVALUE_OPTION____NOMINVALUE();
    };

sequence_generator_min_value:  // qlpValue : float
    signed_numeric_literal
    {
        STL_PARSER_SEQUENCE_GENERATOR_MIN_VALUE____();
    }
    ;

sequence_generator_cycle_option:  // qlpDefElem
    SQL_TOK_CYCLE
    {
        STL_PARSER_SEQUENCE_GENERATOR_CYCLE_OPTION____CYCLE();
    }
    | SQL_TOK_NO SQL_TOK_CYCLE
    {
        STL_PARSER_SEQUENCE_GENERATOR_CYCLE_OPTION____NO_CYCLE();
    }
    | SQL_TOK_NOCYCLE
    {
        STL_PARSER_SEQUENCE_GENERATOR_CYCLE_OPTION____NOCYCLE();
    }
    ;

sequence_generator_cache_option:  // qlpDefElem
    SQL_TOK_CACHE sequence_generator_cache_value
    {
        STL_PARSER_SEQUENCE_GENERATOR_CACHE_OPTION____CACHE();
    }
    | SQL_TOK_NO SQL_TOK_CACHE
    {
        STL_PARSER_SEQUENCE_GENERATOR_CACHE_OPTION____NO_CACHE();
    }
    | SQL_TOK_NOCACHE
    {
        STL_PARSER_SEQUENCE_GENERATOR_CACHE_OPTION____NOCACHE();
    }
    ;

sequence_generator_cache_value:  // qlpValue : float
    signed_numeric_literal
    {
        STL_PARSER_SEQUENCE_GENERATOR_CACHE_VALUE____();
    }
    ;


/*
 * TRUNCATE STATEMENT
 */

truncate_table_statement:
    SQL_TOK_TRUNCATE SQL_TOK_TABLE identifier_chain // table_name
    identity_column_restart_option
    drop_storage_option
    {
        STL_PARSER_TRUNCATE_TABLE_STATEMENT();
    }
    ;

identity_column_restart_option:
    /*
     * empty
     */
    {
        STL_PARSER_IDENTITY_COLUMN_RESTART_OPTION____EMPTY();
    }
    |
    SQL_TOK_CONTINUE SQL_TOK_IDENTITY
    {
        STL_PARSER_IDENTITY_COLUMN_RESTART_OPTION____CONTINUE();
    }
    | SQL_TOK_RESTART SQL_TOK_IDENTITY
    {
        STL_PARSER_IDENTITY_COLUMN_RESTART_OPTION____RESTART();
    }
    ;

drop_storage_option:
    /*
     * empty
     */
    {
        STL_PARSER_DROP_STORAGE_OPTION____EMPTY();
    }
    |
    SQL_TOK_DROP SQL_TOK_STORAGE
    {
        STL_PARSER_DROP_STORAGE_OPTION____DROP();
    }
    |
    SQL_TOK_DROP SQL_TOK_ALL SQL_TOK_STORAGE
    {
        STL_PARSER_DROP_STORAGE_OPTION____DROP_ALL();
    }
    |
    SQL_TOK_REUSE SQL_TOK_STORAGE
    {
        STL_PARSER_DROP_STORAGE_OPTION____REUSE();
    }
    ;

/*
 * VIEW DEFINITION
 */

view_definition:
    SQL_TOK_CREATE or_replace_option force_option
    SQL_TOK_VIEW identifier_chain
    view_column_list
    SQL_TOK_AS query_expression
    {
        STL_PARSER_VIEW_DEFINITION____BASIC();
    }
    ;    

or_replace_option:
    /*
     * empty
     */
    {
        STL_PARSER_OR_REPLACE_OPTION____NO_REPLACE();
    }
    |
    SQL_TOK_OR SQL_TOK_REPLACE
    {
        STL_PARSER_OR_REPLACE_OPTION____REPLACE();
    }
    ;

force_option:
    /*
     * empty
     */
    {
        STL_PARSER_FORCE_OPTION____NO_FORCE();
    }
    |
    SQL_TOK_NO SQL_TOK_FORCE
    {
        STL_PARSER_FORCE_OPTION____NO_FORCE();
    }
    |
    SQL_TOK_FORCE
    {
        STL_PARSER_FORCE_OPTION____FORCE();
    }
    ;

view_column_list:
    /*
     * empty
     */
    {
        STL_PARSER_VIEW_COLUMN_LIST____EMPTY();
    }
    |
    SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_VIEW_COLUMN_LIST____NOT_EMPTY();
    }
    ;

/*
 * DROP VIEW
 */

drop_view_statement:
    SQL_TOK_DROP SQL_TOK_VIEW drop_if_exists_option
    identifier_chain 
    {
        STL_PARSER_DROP_VIEW_STATEMENT();
    }
    ;

/*
 * ALTER VIEW
 */

alter_view_statement:
    SQL_TOK_ALTER SQL_TOK_VIEW identifier_chain
    alter_view_action
    {
        STL_PARSER_ALTER_VIEW_STATEMENT();
    }
    ;

alter_view_action:
    SQL_TOK_COMPILE
    {
        STL_PARSER_ALTER_VIEW_ACTION____COMPILE();
    }
    ;

/*
 * SEQUENCE DEFINITION
 */

sequence_definition:
    SQL_TOK_CREATE SQL_TOK_SEQUENCE identifier_chain // sequence_name
    {
        STL_PARSER_SEQUENCE_DEFINITION____NO_OPTION();
    }
    | SQL_TOK_CREATE SQL_TOK_SEQUENCE identifier_chain // sequence_name
    common_sequence_generator_options  // sequence_generator_options
    {
        STL_PARSER_SEQUENCE_DEFINITION____WITH_OPTION();
    }
    ;

// sequence_generator_options:
//     sequence_generator_option
//     {
//         STL_PARSER_SEQUENCE_GENERATOR_OPTIONS____OPTION();
//     }
//     | sequence_generator_options sequence_generator_option
//     {
//         STL_PARSER_SEQUENCE_GENERATOR_OPTIONS____OPTION_LIST();
//     }
//     ;

// sequence_generator_option:
//     // sequence_generator_data_type_option
//     // {
//     //     STL_PARSER_SEQUENCE_GENERATOR_OPTION____DATA_TYPE();
//     // }
//     // |
//     common_sequence_generator_options
//     {
//         STL_PARSER_SEQUENCE_GENERATOR_OPTION____COMMON();
//     }
//     ;

// sequence_generator_data_type_option:
//     SQL_TOK_AS data_type
//     {
//         STL_PARSER_SEQUENCE_GENERATOR_DATA_TYPE_OPTION____();
//     }
//     ;


/*
 * DROP SEQUENCE
 */

drop_sequence_statement:
    SQL_TOK_DROP SQL_TOK_SEQUENCE drop_if_exists_option
    identifier_chain // sequence_name
    {
        STL_PARSER_DROP_SEQUENCE_STATEMENT();
    }
    ;

/*
 * ALTER SEQUENCE
 */

alter_sequence_statement:
    SQL_TOK_ALTER SQL_TOK_SEQUENCE identifier_chain
    alter_sequence_generator_options
    {
        STL_PARSER_ALTER_SEQUENCE_STATEMENT();
    }
    ;

alter_sequence_generator_options:  // qlpList : qlpDefElem
    alter_sequence_generator_option
    {
        STL_PARSER_ALTER_SEQUENCE_GENERATOR_OPTIONS____OPTION();
    }
    | alter_sequence_generator_options alter_sequence_generator_option
    {
        STL_PARSER_ALTER_SEQUENCE_GENERATOR_OPTIONS____OPTION_LIST();
    }
    ;

alter_sequence_generator_option:  // qlpDefElem
    alter_sequence_generator_restart_option
    {
        STL_PARSER_ALTER_SEQUENCE_GENERATOR_OPTION____RESTART();
    }
    | basic_sequence_generator_option
    {
        STL_PARSER_ALTER_SEQUENCE_GENERATOR_OPTION____BASIC();
    }
    ;

alter_sequence_generator_restart_option:
    SQL_TOK_RESTART
    {
        STL_PARSER_ALTER_SEQUENCE_RESTART____RESTART_NO_VALUE();
    }
    |
    SQL_TOK_RESTART SQL_TOK_WITH sequence_generator_start_value
    {
        STL_PARSER_ALTER_SEQUENCE_RESTART____RESTRAT_WITH_VALUE();
    }
    ;

/*
 * SYNONYM DEFINITION 
 */

synonym_definition:
    SQL_TOK_CREATE or_replace_option SQL_TOK_SYNONYM
    identifier_chain             // synonym name
    SQL_TOK_FOR identifier_chain // base object name
    {
        STL_PARSER_SYNONYM_DEFINITION____PRIVATE();
    }
    |
    SQL_TOK_CREATE or_replace_option SQL_TOK_PUBLIC SQL_TOK_SYNONYM
    identifier             // synonym name
    SQL_TOK_FOR identifier_chain // base object name
    {
        STL_PARSER_SYNONYM_DEFINITION____PUBLIC();
    }
    ;


/*
 * DROP SYNONYM
 */

drop_synonym_statement:
    SQL_TOK_DROP SQL_TOK_SYNONYM drop_if_exists_option
    identifier_chain     // synonym name
    {
        STL_PARSER_DROP_SYNONYM_STATEMENT____PRIVATE();
    }
    |
    SQL_TOK_DROP SQL_TOK_PUBLIC SQL_TOK_SYNONYM drop_if_exists_option
    identifier          // synonym name
    {
        STL_PARSER_DROP_SYNONYM_STATEMENT____PUBLIC();
    }
    ;

    
/*
 * INDEX DEFINITION
 */

index_definition:  // qlpNode
    SQL_TOK_CREATE index_unique_clause SQL_TOK_INDEX identifier_chain // index_name
    SQL_TOK_ON identifier_chain // table_name
    SQL_TOK_LEFT_PAREN index_column_list SQL_TOK_RIGHT_PAREN
    index_tablespace_name
    {
        STL_PARSER_INDEX_DEFINITION____();
    }
    |
    SQL_TOK_CREATE index_unique_clause SQL_TOK_INDEX identifier_chain // index_name
    SQL_TOK_ON identifier_chain // table_name
    SQL_TOK_LEFT_PAREN index_column_list SQL_TOK_RIGHT_PAREN
    index_attribute_list
    index_tablespace_name
    {
        STL_PARSER_INDEX_DEFINITION____ATTR_TBS_NAME();
    }
    ;

index_attribute_list:   // qlpList
    index_attribute_types
    {
        STL_PARSER_INDEX_ATTRIBUTE_LIST____ATTR();
    }
    | index_attribute_list index_attribute_types
    {
        STL_PARSER_INDEX_ATTRIBUTE_LIST____ATTR_LIST();
    }
    ;

index_attribute_types:
    segment_attribute_types
    {
        STL_PARSER_INDEX_ATTRIBUTE_TYPES____SEGMENT();
    }
    | index_physical_attribute_type
    {
        STL_PARSER_INDEX_ATTRIBUTE_TYPES____PHYSICAL();
    }
    | index_logging_attribute_type
    {
        STL_PARSER_INDEX_ATTRIBUTE_TYPES____LOGGING();
    }
    | index_parallel_attribute_type
    {
        STL_PARSER_INDEX_ATTRIBUTE_TYPES____PARALLEL();
    }
    ;


index_physical_attribute_type:
    SQL_TOK_INITRANS SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_INDEX_PHYSICAL_ATTRIBUTE_TYPE____INITRANS();
    }
    | SQL_TOK_MAXTRANS SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_INDEX_PHYSICAL_ATTRIBUTE_TYPE____MAXTRANS();
    }
    | SQL_TOK_PCTFREE SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_INDEX_PHYSICAL_ATTRIBUTE_TYPE____PCTFREE();
    }
    ;

index_logging_attribute_type:
    SQL_TOK_LOGGING
    {
        STL_PARSER_INDEX_LOGGING_ATTRIBUTE_TYPE____LOGGING();
    }
    |
    SQL_TOK_NOLOGGING
    {
        STL_PARSER_INDEX_LOGGING_ATTRIBUTE_TYPE____NOLOGGING();
    }
    ;

index_parallel_attribute_type:
    SQL_TOK_NOPARALLEL
    {
        STL_PARSER_INDEX_PARALLEL_ATTRIBUTE_TYPE____NOPARALLEL();
    }
    |
    SQL_TOK_PARALLEL
    {
        STL_PARSER_INDEX_PARALLEL_ATTRIBUTE_TYPE____PARALLEL_EMPTY();
    }
    |
    SQL_TOK_PARALLEL SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_INDEX_PARALLEL_ATTRIBUTE_TYPE____PARALLEL_INTEGER();
    }
    ;

index_unique_clause:  // qlpValue : integer
/* empty */
    {
        STL_PARSER_INDEX_UNIQUE_CLAUSE____NOT_UNIQUE();
    }
    | SQL_TOK_UNIQUE
    {
        STL_PARSER_INDEX_UNIQUE_CLAUSE____UNIQUE();
    }
    ;

index_column_list:  // qlpList : qlpIndexElement
    index_column_clause
    {
        STL_PARSER_INDEX_COLUMN_LIST____COLUMN();
    }
    | index_column_list SQL_TOK_COMMA index_column_clause
    {
        STL_PARSER_INDEX_COLUMN_LIST____COLUMN_LIST();
    }
    ;

index_column_clause:  // qlpIndexElement
    column_name
    {
        STL_PARSER_INDEX_COLUMN_CLAUSE____NAME();
    }
    | column_name sort_order_clause
    {
        STL_PARSER_INDEX_COLUMN_CLAUSE____NAME_SORT();
    }
    | column_name nulls_order_clause
    {
        STL_PARSER_INDEX_COLUMN_CLAUSE____NAME_NULLS();
    }
    | column_name sort_order_clause nulls_order_clause
    {
        STL_PARSER_INDEX_COLUMN_CLAUSE____NAME_SORT_NULLS();
    }
    ;

sort_order_clause:
    SQL_TOK_ASC
    {
        STL_PARSER_SORT_ORDER_CLAUSE____ASC();
    }
    | SQL_TOK_DESC
    {
        STL_PARSER_SORT_ORDER_CLAUSE____DESC();
    }
    ;

nulls_order_clause:
    SQL_TOK_NULLS SQL_TOK_FIRST
    {
        STL_PARSER_NULLS_ORDER_CLAUSE____FIRST();
    }
    | SQL_TOK_NULLS SQL_TOK_LAST
    {
        STL_PARSER_NULLS_ORDER_CLAUSE____LAST();
    }
    ;

drop_if_exists_option:
    /*
     * empty
     */
    {
        STL_PARSER_DROP_IF_EXISTS____EMPTY();
    }
    |
    SQL_TOK_IF SQL_TOK_EXISTS
    {
        STL_PARSER_DROP_IF_EXISTS____EXISTS();
    }
    ;

/*
 * DROP INDEX STATEMENT
 */

drop_index_statement:
    SQL_TOK_DROP SQL_TOK_INDEX drop_if_exists_option
    identifier_chain // index_name
    {
        STL_PARSER_DROP_INDEX_STATEMENT();
    }
    ;


/*
 * DROP TABLE STATEMENT
 */

drop_table_statement:
    SQL_TOK_DROP SQL_TOK_TABLE drop_if_exists_option
    identifier_chain // table_name
    drop_behavior
    {
        STL_PARSER_DROP_TABLE_STATEMENT();
    }
    ;

drop_behavior:
    /* empty */
    {
        STL_PARSER_DROP_BEHAVIOR____EMPTY();
    }
    | SQL_TOK_RESTRICT 
    {
        STL_PARSER_DROP_BEHAVIOR____EMPTY();
    }
    | SQL_TOK_CASCADE
    {
        STL_PARSER_DROP_BEHAVIOR____CASCADE();
    }
    | SQL_TOK_CASCADE SQL_TOK_CONSTRAINTS
    {
        STL_PARSER_DROP_BEHAVIOR____CASCADE();
    }
    ;

/*
 * ALTER TABLE STATEMENT
 */

alter_table_statement:
    alter_table_add_column_definition
    {
        STL_PARSER_ALTER_TABLE____ADD_COLUMN();
    }
    |
    alter_table_drop_column_definition
    {
        STL_PARSER_ALTER_TABLE____DROP_COLUMN();
    }
    |
    alter_table_alter_column_definition
    {
        STL_PARSER_ALTER_TABLE____ALTER_COLUMN();
    }
    |
    alter_table_rename_column_clause
    {
        STL_PARSER_ALTER_TABLE____RENAME_COLUMN();
    }
    |
    alter_table_add_constraint_definition
    {
        STL_PARSER_ALTER_TABLE____ADD_CONSTRAINT();
    }
    |
    alter_table_drop_constraint_definition
    {
        STL_PARSER_ALTER_TABLE____DROP_CONSTRAINT();
    }
    |
    alter_table_alter_constraint_definition
    {
        STL_PARSER_ALTER_TABLE____ALTER_CONSTRAINT();
    }
    // |
    // alter_table_rename_constraint_clause
    // {
    //     STL_PARSER_ALTER_TABLE____RENAME_CONSTRAINT();
    // }
    |
    alter_table_physical_attribute_clause
    {
        STL_PARSER_ALTER_TABLE____ALTER_PHYSICAL();
    }
    |
    alter_table_add_supplemental_log_clause
    {
        STL_PARSER_ALTER_TABLE____ADD_SUPPLEMENTAL_LOG();
    }
    |
    alter_table_drop_supplemental_log_clause
    {
        STL_PARSER_ALTER_TABLE____DROP_SUPPLEMENTAL_LOG();
    }
    |
    alter_table_rename_table_clause
    {
        STL_PARSER_ALTER_TABLE____RENAME_TABLE();
    }
    ;


alter_table_add_column_definition:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ADD SQL_TOK_COLUMN
    column_definition
    {
        STL_PARSER_ADD_ONE_COLUMN____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ADD
    column_definition
    {
        STL_PARSER_ADD_ONE_COLUMN____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ADD SQL_TOK_COLUMN
    SQL_TOK_LEFT_PAREN add_column_definition_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ADD_MULTI_COLUMN____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ADD
    SQL_TOK_LEFT_PAREN add_column_definition_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ADD_MULTI_COLUMN____WITHOUT_COLUMN();
    }
    ;

add_column_definition_list:  // qlpList
    column_definition
    {
        STL_PARSER_ADD_COLUMN_DEFINITION____ELEMENT();
    }
    | add_column_definition_list SQL_TOK_COMMA column_definition
    {
        STL_PARSER_ADD_COLUMN_DEFINITION____LIST();
    }
    ;

alter_table_drop_column_definition:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_SET SQL_TOK_UNUSED SQL_TOK_COLUMN identifier
    drop_behavior
    {
        STL_PARSER_SET_UNUSED_ONE_COLUMN____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_SET SQL_TOK_UNUSED identifier
    drop_behavior
    {
        STL_PARSER_SET_UNUSED_ONE_COLUMN____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_SET SQL_TOK_UNUSED SQL_TOK_COLUMN
    SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    drop_behavior
    {
        STL_PARSER_SET_UNUSED_MULTI_COLUMN____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_SET SQL_TOK_UNUSED 
    SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    drop_behavior
    {
        STL_PARSER_SET_UNUSED_MULTI_COLUMN____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_DROP SQL_TOK_COLUMN identifier
    drop_behavior
    {
        STL_PARSER_DROP_ONE_COLUMN____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_DROP identifier
    drop_behavior
    {
        STL_PARSER_DROP_ONE_COLUMN____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_DROP SQL_TOK_COLUMN
    SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    drop_behavior
    {
        STL_PARSER_DROP_MULTI_COLUMN____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_DROP 
    SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    drop_behavior
    {
        STL_PARSER_DROP_MULTI_COLUMN____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_DROP SQL_TOK_UNUSED SQL_TOK_COLUMNS
    {
        STL_PARSER_DROP_UNUSED_COLUMNS____();
    }
    ;

alter_table_alter_column_definition:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier SQL_TOK_SET default_clause
    {
        STL_PARSER_ALTER_COLUMN_SET_DEFAULT_CLAUSE____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier SQL_TOK_SET default_clause
    {
        STL_PARSER_ALTER_COLUMN_SET_DEFAULT_CLAUSE____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_DROP SQL_TOK_DEFAULT
    {
        STL_PARSER_ALTER_COLUMN_DROP_DEFAULT_CLAUSE____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier 
    SQL_TOK_DROP SQL_TOK_DEFAULT
    {
        STL_PARSER_ALTER_COLUMN_DROP_DEFAULT_CLAUSE____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_SET SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_ALTER_COLUMN_SET_NOT_NULL_CLAUSE____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier
    SQL_TOK_SET SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_ALTER_COLUMN_SET_NOT_NULL_CLAUSE____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_SET constraint_name_definition SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_ALTER_COLUMN_SET_CONSTRAINT_NOT_NULL_CLAUSE____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier
    SQL_TOK_SET constraint_name_definition SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_ALTER_COLUMN_SET_CONSTRAINT_NOT_NULL_CLAUSE____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_SET SQL_TOK_NOT SQL_TOK_NULL
    constraint_characteristics
    {
        STL_PARSER_ALTER_COLUMN_SET_NOT_NULL_CLAUSE____WITH_COLUMN_WITH_CONST_ATTR();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier
    SQL_TOK_SET SQL_TOK_NOT SQL_TOK_NULL
    constraint_characteristics
    {
        STL_PARSER_ALTER_COLUMN_SET_NOT_NULL_CLAUSE____WITHOUT_COLUMN_WITH_CONST_ATTR();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_SET constraint_name_definition SQL_TOK_NOT SQL_TOK_NULL
    constraint_characteristics
    {
        STL_PARSER_ALTER_COLUMN_SET_CONSTRAINT_NOT_NULL_CLAUSE____WITH_COLUMN_WITH_CONST_ATTR();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier
    SQL_TOK_SET constraint_name_definition SQL_TOK_NOT SQL_TOK_NULL
    constraint_characteristics
    {
        STL_PARSER_ALTER_COLUMN_SET_CONSTRAINT_NOT_NULL_CLAUSE____WITHOUT_COLUMN_WITH_CONST_ATTR();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_DROP SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_ALTER_COLUMN_DROP_NOT_NULL_CLAUSE____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier 
    SQL_TOK_DROP SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_ALTER_COLUMN_DROP_NOT_NULL_CLAUSE____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_SET SQL_TOK_DATA SQL_TOK_TYPE data_type
    {
        STL_PARSER_ALTER_COLUMN_ALTER_DATA_TYPE_CLAUSE____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier 
    SQL_TOK_SET SQL_TOK_DATA SQL_TOK_TYPE data_type
    {
        STL_PARSER_ALTER_COLUMN_ALTER_DATA_TYPE_CLAUSE____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier alter_identity_column_specification
    {
        STL_PARSER_ALTER_COLUMN_ALTER_IDENTITY_SPEC____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier alter_identity_column_specification
    {
        STL_PARSER_ALTER_COLUMN_ALTER_IDENTITY_SPEC____WITHOUT_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER SQL_TOK_COLUMN identifier
    SQL_TOK_DROP SQL_TOK_IDENTITY
    {
        STL_PARSER_ALTER_COLUMN_DROP_IDENTITY____WITH_COLUMN();
    }
    |
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER identifier
    SQL_TOK_DROP SQL_TOK_IDENTITY
    {
        STL_PARSER_ALTER_COLUMN_DROP_IDENTITY____WITHOUT_COLUMN();
    }
    ;

alter_identity_column_specification:
    SQL_TOK_SET SQL_TOK_GENERATED SQL_TOK_ALWAYS
    {
        STL_PARSER_ALTER_IDENTITY____GENERATION_ALWAYS();
    }
    |
    SQL_TOK_SET SQL_TOK_GENERATED SQL_TOK_BY SQL_TOK_DEFAULT
    {
        STL_PARSER_ALTER_IDENTITY____GENERATION_DEFAULT();
    }
    |
    SQL_TOK_SET SQL_TOK_GENERATED SQL_TOK_ALWAYS alter_identity_column_options
    {
        STL_PARSER_ALTER_IDENTITY____GENERATION_ALWAYS_AND_OPTIONS();
    }
    |
    SQL_TOK_SET SQL_TOK_GENERATED SQL_TOK_BY SQL_TOK_DEFAULT alter_identity_column_options
    {
        STL_PARSER_ALTER_IDENTITY____GENERATION_DEFAULT_AND_OPTIONS();
    }
    |
    alter_identity_column_options
    {
        STL_PARSER_ALTER_IDENTITY____OPTIONS();
    }
    ;

alter_identity_column_options:  // qlpList : qlpDefElem
    alter_identity_column_option
    {
        STL_PARSER_ALTER_IDENTITY_COLUMN_OPTIONS____OPTION();
    }
    | alter_identity_column_options alter_identity_column_option
    {
        STL_PARSER_ALTER_IDENTITY_COLUMN_OPTIONS____OPTION_LIST();
    }
    ;

alter_identity_column_option:  // qlpDefElem
    alter_sequence_generator_restart_option
    {
        STL_PARSER_ALTER_IDENTITY_COLUMN_OPTION____RESTART();
    }
    | SQL_TOK_SET basic_sequence_generator_option
    {
        STL_PARSER_ALTER_IDENTITY_COLUMN_OPTION____BASIC_OPTION_WITH_SET();
    }
    | basic_sequence_generator_option
    {
        STL_PARSER_ALTER_IDENTITY_COLUMN_OPTION____BASIC_OPTION();
    }
    ;

alter_table_rename_column_clause:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_RENAME SQL_TOK_COLUMN identifier SQL_TOK_TO identifier
    {
        STL_PARSER_RENAME_COLUMN_CLAUSE();
    }
    ;

alter_table_add_constraint_definition:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ADD table_constraint_definition
    {
        STL_PARSER_ADD_CONSTRAINT_CLAUSE();
    }
    ;

alter_table_drop_constraint_definition:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_DROP drop_constraint_object
    drop_key_index_option
    drop_behavior
    {
        STL_PARSER_DROP_CONSTRAINT_CLAUSE();
    }
    ;

alter_table_alter_constraint_definition:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ALTER drop_constraint_object
    constraint_characteristics
    {
        STL_PARSER_ALTER_CONSTRAINT_CLAUSE();
    }
    ;

drop_constraint_object:
    SQL_TOK_CONSTRAINT identifier_chain
    {
        STL_PARSER_DROP_CONSTRAINT_OBJECT____CONSTRAINT_NAME();
    }
    |
    SQL_TOK_PRIMARY SQL_TOK_KEY
    {
        STL_PARSER_DROP_CONSTRAINT_OBJECT____PRIMARY_KEY();
    }
    |
    SQL_TOK_UNIQUE SQL_TOK_LEFT_PAREN unique_column_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DROP_CONSTRAINT_OBJECT____UNIQUE();
    }
    ;

drop_key_index_option:
    /*
     * empty
     */
    {
        STL_PARSER_DROP_KEY_INDEX_OPTION____EMPTY();
    }
    |
    SQL_TOK_KEEP SQL_TOK_INDEX
    {
        STL_PARSER_DROP_KEY_INDEX_OPTION____KEEP_INDEX();
    }
    |
    SQL_TOK_DROP SQL_TOK_INDEX
    {
        STL_PARSER_DROP_KEY_INDEX_OPTION____DROP_INDEX();
    }
    ;

alter_table_physical_attribute_clause:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain relation_attribute_list
    {
        STL_PARSER_ALTER_TABLE_PHYSICAL_ATTR_CLAUSE();
    }
    ;

alter_table_add_supplemental_log_clause:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_ADD SQL_TOK_SUPPLEMENTAL SQL_TOK_LOG SQL_TOK_DATA
    SQL_TOK_LEFT_PAREN SQL_TOK_PRIMARY SQL_TOK_KEY SQL_TOK_RIGHT_PAREN SQL_TOK_COLUMNS
    {
        STL_PARSER_ADD_TABLE_SUPPLEMENTAL_LOG_CLAUSE();
    }
    ;

alter_table_drop_supplemental_log_clause:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_DROP SQL_TOK_SUPPLEMENTAL SQL_TOK_LOG SQL_TOK_DATA
    SQL_TOK_LEFT_PAREN SQL_TOK_PRIMARY SQL_TOK_KEY SQL_TOK_RIGHT_PAREN SQL_TOK_COLUMNS
    {
        STL_PARSER_DROP_TABLE_SUPPLEMENTAL_LOG_CLAUSE();
    }
    ;

alter_table_rename_table_clause:
    SQL_TOK_ALTER SQL_TOK_TABLE identifier_chain
    SQL_TOK_RENAME SQL_TOK_TO identifier
    {
        STL_PARSER_RENAME_TABLE_CLAUSE();
    }
    ;


/*
 * ALTER INDEX STATEMENT
 */

alter_index_statement:
    alter_index_physical_attribute_clause
    {
        STL_PARSER_ALTER_INDEX____ALTER_PHYSICAL();
    }
    ;

alter_index_physical_attribute_clause:
    SQL_TOK_ALTER SQL_TOK_INDEX identifier_chain alter_index_attribute_list
    {
        STL_PARSER_INDEX_PHYSICAL_ATTR_CLAUSE();
    }
    ;

alter_index_attribute_list:   // qlpList
    alter_index_attribute_types
    {
        STL_PARSER_INDEX_ATTRIBUTE_LIST____ATTR();
    }
    | alter_index_attribute_list alter_index_attribute_types
    {
        STL_PARSER_INDEX_ATTRIBUTE_LIST____ATTR_LIST();
    }
    ;

alter_index_attribute_types:
    segment_attribute_types
    {
        STL_PARSER_INDEX_ATTRIBUTE_TYPES____SEGMENT();
    }
    | index_physical_attribute_type
    {
        STL_PARSER_INDEX_ATTRIBUTE_TYPES____PHYSICAL();
    }
    ;

/*
 * INSERT STATEMENT
 */

insert_statement:
    SQL_TOK_INSERT SQL_TOK_INTO table_primary // table_name
    insert_columns_and_source
    insert_or_delete_returning_clause
    {
        STL_PARSER_INSERT_STATEMENT____();
    }
    ;

insert_columns_and_source:
    from_constructor
    {
        STL_PARSER_INSERT_COLUMNS_AND_SOURCE____CONSTRUCTOR();
    }
    | from_default
    {
        STL_PARSER_INSERT_COLUMNS_AND_SOURCE____DEFAULT();
    }
    | from_subquery
    {
        STL_PARSER_INSERT_COLUMNS_AND_SOURCE____SUBQUERY( );
    }
    ;

from_constructor:
    contextually_typed_table_value_constructor
    {
        STL_PARSER_FROM_CONSTRUCTOR____ALL_COLUMNS();
    }
    | SQL_TOK_LEFT_PAREN column_name_list // insert_column_list
    SQL_TOK_RIGHT_PAREN
    // override_clause
    contextually_typed_table_value_constructor
    {
        STL_PARSER_FROM_CONSTRUCTOR____COLUMNS();
    }
    ;

// insert_column_list:
//     column_name_list
//     {
//     }
//     ;

column_name_list:  // qlpList
    column_name
    {
        STL_PARSER_COLUMN_NAME_LIST____COLUMN();
    }
    | column_name_list SQL_TOK_COMMA column_name
    {
        STL_PARSER_COLUMN_NAME_LIST____COLUMN_LIST();
    }
    ;


contextually_typed_table_value_constructor:
    SQL_TOK_VALUES
    contextually_typed_row_value_expression_list
    {
        STL_PARSER_CONTEXTUALLY_TYPED_TABLE_VALUE_CONSTRUCTOR____();
    }
    ;

contextually_typed_row_value_expression_list:
    contextually_typed_row_value_expression
    {
        STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION_LIST____EXPR();
    }
    | contextually_typed_row_value_expression_list SQL_TOK_COMMA
    contextually_typed_row_value_expression
    {
        STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION_LIST____EXPR_LIST();
    }
    ;

contextually_typed_row_value_expression:
    SQL_TOK_LEFT_PAREN contextually_typed_row_value_constructor_element_2  SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION____ONE_ROW_EXPR();
    }
    // contextually_typed_value_specification  // value_expression & common_value_expression & boolean_value_expression
    // {
    //     STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION____TYPED_VALUE();
    // }
    // |
    // contextually_typed_row_value_constructor_element
    // {
    //     STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION____VALUE();
    // }
    // | SQL_TOK_LEFT_PAREN contextually_typed_value_specification SQL_TOK_RIGHT_PAREN
    // {
    // }
    // | SQL_TOK_LEFT_PAREN contextually_typed_row_value_constructor_element_2 SQL_TOK_COMMA
    // contextually_typed_row_value_constructor_element SQL_TOK_RIGHT_PAREN
    // {
    //     STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION____VALUE_LIST();
    // }
    // | SQL_TOK_ROW SQL_TOK_LEFT_PAREN contextually_typed_value_specification SQL_TOK_RIGHT_PAREN
    // {
    //     STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_EXPRESSION____ROW_TYPED_VALUE();
    // }
    ;

contextually_typed_row_value_constructor_element_2:
    contextually_typed_row_value_constructor_element
    {
        STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT_2____ROW_VALUE();
    }
    | contextually_typed_row_value_constructor_element_2 SQL_TOK_COMMA
    contextually_typed_row_value_constructor_element
    {
        STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT_2____ROW_VALUE_LIST();
    }
    ;

contextually_typed_row_value_constructor_element:
    value_expression
    {
        STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT____VALUE_EXPR();
    }
    | contextually_typed_value_specification
    {
        STL_PARSER_CONTEXTUALLY_TYPED_ROW_VALUE_CONSTRUCTOR_ELEMENT____TYPED_VALUE();
    }
    ;

from_default:
    SQL_TOK_DEFAULT SQL_TOK_VALUES
    {
        STL_PARSER_FROM_DEFAULT____();
    }
    ;

from_subquery:
    query_expression
    {
        STL_PARSER_FROM_SUBQUERY____QUERY_EXPR_ALL_COLUMNS();
    }
    | SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    query_expression
    {
        STL_PARSER_FROM_SUBQUERY____QUERY_EXPR_COLUMNS();
    }
    ;


/*
 * UPDATE STATEMENT
 */

update_statement:  /* update statement : searched */
    SQL_TOK_UPDATE hint_clause table_primary
    SQL_TOK_SET set_clause_list
    result_offset_clause
    fetch_limit_clause
    update_returning_clause
    {
        STL_PARSER_UPDATE_STATEMENT____NO_WHERE();
    }
    |
    SQL_TOK_UPDATE hint_clause table_primary
    SQL_TOK_SET set_clause_list
    SQL_TOK_WHERE value_expression  // boolean_value_expression // where_clause
    result_offset_clause
    fetch_limit_clause
    update_returning_clause
    {
        STL_PARSER_UPDATE_STATEMENT____WHERE();
    }
    ;

update_statement_positioned: /* update statement : positioned */
    SQL_TOK_UPDATE hint_clause table_primary
    SQL_TOK_SET set_clause_list
    SQL_TOK_WHERE SQL_TOK_CURRENT SQL_TOK_OF identifier
    {
        STL_PARSER_UPDATE_STATEMENT_POSITIONED____CURSOR();
    }
    ;  

set_clause_list:  // qlpList : qlpTarget
    set_clause
    {
        STL_PARSER_SET_CLAUSE_LIST____SET_CLAUSE();
    }
    | set_clause_list SQL_TOK_COMMA set_clause
    {
        STL_PARSER_SET_CLAUSE_LIST____SET_CLAUSE_LIST();
    }
    ;

set_clause:  // qlpList
    multiple_column_assignment
    {
        STL_PARSER_SET_CLAUSE____MULTIPLE_COLUMN();
    }
    | set_target SQL_TOK_EQUAL_OPERATOR update_source
    {
        STL_PARSER_SET_CLAUSE____ASSIGN();
    }
    ;

set_target:  // qlpValue : string
    update_target
    {
        STL_PARSER_SET_TARGET____UPDATE_TARGET();
    }
    // | mutated_set_clause
    // {
    //     STL_PARSER_SET_TARGET____MUTATED_SET();
    // }
    ;

multiple_column_assignment:  // qlpList
    set_target_list SQL_TOK_EQUAL_OPERATOR assigned_row
    {
        STL_PARSER_MULTIPLE_COLUMN_ASSIGNMENT____();
    }
    ;

set_target_list:  // qlpList
    SQL_TOK_LEFT_PAREN set_target_list_2 SQL_TOK_COMMA set_target SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SET_TARGET_LIST____();
    }
    ;

set_target_list_2:  // qlpList
    set_target
    {
        STL_PARSER_SET_TARGET_LIST_2____TARGET();
    }
    | set_target_list_2 SQL_TOK_COMMA set_target
    {
        STL_PARSER_SET_TARGET_LIST_2____TARGET_LIST();
    }
    ;

assigned_row:  // qlpNode
    contextually_typed_row_value_expression
    {
        STL_PARSER_ASSIGNED_ROW____();
    }
    |
    parenthesized_query_expression_no_with_clause
    {
        STL_PARSER_ASSIGNED_ROW____ONE_SUBQUERY();
    }
    ;

update_target:  // qlpValue : string
    identifier_chain // object_column
    {
        STL_PARSER_UPDATE_TARGET____NAME();
    }
    | identifier_chain // object_column
    SQL_TOK_LEFT_BRACKET simple_value_specification SQL_TOK_RIGHT_BRACKET
    {
        STL_PARSER_NOT_SUPPORT( a2 );
    }
    | identifier_chain // object_column
    SQL_TOK_LEFT_BRACKET_TRIGRAPH simple_value_specification SQL_TOK_RIGHT_BRACKET_TRIGRAPH
    {
        STL_PARSER_NOT_SUPPORT( a2 );
    }
    | SQL_TOK_LEFT_PAREN identifier_chain // object_column
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_UPDATE_TARGET____PAREN_NAME();
    }
    | SQL_TOK_LEFT_PAREN identifier_chain // object_column
    SQL_TOK_LEFT_BRACKET simple_value_specification SQL_TOK_RIGHT_BRACKET
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a3 );
    }
    | SQL_TOK_LEFT_PAREN identifier_chain // object_column
    SQL_TOK_LEFT_BRACKET_TRIGRAPH simple_value_specification SQL_TOK_RIGHT_BRACKET_TRIGRAPH
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a3 );
    }
    ;

// mutated_set_clause:
//     mutated_target SQL_TOK_PERIOD identifier // method_name
//     {
//         STL_PARSER_MUTATED_SET_CLAUSE____();
//     }
//     ;

// mutated_target:
//     column_name // object_column
//     {
//         STL_PARSER_MUTATED_TARGET____COLUMN();
//     }
//     | mutated_set_clause
//     {
//         STL_PARSER_MUTATED_TARGET____MUTATED_SET();
//     }
//     ;

update_source:  // qlpNode
    value_expression
    {
        STL_PARSER_UPDATE_SOURCE____VALUE_EXPR();
    }
    | contextually_typed_value_specification
    {
        STL_PARSER_UPDATE_SOURCE____TYPED_VALUE();
    }
    ;

contextually_typed_value_specification:  // qlpNode
    // implicitly_typed_value_specification
    // {
    //     STL_PARSER_CONTEXTUALLY_TYPED_VALUE_SPECIFICATION____IMPLICITLY_TYPED_VALUE();
    // }
    // |
    SQL_TOK_DEFAULT // dafault_specification
    {
        STL_PARSER_CONTEXTUALLY_TYPED_VALUE_SPECIFICATION____DEFAULT();
    }
    ;

simple_value_specification:
    literal
    {
        // qlpConstant
        STL_PARSER_SIMPLE_VALUE_SPECIFICATION____LITERAL();
    }
    | host_variable indicator_paramter  // host_parameter_specification
    {
        STL_PARSER_SIMPLE_VALUE_SPECIFICATION____HOST_PARAMETER( );
    }
    | SQL_TOK_QUESTION_MARK  // dynamic_parameter_specification
    {
        STL_PARSER_SIMPLE_VALUE_SPECIFICATION____DYNAMIC_PARAMETER( );
    }
// | identifier_chain // SQL_parameter_reference
//    {
//        STL_PARSER_SIMPLE_VALUE_SPECIFICATION____SQL_PARAMETER();
//        // qlpList
//    }
    ;

literal:  // qlpConstant
    signed_numeric_literal
    {
        STL_PARSER_LITERAL____SIGNED_NUMERIC();
    }
    | general_literal
    {
        STL_PARSER_LITERAL____GENERAL();
    }
    ;

signed_numeric_literal:  // qlpConstant
    unsigned_numeric_literal
    {
        STL_PARSER_SIGNED_NUMERIC_LITERAL____UNSIGNED_NUMERIC();
    }
    | sign unsigned_numeric_literal
    {
        STL_PARSER_SIGNED_NUMERIC_LITERAL____SIGNED_NUMERIC();
    }
    ;

host_variable:
    SQL_TOK_COLON
    {
        STL_PARSER_HOST_VARIABLE____();
    }
    ;

/*
 * DELETE STATEMENT
 */

delete_statement: /* delete statement : searched */
    SQL_TOK_DELETE hint_clause
    SQL_TOK_FROM table_primary // target_table
    result_offset_clause
    fetch_limit_clause
    insert_or_delete_returning_clause
    {
        STL_PARSER_DELETE_STATEMENT____NO_WHERE();
    }
    |
    SQL_TOK_DELETE hint_clause
    SQL_TOK_FROM table_primary // target_table
    SQL_TOK_WHERE value_expression // boolean_value_expression // where_clause
    result_offset_clause
    fetch_limit_clause
    insert_or_delete_returning_clause
    {
        STL_PARSER_DELETE_STATEMENT____WHERE();
    }
    |
    SQL_TOK_DELETE hint_clause table_primary // target_table
    result_offset_clause
    fetch_limit_clause
    insert_or_delete_returning_clause
    {
        STL_PARSER_DELETE_STATEMENT____NO_FROM_NO_WHERE();
    }
    |
    SQL_TOK_DELETE hint_clause table_primary // target_table
    SQL_TOK_WHERE value_expression // boolean_value_expression // where_clause
    result_offset_clause
    fetch_limit_clause
    insert_or_delete_returning_clause
    {
        STL_PARSER_DELETE_STATEMENT____NO_FROM_WHERE();
    }
    ;

delete_statement_positioned: /* delete statement : positioned */
    SQL_TOK_DELETE hint_clause
    SQL_TOK_FROM table_primary // target_table
    SQL_TOK_WHERE SQL_TOK_CURRENT SQL_TOK_OF identifier
    {
        STL_PARSER_DELETE_STATEMENT_POSITIONED____CURSOR();
    }
    |
    SQL_TOK_DELETE hint_clause table_primary // target_table
    SQL_TOK_WHERE SQL_TOK_CURRENT SQL_TOK_OF identifier
    {
        STL_PARSER_DELETE_STATEMENT_POSITIONED____NO_FROM_CURSOR();
    }
    ;  

insert_or_delete_returning_clause:
    /* empty */
    {
        STL_PARSER_INSERT_OR_DELETE_RETURNING_CLAUSE____EMPTY();
    }
    |
    SQL_TOK_RETURN select_list select_target_clause
    {
        STL_PARSER_INSERT_OR_DELETE_RETURNING_CLAUSE____RETURNING();
    }
    |
    SQL_TOK_RETURNING select_list select_target_clause
    {
        STL_PARSER_INSERT_OR_DELETE_RETURNING_CLAUSE____RETURNING();
    }
    ;

update_returning_clause:
    /* empty */
    {
        STL_PARSER_UPDATE_RETURNING_CLAUSE____EMPTY();
    }
    |
    SQL_TOK_RETURN select_list select_target_clause
    {
        STL_PARSER_UPDATE_RETURNING_CLAUSE____RETURNING();
    }
    |
    SQL_TOK_RETURNING select_list select_target_clause
    {
        STL_PARSER_UPDATE_RETURNING_CLAUSE____RETURNING();
    }
    |
    SQL_TOK_RETURN SQL_TOK_NEW select_list select_target_clause
    {
        STL_PARSER_UPDATE_RETURNING_CLAUSE____RETURNING_NEW();
    }
    |
    SQL_TOK_RETURNING SQL_TOK_NEW select_list select_target_clause
    {
        STL_PARSER_UPDATE_RETURNING_CLAUSE____RETURNING_NEW();
    }
    |
    SQL_TOK_RETURN SQL_TOK_OLD select_list select_target_clause
    {
        STL_PARSER_UPDATE_RETURNING_CLAUSE____RETURNING_OLD();
    }
    |
    SQL_TOK_RETURNING SQL_TOK_OLD select_list select_target_clause
    {
        STL_PARSER_UPDATE_RETURNING_CLAUSE____RETURNING_OLD();
    }
    ;


/*
 * SELECT STATEMENT
 */

select_statement:  // qlpSelect
    query_expression updatability_clause
    {
        STL_PARSER_SELECT_STATEMENT____QUERY_EXPRESSION();
    }
    ;

updatability_clause:
    /*
     * empty
     */
    {
        STL_PARSER_UPDATABILITY____EMPTY();
    }
    |
    SQL_TOK_FOR SQL_TOK_READ SQL_TOK_ONLY
    {
        STL_PARSER_UPDATABILITY____FOR_READ_ONLY();
    }
    |
    SQL_TOK_FOR SQL_TOK_UPDATE for_update_lock_wait_mode
    {
        STL_PARSER_UPDATABILITY____FOR_UPDATE();
    }
    |
    SQL_TOK_FOR SQL_TOK_UPDATE SQL_TOK_OF for_update_column_list for_update_lock_wait_mode
    {
        STL_PARSER_UPDATABILITY____FOR_UPDATE_OF();
    }
    ;


for_update_lock_wait_mode:
    /*
     * empty
     */
    {
        STL_PARSER_FOR_UPDATE_LOCK_WAIT_MODE____EMPTY();
    }
    |
    SQL_TOK_WAIT
    {
        STL_PARSER_FOR_UPDATE_LOCK_WAIT_MODE____WAIT();
    }
    |
    SQL_TOK_WAIT unsigned_integer
    {
        STL_PARSER_FOR_UPDATE_LOCK_WAIT_MODE____WAIT_SECOND();
    }
    |
    SQL_TOK_NOWAIT
    {
        STL_PARSER_FOR_UPDATE_LOCK_WAIT_MODE____NOWAIT();
    }
    |
    SQL_TOK_SKIP SQL_TOK_LOCKED
    {
        STL_PARSER_FOR_UPDATE_LOCK_WAIT_MODE____SKIP_LOCKED();
    }
    ;

for_update_column_list:  // qlpList
    identifier_chain
    {
        STL_PARSER_FOR_UPDATE_COLUMN_LIST____COLUMN();
    }
    | for_update_column_list SQL_TOK_COMMA identifier_chain
    {
        STL_PARSER_FOR_UPDATE_COLUMN_LIST____COLUMN_LIST();
    }
    ;


/*
 * SELECT INTO STATEMENT
 */

select_into_statement:  // qlpSelectInto (single row)
    SQL_TOK_SELECT hint_clause select_list SQL_TOK_INTO select_target_list
    from_clause
    where_clause
    group_by_clause
    having_clause
    window_clause
    order_by_clause
    result_offset_clause
    fetch_limit_clause
    updatability_clause    
    {
        STL_PARSER_SELECT_INTO_STATEMENT____();
    }
    | SQL_TOK_SELECT hint_clause SQL_TOK_ALL select_list SQL_TOK_INTO select_target_list
    from_clause
    where_clause
    group_by_clause
    having_clause
    window_clause
    order_by_clause
    result_offset_clause
    fetch_limit_clause
    updatability_clause    
    {
        STL_PARSER_SELECT_INTO_STATEMENT____ALL();
    }
    | SQL_TOK_SELECT hint_clause SQL_TOK_DISTINCT select_list SQL_TOK_INTO select_target_list
    from_clause
    where_clause
    group_by_clause
    having_clause
    window_clause
    order_by_clause
    result_offset_clause
    fetch_limit_clause
    updatability_clause    
    {
        STL_PARSER_SELECT_INTO_STATEMENT____DISTINCT();
    }
    ;


/*
 * QUERY EXPRESSION
 */

query_expression:  // qlpQueryExpr
    query_expression_body order_by_clause result_offset_clause fetch_limit_clause
    {
        STL_PARSER_QUERY_EXPRESSION____NO_WITH_CLAUSE();
    }
    | with_clause query_expression_body order_by_clause result_offset_clause fetch_limit_clause
    {
        STL_PARSER_QUERY_EXPRESSION____WITH_CLAUSE();
    }
    ;

with_clause:
    SQL_TOK_WITH with_list
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_WITH SQL_TOK_RECURSIVE with_list
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

with_list:
    with_element
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    | with_list SQL_TOK_COMMA with_element
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

with_element:
    query_name with_column_list_clause SQL_TOK_AS table_subquery
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

query_name:
    identifier
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

with_column_list_clause:
    SQL_TOK_LEFT_PAREN with_column_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

with_column_list:
    column_name_list
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

query_expression_body:  // qlpQueryElemInfo
    query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____();
    }
    | query_expression_body SQL_TOK_UNION corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____UNION_DEFAULT();
    }
    | query_expression_body SQL_TOK_UNION SQL_TOK_ALL corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____UNION_ALL();
    }
    | query_expression_body SQL_TOK_UNION SQL_TOK_DISTINCT corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____UNION_DISTINCT();
    }
    | query_expression_body SQL_TOK_EXCEPT corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____EXCEPT_DEFAULT();
    }
    | query_expression_body SQL_TOK_EXCEPT SQL_TOK_ALL corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____EXCEPT_ALL();
    }
    | query_expression_body SQL_TOK_EXCEPT SQL_TOK_DISTINCT corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____EXCEPT_DISTINCT();
    }
    | query_expression_body SQL_TOK_MINUS corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____EXCEPT_DEFAULT();
    }
    | query_expression_body SQL_TOK_MINUS SQL_TOK_ALL corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____EXCEPT_ALL();
    }
    | query_expression_body SQL_TOK_MINUS SQL_TOK_DISTINCT corresponding_spec query_term
    {
        STL_PARSER_QUERY_EXPRESSION_BODY____EXCEPT_DISTINCT();
    }
    ;

query_term: // qlpQueryElemInfo
    query_primary
    {
        STL_PARSER_QUERY_TERM____();
    }
    | query_term SQL_TOK_INTERSECT corresponding_spec query_primary
    {
        STL_PARSER_QUERY_TERM____INTERSECT_DEFAULT();
    }
    | query_term SQL_TOK_INTERSECT SQL_TOK_ALL corresponding_spec query_primary
    {
        STL_PARSER_QUERY_TERM____INTERSECT_ALL();
    }
    | query_term SQL_TOK_INTERSECT SQL_TOK_DISTINCT corresponding_spec query_primary
    {
        STL_PARSER_QUERY_TERM____INTERSECT_DISTINCT();
    }
    ;

query_primary:  // qlpQueryElemInfo
    query_specification
    {
        STL_PARSER_QUERY_PRIMARY____QUERY_SPEC();
    }
    | parenthesized_query_expression_no_with_clause
    {
        STL_PARSER_QUERY_PRIMARY____PARENTHESIZED_QUERY_EXPRESSION_NO_WITH_CLAUSE();
    }
    ;

parenthesized_query_expression_no_with_clause_head:
    SQL_TOK_LEFT_PAREN query_expression_body
    order_by_clause result_offset_clause fetch_limit_clause
    {
        STL_PARSER_PARENTHESIZED_QUERY_EXPRESSION_NO_WITH_CLAUSE_HEAD____();
    };

parenthesized_query_expression_no_with_clause:
    parenthesized_query_expression_no_with_clause_head SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_PARENTHESIZED_QUERY_EXPRESSION_NO_WITH_CLAUSE____();
    }
    ;

parenthesized_query_expression_with_clause:
    SQL_TOK_LEFT_PAREN with_clause query_expression_body
    order_by_clause result_offset_clause fetch_limit_clause SQL_TOK_RIGHT_PAREN
    {
    }
    ;

/*
table_or_query_name:
    table_primary   // table_name
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | transition_table_name
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | query_name
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

transition_table_name:
    identifier
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;
*/
corresponding_spec:
    /* empty */
    {
        STL_PARSER_CORRESPONDING_SPEC____EMPTY();
    }
    | SQL_TOK_CORRESPONDING
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_CORRESPONDING SQL_TOK_BY SQL_TOK_LEFT_PAREN corresponding_column_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

corresponding_column_list:
    column_name_list
    {
        STL_PARSER_NOT_SUPPORT( a1 );   // -------------------------------------- NOT SUPPORT
    }
    ;

query_specification:    // qlpQuerySpec
    SQL_TOK_SELECT hint_clause select_list
    from_clause
    where_clause
    group_by_clause
    having_clause
    window_clause
    {
        STL_PARSER_QUERY_SPECIFICATION____();
    }
    | SQL_TOK_SELECT hint_clause SQL_TOK_ALL select_list
    from_clause
    where_clause
    group_by_clause
    having_clause
    window_clause
    {
        STL_PARSER_QUERY_SPECIFICATION____ALL();
    }
    | SQL_TOK_SELECT hint_clause SQL_TOK_DISTINCT select_list
    from_clause
    where_clause
    group_by_clause
    having_clause
    window_clause
    {
        STL_PARSER_QUERY_SPECIFICATION____DISTINCT();
    }
    ;

from_clause:    // qlpTableInfo
    SQL_TOK_FROM table_reference_list
    {
        STL_PARSER_FROM_CLAUSE____();
    }
    ;

where_clause:   // qlpList
    /* empty */
    {
        STL_PARSER_WHERE_CLAUSE____EMPTY();
    }
    | SQL_TOK_WHERE value_expression
    {
        STL_PARSER_WHERE_CLAUSE____WHERE();
    }
    ;

table_reference_list:   // qlpTableInfo
    table_reference
    {
        STL_PARSER_TABLE_REFERENCE_LIST____SINGLE();
    }
    | table_reference_list SQL_TOK_COMMA table_reference
    {
        STL_PARSER_TABLE_REFERENCE_LIST____LIST();
    }
    ;

table_reference:    // qlpTableInfo
    table_factor
    {
        STL_PARSER_TABLE_REFERENCE____TABLE_FACTOR();
    }
    | joined_table
    {
        STL_PARSER_TABLE_REFERENCE____JOINED_TABLE();
    }
    ;

table_factor:   // qlpTableInfo
    table_primary_element
    {
        STL_PARSER_TABLE_FACTOR____();
    }
//    | table_primary_element sample_clause
//    {
//    }
    ;

joined_table:   // qlpTableInfo
    cross_join
    {
        STL_PARSER_JOINED_TABLE____CROSS_JOIN();
    }
    | qualified_join
    {
        STL_PARSER_JOINED_TABLE____QUALIFIED_JOIN();
    }
    | natural_join
    {
        STL_PARSER_JOINED_TABLE____NATURAL_JOIN();
    }
    | escape_sequence_join
    {
        STL_PARSER_JOINED_TABLE____ESC_JOIN();
    }
    ;

cross_join: // qlpTableInfo
    table_reference SQL_TOK_CROSS SQL_TOK_JOIN table_factor
    {
        STL_PARSER_CROSS_JOIN____();
    }
    ;

qualified_join: // qlpTableInfo
    table_reference SQL_TOK_JOIN table_reference join_specification
    {
        STL_PARSER_QUALIFIED_JOIN____WITHOUT_JOIN_TYPE();
    }
    | table_reference join_type SQL_TOK_JOIN table_reference join_specification
    {
        STL_PARSER_QUALIFIED_JOIN____WITH_JOIN_TYPE();
    }
    ;

natural_join:   // qlpTableInfo
    table_reference SQL_TOK_NATURAL SQL_TOK_JOIN table_factor
    {
        STL_PARSER_NATURAL_JOIN____WITHOUT_JOIN_TYPE();
    }
    | table_reference SQL_TOK_NATURAL join_type SQL_TOK_JOIN table_factor
    {
        STL_PARSER_NATURAL_JOIN____WITH_JOIN_TYPE();
    }
    ;

escape_sequence_join:   // qlpTableInfo
    SQL_TOK_LEFT_BRACE escape_sequence_outer_join SQL_TOK_RIGHT_BRACE
    {
        STL_PARSER_ESCAPE_JOIN____OUTER_JOIN();
    }
    ;

escape_sequence_outer_join:    // qlpTableInfo
    SQL_TOK_OJ table_primary_element outer_join_type SQL_TOK_OUTER SQL_TOK_JOIN escape_sequence_outer_target join_specification
    {
        STL_PARSER_ESCAPE_OUTER_JOIN____();
    }
    ;

escape_sequence_outer_target:   // qlpTableInfo
    table_primary_element
    {
        STL_PARSER_ESCAPE_OUTER_TARGET____TABLE_REF();
    }
    | table_primary_element outer_join_type SQL_TOK_OUTER SQL_TOK_JOIN escape_sequence_outer_target join_specification
    {
        STL_PARSER_ESCAPE_OUTER_TARGET____OUTER_JOIN();
    }
    ;

join_specification: // qlpJoinSpecification
    join_condition
    {
        STL_PARSER_JOIN_SPECIFICATION____JOIN_CONDITION();
    }
    | named_columns_join
    {
        STL_PARSER_JOIN_SPECIFICATION____NAMED_COLUMNS();
    }
    ;

join_condition: // qlpList
    SQL_TOK_ON search_condition
    {
        STL_PARSER_JOIN_CONDITION____();
    }
    ;

search_condition:   // qlpList
    value_expression
    {
        STL_PARSER_SEARCH_CONDITION____();
    }
    ;

named_columns_join: // qlpList
    SQL_TOK_USING SQL_TOK_LEFT_PAREN join_column_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NAMED_COLUMNS_JOIN____();
    }
    ;

join_column_list:   // qlpList
    column_name_list
    {
        STL_PARSER_JOIN_COLUMN_LIST____();
    }
    ;

join_type:  // qlpJoinType
    SQL_TOK_INNER
    {
        STL_PARSER_JOIN_TYPE____INNER();
    }
    | outer_join_type
    {
        STL_PARSER_JOIN_TYPE____WITHOUT_OUTER_KEYWORD();
    }
    | outer_join_type SQL_TOK_OUTER
    {
        STL_PARSER_JOIN_TYPE____WITH_OUTER_KEYWORD();
    }
//    | semi_join_type 
//    {
//        STL_PARSER_JOIN_TYPE____SEMI();
//    }
//    | anti_semi_join_type 
//    {
//        STL_PARSER_JOIN_TYPE____ANTI_SEMI();
//    }
    ;

outer_join_type:    // qlpJoinType
    SQL_TOK_LEFT
    {
        STL_PARSER_OUTER_JOIN_TYPE____LEFT();
    }
    | SQL_TOK_RIGHT
    {
        STL_PARSER_OUTER_JOIN_TYPE____RIGHT();
    }
    | SQL_TOK_FULL
    {
        STL_PARSER_OUTER_JOIN_TYPE____FULL();
    }
    ;

/*
semi_join_type:    // qlpJoinType
    SQL_TOK_LEFT SQL_TOK_SEMI
    {
        STL_PARSER_SEMI_JOIN_TYPE____LEFT();
    }
    | SQL_TOK_RIGHT SQL_TOK_SEMI
    {
        STL_PARSER_SEMI_JOIN_TYPE____RIGHT();
    }
    ;

anti_semi_join_type:    // qlpJoinType
    SQL_TOK_LEFT SQL_TOK_ANTI SQL_TOK_SEMI
    {
        STL_PARSER_ANTI_SEMI_JOIN_TYPE____LEFT();
    }
    | SQL_TOK_RIGHT SQL_TOK_ANTI SQL_TOK_SEMI
    {
        STL_PARSER_ANTI_SEMI_JOIN_TYPE____RIGHT();
    }
    ;
*/

table_primary_element:  // qlpTableRef
    identifier_chain // table_or_query_name
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____NAME();
    }
    | identifier_chain // table_or_query_name
    SQL_TOK_AS correlation_name
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____NAME_ALIAS_WITH_AS();
    }
    | identifier_chain // table_or_query_name
    correlation_name
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____NAME_ALIAS_WITH_BLANK();
    }
    | derived_table
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____DERIVED_TABLE();
    }
    | derived_table
    SQL_TOK_AS correlation_name derived_column_list
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____DERIVED_TABLE_ALIAS_WITH_AS();
    }
    | derived_table
    correlation_name derived_column_list
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____DERIVED_TABLE_ALIAS_WITH_BLANK();
    }
    | parenthesized_joined_table
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____JOIN_TABLE();
    }
    | identifier_chain
    SQL_TOK_LEFT_PAREN SQL_TOK_QUOTE_STRING SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____DUMP_TABLE();
    }
    | identifier_chain
    SQL_TOK_LEFT_PAREN SQL_TOK_QUOTE_STRING SQL_TOK_RIGHT_PAREN
    SQL_TOK_AS correlation_name
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____DUMP_TABLE_ALIAS_WITH_AS();
    }
    | identifier_chain
    SQL_TOK_LEFT_PAREN SQL_TOK_QUOTE_STRING SQL_TOK_RIGHT_PAREN
    correlation_name
    {
        STL_PARSER_TABLE_PRIMARY_ELEMENT____DUMP_TABLE_ALIAS_WITH_BLANK();
    }
    ;

derived_column_list:
    {
        STL_PARSER_DERIVED_COLUMN_LIST____();
    }
    | SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DERIVED_COLUMN_LIST____COLUMN_LIST();
    }
    ;

derived_table:  // qlpQueryExpr
    table_subquery
    {
        STL_PARSER_DERIVED_TABLE____();
    }
    ;

table_subquery: // qlpSubTableInfo
    subquery
    {
        STL_PARSER_TABLE_SUBQUERY____();
    }
    ;

subquery:
    parenthesized_query_expression_no_with_clause
    {
        STL_PARSER_SUBQUERY____NO_WITH_CLAUSE();
    }
    | parenthesized_query_expression_with_clause
    {
        STL_PARSER_SUBQUERY____WITH_CLAUSE();
    }
    ;

parenthesized_joined_table:
    SQL_TOK_LEFT_PAREN joined_table SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_PARENTHESIZED_JOINED_TABLE____();
    }
    | SQL_TOK_LEFT_PAREN parenthesized_joined_table SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_PARENTHESIZED_JOINED_TABLE____RECURSIVE_PAREN();
    }
    ;


select_target_clause:  // qlpList : qlpTarget
    /* empty */
    {
        STL_PARSER_SELECT_TARGET_CLAUSE____EMPTY();
    }
    | SQL_TOK_INTO select_target_list
    {
        STL_PARSER_SELECT_TARGET_CLAUSE____TARGETS();
    }
    ;

select_target_list:  // qlpList : qlpTarget
    target_specification
    {
        STL_PARSER_SELECT_TARGET_LIST____TARGET();
    }
    | select_target_list SQL_TOK_COMMA target_specification
    {
        STL_PARSER_SELECT_TARGET_LIST____TARGET_LIST();
    }
    ;

target_specification:  // qlpTarget
    host_variable indicator_paramter  // host_parameter_specification
    {
        STL_PARSER_TARGET_SPECIFICATION____HOST_PARAMETER();
    }
    // | identifier_chain  // SQL_parameter_reference & column_reference
    // {
    //     STL_PARSER_TARGET_SPECIFICATION____COLUMN();
    // }
    | SQL_TOK_QUESTION_MARK  // dynamic_parameter_specification
    {
        STL_PARSER_TARGET_SPECIFICATION____DYNAMIC_PARAMETER();
    }
    ;

select_list:
    select_sublist
    {
        STL_PARSER_SELECT_LIST____SUBLIST();
    }
    | SQL_TOK_ASTERISK
    {
        STL_PARSER_SELECT_LIST____ALL();
    }
    ;

select_sublist:
    select_sublist2
    {
        STL_PARSER_SELECT_SUBLIST____SUBLIST2();
    }
    | select_sublist SQL_TOK_COMMA select_sublist2
    {
        STL_PARSER_SELECT_SUBLIST____SUBLIST2_LIST();
    }
    ;

select_sublist2:
    derived_column
    {
        STL_PARSER_SELECT_SUBLIST2____DERIVED_COLUMN();
    }
    | identifier_chain SQL_TOK_PERIOD SQL_TOK_ASTERISK
    {
        STL_PARSER_SELECT_SUBLIST2____IDENTIFIER_ASTERISK();
    }
/*    | value_expression_primary SQL_TOK_PERIOD SQL_TOK_ASTERISK
    {
        STL_PARSER_SELECT_SUBLIST2____VALUE_EXPRESSION_ASTERISK();
    }
    | value_expression_primary SQL_TOK_PERIOD SQL_TOK_ASTERISK
    SQL_TOK_AS SQL_TOK_LEFT_PAREN column_name_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SELECT_SUBLIST2____VALUE_EXPRESSION_ASTERISK_WITH_AS();
    }*/
    ;

derived_column:
    value_expression
    {
        STL_PARSER_DERIVED_COLUMN____VALUE();
    }
    | value_expression SQL_TOK_AS column_name
    {
        STL_PARSER_DERIVED_COLUMN____VALUE_ALIAS_WITH_AS();
    }
    | value_expression column_name
    {
        STL_PARSER_DERIVED_COLUMN____VALUE_ALIAS_WITH_BLANK();
    }
    ;

hint_clause:
    /* empty */
    {
        STL_PARSER_HINT_CLAUSE____EMPTY();
    }
    | SQL_TOK_COMMENT_INTRODUCER_HINT
    SQL_TOK_COMMENT_TERMINATOR
    {
        STL_PARSER_HINT_CLAUSE____EMPTY();
    }
    | SQL_TOK_COMMENT_INTRODUCER_HINT
    hint_list
    SQL_TOK_COMMENT_TERMINATOR
    {
        STL_PARSER_HINT_CLAUSE____LIST();
    }
    ;

hint_list:
    hint_element
    {
        STL_PARSER_HINT_LIST____();
    }
    | hint_list hint_element
    {
        STL_PARSER_HINT_LIST____LIST();
    }
    | hint_list SQL_TOK_COMMA hint_element
    {
        STL_PARSER_HINT_LIST____COMMA_LIST();
    }
    ;

hint_element:
    access_path_hints
    {
        STL_PARSER_HINT_ELEMENT____ACCESS_PATH_HINTS();
    }
    | join_hints
    {
        STL_PARSER_HINT_ELEMENT____JOIN_HINTS();
    }
    | query_transformation_hints
    {
        STL_PARSER_HINT_ELEMENT____QUERY_TRANSFORMATION_HINTS();
    }
    | other_hints
    {
        STL_PARSER_HINT_ELEMENT____OTHER_HINTS();
    }
    | error
    {
        STL_PARSER_HINT_ELEMENT____ERROR();
    }
    ;

access_path_hints:
    SQL_TOK_FULL error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_FULL SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____FULL();
    }
    | SQL_TOK_HASH error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_HASH SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____HASH();
    }
    | SQL_TOK_INDEX error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_INDEX SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX();
    }
    | SQL_TOK_INDEX SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_ONLY_TABLE_NAME();
    }
    | SQL_TOK_INDEX SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_COMMA
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_WITH_COMMA();
    }
    | SQL_TOK_NO_INDEX error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_NO_INDEX SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____NO_INDEX();
    }
    | SQL_TOK_NO_INDEX SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____NO_INDEX_ONLY_TABLE_NAME();
    }
    | SQL_TOK_NO_INDEX SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_COMMA
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____NO_INDEX_WITH_COMMA();
    }
    | SQL_TOK_INDEX_ASC error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_INDEX_ASC SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_ASC();
    }
    | SQL_TOK_INDEX_ASC SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_ASC_ONLY_TABLE_NAME();
    }
    | SQL_TOK_INDEX_ASC SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_COMMA
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_ASC_WITH_COMMA();
    }
    | SQL_TOK_INDEX_DESC error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_INDEX_DESC SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_DESC();
    }
    | SQL_TOK_INDEX_DESC SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_DESC_ONLY_TABLE_NAME();
    }
    | SQL_TOK_INDEX_DESC SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_COMMA
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_DESC_WITH_COMMA();
    }
    | SQL_TOK_ROWID error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_ROWID SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____ROWID();
    }
    | SQL_TOK_INDEX_COMBINE error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_INDEX_COMBINE SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_COMBINE();
    }
    | SQL_TOK_INDEX_COMBINE SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_COMBINE_ONLY_TABLE_NAME();
    }
    | SQL_TOK_INDEX_COMBINE SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_COMMA
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____INDEX_COMBINE_WITH_COMMA();
    }
    | SQL_TOK_IN_KEY_RANGE error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_IN_KEY_RANGE SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____IN_KEY_RANGE();
    }
    | SQL_TOK_IN_KEY_RANGE SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____IN_KEY_RANGE_ONLY_TABLE_NAME();
    }
    | SQL_TOK_IN_KEY_RANGE SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_COMMA
    index_identifier_chain_list    // index name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACCESS_PATH_HINTS____IN_KEY_RANGE_WITH_COMMA();
    }
    ;

join_hints:
    SQL_TOK_ORDERED
    {
        STL_PARSER_JOIN_HINTS____ORDERED();
    }
    | SQL_TOK_ORDERING error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_ORDERING SQL_TOK_LEFT_PAREN
    ordering_table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____ORDERING();
    }
    | SQL_TOK_LEADING error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_LEADING SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____LEADING();
    }
    | SQL_TOK_USE_HASH error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_USE_HASH SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____USE_HASH();
    }
    | SQL_TOK_NO_USE_HASH error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_NO_USE_HASH SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____NO_USE_HASH();
    }
    | SQL_TOK_USE_INL error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_USE_INL SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____USE_INL();
    }
    | SQL_TOK_NO_USE_INL error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_NO_USE_INL SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____NO_USE_INL();
    }
    | SQL_TOK_USE_MERGE error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_USE_MERGE SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____USE_MERGE();
    }
    | SQL_TOK_NO_USE_MERGE error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_NO_USE_MERGE SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____NO_USE_MERGE();
    }
    | SQL_TOK_USE_NL error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_USE_NL SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____USE_NL();
    }
    | SQL_TOK_NO_USE_NL error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_NO_USE_NL SQL_TOK_LEFT_PAREN
    table_identifier_chain_list   // table name list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_JOIN_HINTS____NO_USE_NL();
    }
    ;

query_transformation_hints:
    SQL_TOK_UNNEST
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____UNNEST();
    }
    | SQL_TOK_NO_UNNEST
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____NO_UNNEST();
    }
    | SQL_TOK_NL_ISJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____NL_ISJ();
    }
    | SQL_TOK_NL_SJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____NL_SJ();
    }
    | SQL_TOK_NL_AJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____NL_AJ();
    }
    | SQL_TOK_MERGE_SJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____MERGE_SJ();
    }
    | SQL_TOK_MERGE_AJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____MERGE_AJ();
    }
    | SQL_TOK_HASH_ISJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____HASH_ISJ();
    }
    | SQL_TOK_HASH_SJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____HASH_SJ();
    }
    | SQL_TOK_HASH_AJ
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____HASH_AJ();
    }
    | SQL_TOK_NO_QUERY_TRANSFORMATION
    {
        STL_PARSER_QUERY_TRANSFORMATION_HINTS____NO_QUERY_TRANSFORMATION();
    }
    ;

other_hints:
    SQL_TOK_PUSH_PRED
    {
        STL_PARSER_OTHER_HINTS____PUSH_PRED();
    }
    | SQL_TOK_PUSH_PRED SQL_TOK_LEFT_PAREN error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_PUSH_PRED SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_OTHER_HINTS____PUSH_PRED_WITH_TABLE();
    }
    | SQL_TOK_NO_PUSH_PRED
    {
        STL_PARSER_OTHER_HINTS____NO_PUSH_PRED();
    }
    | SQL_TOK_NO_PUSH_PRED SQL_TOK_LEFT_PAREN error
    {
        STL_PARSER_ACCESS_PATH_HINTS____ERROR();
    }
    | SQL_TOK_NO_PUSH_PRED SQL_TOK_LEFT_PAREN
    table_identifier_chain    // table name
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_OTHER_HINTS____NO_PUSH_PRED_WITH_TABLE();
    }
    | SQL_TOK_PUSH_SUBQ
    {
        STL_PARSER_OTHER_HINTS____PUSH_SUBQ();
    }
    | SQL_TOK_NO_PUSH_SUBQ
    {
        STL_PARSER_OTHER_HINTS____NO_PUSH_SUBQ();
    }
    | SQL_TOK_USE_DISTINCT_HASH
    {
        STL_PARSER_OTHER_HINTS____USE_DISTINCT_HASH();
    }
    | SQL_TOK_USE_GROUP_HASH
    {
        STL_PARSER_OTHER_HINTS____USE_GROUP_HASH();
    }
    ;

table_identifier_chain_list:
    table_identifier_chain
    {
        STL_PARSER_TABLE_IDENTIFIER_CHAIN_LIST____();
    }
    | table_identifier_chain_list table_identifier_chain
    {
        STL_PARSER_TABLE_IDENTIFIER_CHAIN_LIST____LIST();
    }
    | table_identifier_chain_list SQL_TOK_COMMA table_identifier_chain
    {
        STL_PARSER_TABLE_IDENTIFIER_CHAIN_LIST____COMMA_LIST();
    }
    ;

table_identifier_chain:
    identifier_chain
    {
        STL_PARSER_TABLE_IDENTIFIER_CHAIN____();
    }
    ;

ordering_table_identifier_chain_list:
    ordering_table_identifier_chain
    {
        STL_PARSER_ORDERING_TABLE_IDENTIFIER_CHAIN_LIST____();
    }
    | ordering_table_identifier_chain_list SQL_TOK_COMMA ordering_table_identifier_chain
    {
        STL_PARSER_ORDERING_TABLE_IDENTIFIER_CHAIN_LIST____COMMA_LIST();
    }
    ;

ordering_table_identifier_chain:
    identifier_chain
    {
        STL_PARSER_ORDERING_TABLE_IDENTIFIER_CHAIN____();
    }
    | identifier_chain SQL_TOK_LEFT
    {
        STL_PARSER_ORDERING_TABLE_IDENTIFIER_CHAIN____LEFT();
    }
    | identifier_chain SQL_TOK_RIGHT
    {
        STL_PARSER_ORDERING_TABLE_IDENTIFIER_CHAIN____RIGHT();
    }
    ;

index_identifier_chain_list:
    index_identifier_chain
    {
        STL_PARSER_INDEX_IDENTIFIER_CHAIN_LIST____();
    }
    | index_identifier_chain_list index_identifier_chain
    {
        STL_PARSER_INDEX_IDENTIFIER_CHAIN_LIST____LIST();
    }
    | index_identifier_chain_list SQL_TOK_COMMA index_identifier_chain
    {
        STL_PARSER_INDEX_IDENTIFIER_CHAIN_LIST____COMMA_LIST();
    }
    ;

index_identifier_chain:
    identifier_chain
    {
        STL_PARSER_INDEX_IDENTIFIER_CHAIN____();
    }
    ;

group_by_clause:
    /* empty */
    {
        STL_PARSER_GROUP_BY_CLAUSE____EMPTY();
    }
    | SQL_TOK_GROUP SQL_TOK_BY grouping_element_list
    {
        STL_PARSER_GROUP_BY_CLAUSE____ELEMENT_LIST();
    }
    // | SQL_TOK_GROUP SQL_TOK_BY SQL_TOK_ALL grouping_element_list
    // {
    //     STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    // }
    // | SQL_TOK_GROUP SQL_TOK_BY SQL_TOK_DISTINCT grouping_element_list
    // {
    //     STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    // }
    ;

grouping_element_list:
    grouping_element
    {
        STL_PARSER_GROUPING_ELEMENT_LIST____GROUPING_ELEMENT();
    }
    | grouping_element_list SQL_TOK_COMMA grouping_element
    {
        STL_PARSER_GROUPING_ELEMENT_LIST____GROUPING_ELEMENT_LIST();
    }
    ;

grouping_element:
    ordinary_grouping_set
    {
        STL_PARSER_GROUPING_ELEMENT____ORDINARY_GROUPING_SET();
    }
    // | rollup_list
    // {
    //     STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    // }
    // | cube_list
    // {
    //     STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    // }
    // | grouping_sets_specification
    // {
    //     STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    // }
    | empty_grouping_set
    {
        STL_PARSER_GROUPING_ELEMENT____EMPTY_GROUPING_SET();
    }
    ;
    
ordinary_grouping_set:
    grouping_column_reference
    {
        STL_PARSER_ORDINARY_GROUPING_SET____GROUPING_COLUMN_REFERENCE();
    }
    | // @todo (column_reference구문지원시 grouping column reference list 로 변경) 
    explicit_row_value_constructor 
    {
        STL_PARSER_ORDINARY_GROUPING_SET____GROUPING_COLUMN_REFERENCE_LIST();
    }
    // | SQL_TOK_LEFT_PAREN grouping_column_reference_list SQL_TOK_COMMA grouping_column_reference SQL_TOK_RIGHT_PAREN
    // {
    //     STL_PARSER_ORDINARY_GROUPING_SET____GROUPING_COLUMN_REFERENCE_LIST();
    // }
    ;

grouping_column_reference:
    value_expression   // column reference
    {
        STL_PARSER_GROUPING_COLUMN_REFERENCE____VALUE_EXPRESSION();
    }
    // | identifier_chain // column_reference
    // collate_clause
    // {
    //     /* not support collate clause */
    //     STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    // }
    ;

// column_reference:
//     identifier_chain
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     ;

// grouping_column_reference_list:
//     grouping_column_reference 
//     {
//         STL_PARSER_GROUPING_COLUMN_REFERENCE_LIST____GROUPING_COLUMN_REFERENCE();
//     }
//     | grouping_column_reference_list SQL_TOK_COMMA grouping_column_reference
//     {
//         STL_PARSER_GROUPING_COLUMN_REFERENCE_LIST____GROUPING_COLUMN_REFERENCE_LIST();
//     }
//     ;

// grouping_sets_specification:
//     SQL_TOK_GROUPING SQL_TOK_SETS SQL_TOK_LEFT_PAREN grouping_set_list SQL_TOK_RIGHT_PAREN
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     ;

// grouping_set_list:
//     grouping_set
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     | grouping_set_list SQL_TOK_COMMA grouping_set
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     ;
    
// grouping_set:
//     ordinary_grouping_set
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     | rollup_list
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     | cube_list
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     | grouping_sets_specification
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     | empty_grouping_set
//     {
//         STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//     }
//     ;
    
empty_grouping_set:
    SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_EMPTY_GROUPING_SET____EMPTY();
    }
    ;

having_clause:
    /* empty */
    {
        STL_PARSER_HAVING_CLAUSE____EMPTY();
    }
    | SQL_TOK_HAVING search_condition
    {
        STL_PARSER_HAVING_CLAUSE____SEARCH_CONDITION();
    }
    ;

window_clause:
    /* empty */
    {
        STL_PARSER_WINDOW_CLAUSE____EMPTY();
    }
//    | SQL_TOK_WINDOW window_definition_list
//    {
//        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
//    }
    ;
/*
window_definition_list:
    window_definition
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | window_definition_list SQL_TOK_COMMA window_definition
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_definition:
    new_window_name SQL_TOK_AS window_specification
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

new_window_name:
    window_name
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_name:
    identifier
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_specification:
    SQL_TOK_LEFT_PAREN window_specification_details SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_specification_details:
    existing_window_name window_partition_clause window_order_clause window_frame_clause
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

existing_window_name:
    window_name
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_partition_clause:
    SQL_TOK_PARTITION SQL_TOK_BY window_partition_column_reference_list
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_partition_column_reference_list:
    window_partition_column_reference
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | window_partition_column_reference_list SQL_TOK_COMMA window_partition_column_reference
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_partition_column_reference:
    column_reference
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | column_reference collate_clause
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_order_clause:
    SQL_TOK_ORDER SQL_TOK_BY sort_specification_list
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_clause:
    window_frame_units window_frame_extent
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | window_frame_units window_frame_extent window_frame_exclusion
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_units:
    SQL_TOK_ROWS
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_RANGE
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_GROUPS
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_extent:
    window_frame_start
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | window_frame_between
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_start:
    SQL_TOK_UNBOUNDED SQL_TOK_PRECEDING
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | window_frame_preceding
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_CURRENT SQL_TOK_ROW
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_preceding:
    unsigned_value_specification SQL_TOK_PRECEDING
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_between:
    SQL_TOK_BETWEEN window_frame_bound_1 window_frame_bound_2
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_bound_1:
    window_frame_bound
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_bound_2:
    window_frame_bound
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_bound:
    window_frame_start
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_UNBOUNDED SQL_TOK_FOLLOWING
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | window_frame_following
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_following:
    unsigned_value_specification SQL_TOK_FOLLOWING
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;

window_frame_exclusion:
    SQL_TOK_EXCLUDE SQL_TOK_CURRENT SQL_TOK_ROW
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_EXCLUDE SQL_TOK_GROUP
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_EXCLUDE SQL_TOK_TIES
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    | SQL_TOK_EXCLUDE SQL_TOK_NO SQL_TOK_OTHERS
    {
        STL_PARSER_NOT_SUPPORT();   // -------------------------------------- NOT SUPPORT
    }
    ;
*/
order_by_clause:
    /* empty */
    {
        STL_PARSER_ORDER_BY_CLAUSE____EMPTY();
    }
    | SQL_TOK_ORDER SQL_TOK_BY sort_specification_list
    {
        STL_PARSER_ORDER_BY_CLAUSE____SORT();
    }
    ;

sort_specification_list:
    sort_specification
    {
        STL_PARSER_SORT_SPECIFICATION_LIST____SORT_SPEC();
    }
    | sort_specification_list SQL_TOK_COMMA sort_specification
    {
        STL_PARSER_SORT_SPECIFICATION_LIST____SORT_SPEC_LIST();
    }
    ;

sort_specification:
    value_expression
    {
        STL_PARSER_SORT_SPECIFICATION____KEY();
    }
    | value_expression sort_order_clause
    {
        STL_PARSER_SORT_SPECIFICATION____KEY_SORT();
    }
    | value_expression nulls_order_clause
    {
        STL_PARSER_SORT_SPECIFICATION____KEY_NULLS();
    }
    | value_expression sort_order_clause nulls_order_clause
    {
        STL_PARSER_SORT_SPECIFICATION____KEY_SORT_NULLS();
    }
    ;

result_offset_clause:
    /* empty */
    {
        STL_PARSER_RESULT_OFFSET_CLAUSE____EMPTY();
    }
    |
    SQL_TOK_OFFSET simple_value_specification result_offset_noise_rows
    {
        STL_PARSER_RESULT_OFFSET_CLAUSE____COUNT();
    }
    ;

result_offset_noise_rows:
    /* empty */
    {
    }
    | SQL_TOK_ROW
    | SQL_TOK_ROWS
    ;

fetch_limit_clause:
    /* empty */
    {
        STL_PARSER_FETCH_LIMIT_CLAUSE____EMPTY();
    }
    | fetch_first_clause
    {
        STL_PARSER_FETCH_LIMIT_CLAUSE____COUNT();
    }
    | limit_clause
    {
        STL_PARSER_FETCH_LIMIT_CLAUSE____COUNT();
    }
    ;

fetch_first_clause:
    SQL_TOK_FETCH fetch_first_noise_next simple_value_specification fetch_first_noise_rows
    {
        STL_PARSER_FETCH_FIRST_CLAUSE____COUNT();
    }
    |
    SQL_TOK_FETCH fetch_first_noise_next fetch_first_noise_rows
    {
        STL_PARSER_FETCH_FIRST_CLAUSE____EMPTY();
    }
    ;

fetch_first_noise_next:
    /* empty */
    {
    }
    | SQL_TOK_FIRST
    | SQL_TOK_NEXT
    ;

fetch_first_noise_rows:
    /* empty */
    {
    }
    | SQL_TOK_ROW SQL_TOK_ONLY
    | SQL_TOK_ROWS SQL_TOK_ONLY
    ;

limit_clause:
    SQL_TOK_LIMIT simple_value_specification
    {
        STL_PARSER_LIMIT_CLAUSE____COUNT();
    }
    |
    SQL_TOK_LIMIT SQL_TOK_ALL
    {
        STL_PARSER_LIMIT_CLAUSE____ALL();
    }
    |
    SQL_TOK_LIMIT simple_value_specification SQL_TOK_COMMA simple_value_specification
    {
        STL_PARSER_LIMIT_CLAUSE____SKIP_LIMIT();
    }
    ;

value_expression:
    value_expression_primary
    {
        STL_PARSER_VALUE_EXPRESSION____();
    }
    ;

value_expression_primary:
    // parenthesized_value_expression
    // {
    //     STL_PARSER_VALUE_EXPRESSION_PRIMARY____SINGLE();
    // }
    // |
    value_OR_term
    {
        STL_PARSER_VALUE_EXPRESSION_PRIMARY____OR();
    }
    ;

parenthesized_value_expression:
    SQL_TOK_LEFT_PAREN value_expression_primary SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_PARENTHESIZED_VALUE_EXPRESSION____EXPRESSION();
    }
    | SQL_TOK_LEFT_PAREN query_expression_body
    order_by_clause result_offset_clause fetch_limit_clause SQL_TOK_RIGHT_PAREN 
    {
        STL_PARSER_PARENTHESIZED_VALUE_EXPRESSION____QUERY();
    }
    ;

value_OR_term:
    value_AND_term
    {
        STL_PARSER_VALUE_OR_TERM____SINGLE();
    }
    | value_OR_term SQL_TOK_OR value_AND_term
    {
        STL_PARSER_VALUE_OR_TERM____OR();
    }
    ;

value_AND_term:
    value_NOT_term
    {
        STL_PARSER_VALUE_AND_TERM____SINGLE();
    }
    | value_AND_term SQL_TOK_AND value_NOT_term
    {
        STL_PARSER_VALUE_AND_TERM____AND();
    }
    ;

value_NOT_term:
    value_test
    {
        STL_PARSER_VALUE_NOT_TERM____SINGLE();
    }
    | SQL_TOK_NOT value_NOT_term
    {
        STL_PARSER_VALUE_NOT_TERM____NOT();
    }
    ;

value_test:
    value_predicate
    {
        STL_PARSER_VALUE_TEST____PREDICATE();
    }
    | comparison_predicate
    {
        STL_PARSER_VALUE_TEST____COMP();
    }
    ;

value_predicate:
    value_predicate_2
    {
        STL_PARSER_VALUE_PREDICATE____PREDICATE();
    }
    | between_predicate
    {
        STL_PARSER_VALUE_PREDICATE____BETWEEN();
    }
    | like_predicate
    {
        STL_PARSER_VALUE_PREDICATE____LIKE();
    }
    | in_predicate
    {
        STL_PARSER_VALUE_PREDICATE____IN();
    }
    | exists_predicate
    {
        STL_PARSER_VALUE_PREDICATE____EXISTS();
    }
    | quantified_comparison_predicate
    {
        STL_PARSER_VALUE_PREDICATE____QUANTIFIED_COMP();
    }
    ;

value_predicate_2:
    value_predicate_3
    {
        STL_PARSER_VALUE_PREDICATE_2____PREDICATE();
    }
    | concatenation
    {
        STL_PARSER_VALUE_PREDICATE_2____CONCAT();
    }
    ;

value_predicate_3:
    value_predicate_4
    {
        STL_PARSER_VALUE_PREDICATE_3____PREDICATE();
    }
    | value_predicate_3 SQL_TOK_IS boolean_literal
    {
        STL_PARSER_VALUE_PREDICATE_3____IS_TRUTH();
    }
    | value_predicate_3 SQL_TOK_IS SQL_TOK_NOT boolean_literal
    {
        STL_PARSER_VALUE_PREDICATE_3____IS_NOT_TRUTH();
    }
    | value_predicate_3 SQL_TOK_IS SQL_TOK_NULL
    {
        STL_PARSER_VALUE_PREDICATE_3____IS_NULL();
    }
    | value_predicate_3 SQL_TOK_IS SQL_TOK_NOT SQL_TOK_NULL
    {
        STL_PARSER_VALUE_PREDICATE_3____IS_NOT_NULL();
    }
    ;

value_predicate_4:
    value_term
    {
        STL_PARSER_VALUE_PREDICATE_4____TERM();
    }
    | value_predicate_4 SQL_TOK_PLUS_SIGN value_term
    {
        STL_PARSER_VALUE_PREDICATE_4____ADD();
    }
    | value_predicate_4 SQL_TOK_MINUS_SIGN value_term
    {
        STL_PARSER_VALUE_PREDICATE_4____SUB();
    }
    ;

value_term:
    value_factor
    {
        STL_PARSER_VALUE_TERM____FACTOR();
    }
    | value_term SQL_TOK_ASTERISK value_factor
    {
        STL_PARSER_VALUE_TERM____MULTIPLE();
    }
    | value_term SQL_TOK_SOLIDUS value_factor
    {
        STL_PARSER_VALUE_TERM____DIVIDE();
    }
    ;

sign:  // str
    SQL_TOK_PLUS_SIGN
    {
        STL_PARSER_SIGN____PLUS();
    }
    | SQL_TOK_MINUS_SIGN
    {
        STL_PARSER_SIGN____MINUS();
    }
    ;

value_factor:
    value_factor_2
    {
        STL_PARSER_VALUE_FACTOR____FACTOR();
    }
    | SQL_TOK_PLUS_SIGN value_factor_2
    {
        STL_PARSER_VALUE_FACTOR____POSITIVE();
    }
    | SQL_TOK_MINUS_SIGN value_factor_2
    {
        STL_PARSER_VALUE_FACTOR____NEGATIVE();
    }
    ;

value_factor_2:
    value_factor_3
    {
        STL_PARSER_VALUE_FACTOR_2____FACTOR();
    }
    | value_factor_3 time_zone
    {
        STL_PARSER_VALUE_FACTOR_2____TIME_ZONE();
    }
    ;

value_factor_3:
    nonparenthesized_value_expression_primary
    {
        STL_PARSER_VALUE_FACTOR_3____NON_PAREN_VALUE();
    }
    | parenthesized_value_expression
    {
        STL_PARSER_VALUE_FACTOR_3____PAREN_VALUE();
    }
    | cast_specification
    {
        STL_PARSER_VALUE_FACTOR_3____CAST();
    }
    | numeric_value_function
    {
        STL_PARSER_VALUE_FACTOR_3____NUMERIC_FUNCTION();
    }
    | string_value_function
    {
        STL_PARSER_VALUE_FACTOR_3____STRING_FUNCTION();
    }
    | datetime_value_function
    {
        STL_PARSER_VALUE_FACTOR_3____DATETIME_FUNCTION();
    }
    | nvl_function
    {
        STL_PARSER_VALUE_FACTOR_3____NVL_FUNCTION();
    }
    | dump_function
    {
        STL_PARSER_VALUE_FACTOR_3____DUMP_FUNCTION();
    }
    | decode_function
    {
        STL_PARSER_VALUE_FACTOR_3____DECODE_FUNCTION();
    }
    | case2_function
    {
        STL_PARSER_VALUE_FACTOR_3____CASE2_FUNCTION();
    }
    | general_comparison_function
    {
        STL_PARSER_VALUE_FACTOR_3____GENERAL_COMPARISON_FUNCTION();
    }
    // | interval_value_function
    // {
         // STL_PARSER_VALUE_FACTOR_3____INTERVAL_FUNCTION();
    // }
    ;

// row_value_predicand:
//     nonparenthesized_value_expression_primary
//     {
//         //
//     }
//     | explicit_row_value_constructor
//     {
//         //
//     }



nonparenthesized_value_expression_primary:
    unsigned_value_specification
    {
        STL_PARSER_NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY____UNSIGNED_VALUE();
    }
    | sequence_function
    {
        STL_PARSER_NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY____SEQUENCE_FUNCTION();
    }
    | session_function
    {
        STL_PARSER_NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY____SESSION_FUNCTION();
    }
    | aggregate_function
    {
        STL_PARSER_NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY____AGGREGATE_FUNCTION();
    }
    | case_expression
    {
        STL_PARSER_NONPARENTHESIZED_VALUE_EXPRESSION_PRIMARY____CASE_EXPRESSION();
    }
    ;

comparison_predicate:  // qlpFunction
    value_predicate // row_value_expression  // row_value_predicand
    comp_op value_predicate // comparison_predicate_part_2
    {
        STL_PARSER_COMPARISON_PREDICATE____VALUE_VALUE();
    }
    |
    value_predicate
    comparison_predicate_part_2
    {
        STL_PARSER_COMPARISON_PREDICATE____VALUE_ROW();
    }
    |
    row_value_constructor_predicand
    comp_op value_predicate
    {
        STL_PARSER_COMPARISON_PREDICATE____ROW_VALUE();
    }
    |
    row_value_constructor_predicand
    comparison_predicate_part_2
    {
        STL_PARSER_COMPARISON_PREDICATE____ROW_ROW();
    }
    ;

comparison_predicate_part_2:
     comp_op row_predicate_value
     {
         STL_PARSER_COMP_PREDICATE_PART_2____();
     }
     ;

row_predicate_value:
    row_value_constructor_predicand
    {
        STL_PARSER_ROW_PREDICATE____PREDICATE_VALUE();
    }
    ;

comp_op:  // qlpValue : integer
    SQL_TOK_EQUAL_OPERATOR
    {
        STL_PARSER_COMP_OP____EQUAL();
    }
    | SQL_TOK_NOT_EQUAL_OPERATOR
    {
        STL_PARSER_COMP_OP____NOT_EQUAL();
    }
    | SQL_TOK_NOT_EQUAL_OPERATOR_EXPAND
    {
        STL_PARSER_COMP_OP____NOT_EQUAL();
    }
    | SQL_TOK_LESS_THAN_OPERATOR
    {
        STL_PARSER_COMP_OP____LESS_THAN();
    }
    | SQL_TOK_LESS_THAN_EQUAL_OPERATOR
    {
        STL_PARSER_COMP_OP____LESS_THAN_EQUAL();
    }
    | SQL_TOK_GREATER_THAN_OPERATOR
    {
        STL_PARSER_COMP_OP____GREATER_THAN();
    }
    | SQL_TOK_GREATER_THAN_EQUAL_OPERATOR
    {
        STL_PARSER_COMP_OP____GREATER_THAN_EQUAL();
    }
    ;

between_predicate:  // qlpFunction
    value_predicate_2 // row_value_expression // row_value_predicand
    between_predicate_part_2
    {
        STL_PARSER_BETWEEN_PREDICATE____();
    }
    |
    value_predicate_2
    SQL_TOK_NOT between_predicate_part_2
    {
        STL_PARSER_NOT_BETWEEN_PREDICATE____();
    }
    |
    value_predicate_2 // row_value_expression // row_value_predicand
    between_rewrite_asymetric_predicate
    {
        STL_PARSER_BETWEEN_PREDICATE____REWRITE_ASYM();
    }
    |
    value_predicate_2
    SQL_TOK_NOT between_rewrite_asymetric_predicate
    {
        STL_PARSER_NOT_BETWEEN_PREDICATE____REWRITE_ASYM();
    }
    ;

between_rewrite_asymetric_predicate:
    SQL_TOK_BETWEEN 
    value_predicate_2 // row_value_expression // row_value_predicand
    SQL_TOK_AND value_predicate_2 // row_value_expression // row_value_predicand
    {
        STL_PARSER_BETWEEN_REWRITE_ASYMETRIC_PREDICATE____WITHOUT_ASYM();
    }
    |
    SQL_TOK_BETWEEN SQL_TOK_ASYMMETRIC
    value_predicate_2 // row_value_expression // row_value_predicand
    SQL_TOK_AND value_predicate_2 // row_value_expression // row_value_predicand
    {
        STL_PARSER_BETWEEN_REWRITE_ASYMETRIC_PREDICATE____WITH_ASYM();
    }
    ;

between_predicate_part_2:
    SQL_TOK_BETWEEN SQL_TOK_SYMMETRIC
    value_predicate_2 // row_value_expression // row_value_predicand
    SQL_TOK_AND value_predicate_2 // row_value_expression // row_value_predicand
    {
        STL_PARSER_BETWEEN_PREDICATE_PART_2____BETWEEN();
    }
    ;

// asymmetric_or_symmetric:
// /* empty */
//     {
//         STL_PARSER_ASYMMETRIC_OR_SYMMETRIC____DEFAULT();
//     }
//     | SQL_TOK_ASYMMETRIC
//     {
//         STL_PARSER_ASYMMETRIC_OR_SYMMETRIC____ASYMMETRIC();
//     }
//     | SQL_TOK_SYMMETRIC
//     {
//         STL_PARSER_ASYMMETRIC_OR_SYMMETRIC____SYMMETRIC();
//     }
//     ;

like_predicate:
    character_like_predicate
    {
        /* char & binary 공통 */
        STL_PARSER_LIKE_PREDICATE____();
    }
    // | octet_like_predicate
    // {
    // }
    ;

// character_like_predicate:
//     value_expression // row_value_expression // row_value_predicand
//     character_like_predicate_part_2
//     {
//         STL_PARSER_CHARACTER_LIKE_PREDICATE____();
//     }
//     ;

character_like_predicate:
    value_predicate_2 // row_value_expression // row_value_predicand
    SQL_TOK_LIKE value_predicate_2 // string_value_expression // character_pattern
    {
        STL_PARSER_CHARACTER_LIKE_PREDICATE____LIKE();
    }
    | value_predicate_2 // row_value_expression // row_value_predicand
    SQL_TOK_NOT SQL_TOK_LIKE
    value_predicate_2 // string_value_expression // character_pattern
    {
        STL_PARSER_CHARACTER_LIKE_PREDICATE____NOT_LIKE();
    }
    | value_predicate_2 // row_value_expression // row_value_predicand
    SQL_TOK_LIKE value_predicate_2 // string_value_expression // character_pattern
    SQL_TOK_ESCAPE value_predicate_2 // string_value_expression // escape_character
    {
        STL_PARSER_CHARACTER_LIKE_PREDICATE____LIKE_ESCAPE();
    }
    | value_predicate_2 // row_value_expression // row_value_predicand
    SQL_TOK_NOT SQL_TOK_LIKE
    value_predicate_2 // string_value_expression // character_pattern
    SQL_TOK_ESCAPE value_predicate_2 // string_value_expression // escape_character
    {
        STL_PARSER_CHARACTER_LIKE_PREDICATE____NOT_LIKE_ESCAPE();
    }
    | value_predicate_2
    SQL_TOK_LIKE value_predicate_2
    SQL_TOK_LEFT_BRACE SQL_TOK_ESCAPE character_string_literal SQL_TOK_RIGHT_BRACE
    {
        STL_PARSER_CHARACTER_LIKE_PREDICATE____LIKE_ESCAPE_SEQUENCE();
    }
    | value_predicate_2
    SQL_TOK_NOT SQL_TOK_LIKE value_predicate_2
    SQL_TOK_LEFT_BRACE SQL_TOK_ESCAPE character_string_literal SQL_TOK_RIGHT_BRACE
    {
        STL_PARSER_CHARACTER_LIKE_PREDICATE____NOT_LIKE_ESCAPE_SEQUENCE();
    }
    ;

in_predicate:
    row_value_constructor_predicand // row_value_predicand
    in_predicate_part_2
    {
        STL_PARSER_IN_PREDICATE____LIST();
    }
    |
    value_predicate_2
    in_predicate_part_2
    {
        STL_PARSER_IN_PREDICATE____();
    }
    ;

in_predicate_part_2:
    SQL_TOK_IN in_predicate_value
    {
        STL_PARSER_IN_PREDICATE____IN();
    }
    | SQL_TOK_NOT SQL_TOK_IN in_predicate_value
    {
        STL_PARSER_IN_PREDICATE____NOT_IN();
    }
    ;

in_predicate_value:
    SQL_TOK_LEFT_PAREN in_value_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_IN_PREDICATE____PREDICATE_VALUE();
    }
    | table_subquery
    {
        STL_PARSER_IN_PREDICATE____TABLE_SUBQUERY();
    }
    ;

in_value_list:
    row_list
    {
        STL_PARSER_IN_PREDICATE____IN_SINGLE();
    }
    | in_value_list SQL_TOK_COMMA row_list
    {
        STL_PARSER_IN_PREDICATE____IN_LIST();
    }
    ;

row_list:
    row_value_constructor_predicand
    {
        STL_PARSER_IN_PREDICATE____ROW_LIST();
    }
    | value_expression
    {
        STL_PARSER_IN_PREDICATE____ROW_SINGLE();
    }
    ;

exists_predicate:
    SQL_TOK_EXISTS table_subquery
    {
        STL_PARSER_EXISTS_PREDICATE____();
    }
    ;

quantified_comparison_predicate:
     row_value_constructor_predicand   // row_value_predicand
     quantified_comparison_predicate_part_2
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____LIST();
     }
     |
     value_predicate
     quantified_comparison_predicate_part_2
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____();
     }
     ;

quantified_comparison_predicate_part_2:
     comp_op quantifier in_predicate_value
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____PART_2();
     }
     ;

quantifier:
     all
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____QUANTIFIER_ALL();
     }
     | some
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____QUANTIFIER_SOME();
     }
     ;

all:
     SQL_TOK_ALL
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____ALL();
     }

some:
     SQL_TOK_SOME
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____SOME();
     }
     | SQL_TOK_ANY
     {
         STL_PARSER_QUANTIFIED_COMP_PREDICATE____ANY();
     }
     ;

concatenation:
    value_predicate_3 // character_value_expression
    SQL_TOK_CONCAT_OPER value_predicate_3 // character_primary
    {
        STL_PARSER_CONCATENATION____SINGLE();
    }
    | concatenation // character_value_expression
    SQL_TOK_CONCAT_OPER value_predicate_3 // character_primary
    {
        STL_PARSER_CONCATENATION____LIST();
    }
    ;

sequence_function:  // ???
    SQL_TOK_CURRVAL SQL_TOK_LEFT_PAREN identifier_chain SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SEQUENCE_FUNCTION____CURRVAL();
    }
    |
    SQL_TOK_NEXTVAL SQL_TOK_LEFT_PAREN identifier_chain SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SEQUENCE_FUNCTION____NEXTVAL();
    }
    |
    SQL_TOK_NEXT SQL_TOK_VALUE SQL_TOK_FOR identifier_chain
    {
        STL_PARSER_SEQUENCE_FUNCTION____NEXT_VALUE_FOR();
    }
    ;

numeric_value_function:
    absolute_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ABSOLUTE();
    }
    | positive_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____POSITIVE();
    }
    | negative_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____NEGATIVE();
    }
    | addition_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ADDITION();
    }
    | subtraction_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____SUBTRACTION();
    }
    | multiplication_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____MULTIPLICATION();
    }
    | division_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____DIVISION();
    }
    | degrees_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____DEGREES();
    }
    | factorial_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____FACTORIAL();
    }
    | log_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____LOG();
    }
    | pi_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____PI();
    }
    | radians_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____RADIANS();
    }
    | random_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____RANDOM();
    }
    | round_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ROUND();
    }
    | sign_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____SIGN();
    }
    | trunc_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____TRUNC();
    }
    | modulus_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____MODULUS();
    }
    | natural_logarithm
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____NATURAL_LOGARITHM();
    }
    | exponential_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____EXPONENTIAL();
    }
    | power_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____POWER();
    }
    | cube_root
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____CUBE_ROOT();
    }
    | square_root
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____SQUARE_ROOT();
    }
    | floor_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____FLOOR();
    }
    | ceiling_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____CEILING();
    }
    | width_bucket_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____WIDTH_BUCKET();
    }
    | arc_consine_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ACOS();
    }
    | arc_sine_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ASIN();
    }
    | arc_tangent_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ATAN();
    }
    | arc_tangent2_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ATAN2();
    }
    | cosine_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____COS();
    }
    | cotangent_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____COT();
    }
    | sine_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____SIN();
    }
    | tangent_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____TAN();
    }
    | bitwise_and_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____BITAND();
    }
    | bitwise_not_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____BITNOT();
    }
    | bitwise_or_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____BITOR();
    }
    | bitwise_xor_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____BITXOR();
    }
    | bitwise_shift_left_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____SHIFT_LEFT();
    }
    | bitwise_shift_right_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____SHIFT_RIGHT();
    }
    | bit_length_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____BIT_LENGTH();
    }
    | char_length_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____CHAR_LENGTH();
    }
    | octet_length_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____OCTET_LENGTH();
    }
    | position_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____POSITION();
    }
    | instr_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____INSTR();
    }
    | extract_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____EXTRACT();
    }
    | rowid_object_id_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ROWID_OBJECT_ID();
    }
    | rowid_page_id_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ROWID_PAGE_ID();
    }
    | rowid_row_number_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ROWID_ROW_NUMBER();
    }
    | rowid_tablespace_id_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____ROWID_TABLESPACE_ID();
    }
    | to_number_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____TO_NUMBER();
    }
    | to_native_real_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____TO_NATIVE_REAL();
    }
    | to_native_double_value_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____TO_NATIVE_DOUBLE();
    }
    | statement_view_scn_function
    {
        STL_PARSER_NUMERIC_VALUE_FUNCTION____STATEMENT_VIEW_SCN();
    }
    ;

absolute_value_function:
    SQL_TOK_ABS
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        /* interval_value_function도 여기에 해당 */
        STL_PARSER_ABSOLUTE_FUNCTION____();
    }
    ;

positive_value_function:
    SQL_TOK_POSITIVE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_POSITIVE_FUNCTION____();
    }
    ;

negative_value_function:
    SQL_TOK_NEGATIVE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NEGATIVE_FUNCTION____();
    }
    ;

addition_value_function:
    SQL_TOK_ADDITION
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ADDITION_FUNCTION____();
    }
    ;

subtraction_value_function:
    SQL_TOK_SUBTRACTION
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SUBTRACTION_FUNCTION____();
    }
    ;

multiplication_value_function:
    SQL_TOK_MULTIPLICATION
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_MULTIPLICATION_FUNCTION____();
    }
    ;

division_value_function:
    SQL_TOK_DIVISION
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DIVISION_FUNCTION____();
    }
    ;

degrees_value_function:
    SQL_TOK_DEGREES
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DEGREES_FUNCTION____();
    }
    ;

factorial_value_function:
    SQL_TOK_FACTORIAL
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_FACTORIAL_FUNCTION____();
    }
    ;

log_value_function:
    SQL_TOK_LOG
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_LOG10_FUNCTION____();
    }
    |
    SQL_TOK_LOG
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_LOG_FUNCTION____();
    }
    ;

pi_value_function:
    SQL_TOK_PI
    SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_PI_FUNCTION____();
    }
    ;

radians_value_function:
    SQL_TOK_RADIANS
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_RADIANS_FUNCTION____();
    }
    ;

random_value_function:
    SQL_TOK_RANDOM
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_RANDOM_FUNCTION____();
    }
    ;

round_value_function:
    SQL_TOK_ROUND
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROUND_INTEGER_FUNCTION____();
    }
    |
    SQL_TOK_ROUND
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROUND_SCALE_FUNCTION____();
    }
    ;

sign_value_function:
    SQL_TOK_SIGN
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SIGN_FUNCTION____();
    }
    ;

trunc_value_function:
    SQL_TOK_TRUNC
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TRUNC_INTEGER_FUNCTION____();
    }
    |
    SQL_TOK_TRUNC
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TRUNC_SCALE_FUNCTION____();
    }
    ;

modulus_value_function:
    SQL_TOK_MOD
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_MODULUS_FUNCTION____();
    }
    ;

natural_logarithm:
    SQL_TOK_LN
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NATURAL_LOGARITHM____();
    }
    ;

exponential_function:
    SQL_TOK_EXP
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_EXPONENTIAL_FUNCTION____();
    }
    ;

power_function:
    SQL_TOK_POWER
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_POWER_FUNCTION____();
    }
    ;

cube_root:
    SQL_TOK_CBRT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CUBE_ROOT____();
    }
    ;

square_root:
    SQL_TOK_SQRT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SQUARE_ROOT____();
    }
    ;

floor_function:
    SQL_TOK_FLOOR
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_FLOOR_FUNCTION____();
    }
    ;

ceiling_function:
    SQL_TOK_CEIL
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CEILING_FUNCTION____();
    }
    | SQL_TOK_CEILING
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CEILING_FUNCTION____();
    }
    ;

width_bucket_function:
    SQL_TOK_WIDTH_BUCKET
    SQL_TOK_LEFT_PAREN value_expression   // expression
    SQL_TOK_COMMA value_expression        // min range
    SQL_TOK_COMMA value_expression        // max range
    SQL_TOK_COMMA value_expression        // bucket count
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_WIDTH_BUCKET_FUNCTION____();
    }
    ;

arc_consine_value_function:
    SQL_TOK_ACOS
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ACOS_FUNCTION____();
    }
    ;

arc_sine_value_function:
    SQL_TOK_ASIN
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ASIN_FUNCTION____();
    }
    ;

arc_tangent_value_function:
    SQL_TOK_ATAN
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ATAN_FUNCTION____();
    }
    ;

arc_tangent2_value_function:
    SQL_TOK_ATAN2
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ATAN2_FUNCTION____();
    }
    ;

cosine_value_function:
    SQL_TOK_COS
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_COS_FUNCTION____();
    }
    ;

cotangent_value_function:
    SQL_TOK_COT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_COT_FUNCTION____();
    }
    ;

sine_value_function:
    SQL_TOK_SIN
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SIN_FUNCTION____();
    }
    ;

tangent_value_function:
    SQL_TOK_TAN
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TAN_FUNCTION____();
    }
    ;

bitwise_and_value_function:
    SQL_TOK_BITAND
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BITAND_FUNCTION____();
    }
    ;

bitwise_not_value_function:
    SQL_TOK_BITNOT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BITNOT_FUNCTION____();
    }
    ;

bitwise_or_value_function:
    SQL_TOK_BITOR
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BITOR_FUNCTION____();
    }
    ;

bitwise_xor_value_function:
    SQL_TOK_BITXOR
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BITXOR_FUNCTION____();
    }
    ;

bitwise_shift_left_value_function:
    SQL_TOK_SHIFT_LEFT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SHIFT_LEFT_FUNCTION____();
    }
    ;

bitwise_shift_right_value_function:
    SQL_TOK_SHIFT_RIGHT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SHIFT_RIGHT_FUNCTION____();
    }
    ;

bit_length_value_function:
    SQL_TOK_BIT_LENGTH
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BIT_LENGTH_FUNCTION____();
    }
    ;

char_length_value_function:
    SQL_TOK_CHAR_LENGTH
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHAR_LENGTH_FUNCTION____();
    }
    |
    SQL_TOK_CHARACTER_LENGTH
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHAR_LENGTH_FUNCTION____();
    }
    |
    SQL_TOK_LENGTH
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHAR_LENGTH_FUNCTION____();
    }
    ;

octet_length_value_function:
    SQL_TOK_OCTET_LENGTH
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_OCTET_LENGTH_FUNCTION____();
    }
    |
    SQL_TOK_BYTE_LENGTH
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_OCTET_LENGTH_FUNCTION____();
    }
    |
    SQL_TOK_LENGTHB
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_OCTET_LENGTH_FUNCTION____();
    }
    ;

position_value_function:
    SQL_TOK_POSITION
    SQL_TOK_LEFT_PAREN value_predicate_2 SQL_TOK_IN value_expression SQL_TOK_RIGHT_PAREN
    //SQL_TOK_LEFT_PAREN value_expression SQL_TOK_IN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_POSITION_FUNCTION____();
    }
    ;

instr_value_function:
    SQL_TOK_INSTR
    SQL_TOK_LEFT_PAREN
    value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_INSTR_FUNCTION____DEFAULT();
    }
    |
    SQL_TOK_INSTR
    SQL_TOK_LEFT_PAREN
    value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_INSTR_FUNCTION____POSITION();
    }
    |
    SQL_TOK_INSTR
    SQL_TOK_LEFT_PAREN
    value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_INSTR_FUNCTION____OCCURRENCE();
    }
    ;    

rowid_object_id_value_function:
    SQL_TOK_ROWID_OBJECT_ID SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROWID_OBJECT_ID_FUNCTION____();
    }
    ;

rowid_page_id_value_function:
    SQL_TOK_ROWID_PAGE_ID SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROWID_PAGE_ID_FUNCTION____();
    }
    ;

rowid_row_number_value_function:
    SQL_TOK_ROWID_ROW_NUMBER SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROWID_ROW_NUMBER_FUNCTION____();
    }
    ;

rowid_tablespace_id_value_function:
    SQL_TOK_ROWID_TABLESPACE_ID SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROWID_TABLESPACE_ID_FUNCTION____();
    }
    ;

to_number_value_function:
    SQL_TOK_TO_NUMBER
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_NUMBER_FUNCTION____DEFAULT();
    }
    |
    SQL_TOK_TO_NUMBER
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_NUMBER_FUNCTION____();
    }
    ;

to_native_real_value_function:
    SQL_TOK_TO_NATIVE_REAL
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_NATIVE_REAL_FUNCTION____DEFAULT();
    }
    |
    SQL_TOK_TO_NATIVE_REAL
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_NATIVE_REAL_FUNCTION____();
    }
    ;

to_native_double_value_function:
    SQL_TOK_TO_NATIVE_DOUBLE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_NATIVE_DOUBLE_FUNCTION____DEFAULT();
    }
    |
    SQL_TOK_TO_NATIVE_DOUBLE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_NATIVE_DOUBLE_FUNCTION____();
    }
    ;

statement_view_scn_function:
    SQL_TOK_STATEMENT_VIEW_SCN SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_STATEMENT_VIEW_SCN_FUNCTION____();
    }
    ;

extract_value_function:
    SQL_TOK_EXTRACT
    SQL_TOK_LEFT_PAREN extract_field SQL_TOK_FROM value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_EXTRACT_FUNCTION____();
    }
    | SQL_TOK_DATE_PART
    SQL_TOK_LEFT_PAREN date_field_string SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DATE_PART_FUNCTION____();
    }
    ;


/**
 * date_field_string
 */ 
date_field_string:
    SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_EXTRACT_FIELD____DATE_FIELD_STRING();
    }
    ;

/**
 * extract_field
 */ 
extract_field:
    primary_datetime_field
    {
        STL_PARSER_EXTRACT_FIELD____PRIMARY_DATETIME_FIELD();
    }
    | time_zone_field
    {
        STL_PARSER_EXTRACT_FIELD____TIME_ZONE_FIELD();
    }
    ;

/**
 * time_zone_field
 */
time_zone_field:
    SQL_TOK_TIMEZONE_HOUR
    {
        STL_PARSER_TIME_ZONE_FIELD____TIME_ZONE_HOUR();
    }
    | SQL_TOK_TIMEZONE_MINUTE
    {
        STL_PARSER_TIME_ZONE_FIELD____TIME_ZONE_MINUTE();
    }
    ;

/**
 * extract_source
 */
// extract_source:
//      datetime_value_expression
//      {
//      }
//      | interval_value_expression
//      {
//      }
//      ;


// character_value_expression:
//     concatenation
//     {
//     }
//     | character_primary
//     {
//     }
//     ;

// concatenation:
//     string_value_expression // character_value_expression
//     SQL_TOK_CONCAT stl_value_primary // character_primary
//     {
//     }
//     ;

// character_primary:
//     nonparenthesized_value_expression_primary // value_expression_primary
//     {
//     }
//     | string_value_function
//     {
//     }
//     ;

// binary_value_expression:
//     binary_concatenation
//     {
//     }
//     | binary_primary
//     {
//     }
//     ;

// binary_concatenation:
//     binary_value_expression SQL_TOK_CONCAT binary_primary
//     {
//     }
//     ;

// binary_primary:
//     value_expression_primary
//     {
//     }
//     | string_value_function
//     {
//     }
//     ;

string_value_function:
    character_value_function
    {
        STL_PARSER_STRING_VALUE_FUNCTION____();
    }
    // | binary_value_function
    // {
    // }
    ;

character_value_function:
    character_substring_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____SUBSTRING();
    }
    | character_substrb_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____SUBSTRB();
    }
    | fold
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____FOLD();
    }
    | concatenate_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____CONCATENATE();
    }
    | trim_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____TRIM();
    }
    | character_overlay_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____OVERLAY();
    }
    | pad_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____PAD();
    }
    | repeat_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____REPEAT();
    }
    | replace_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____REPLACE();
    }
    | split_part_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____SPLITPART();
    }
    | translate_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____TRANSLATE();
    }
    | to_char_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____TO_CHAR();
    }
    | chr_value_function
    {
        STL_PARSER_CHARACTER_VALUE_FUNCTION____CHR();
    }
    ;

character_substring_function:
    SQL_TOK_SUBSTRING
    SQL_TOK_LEFT_PAREN
    value_expression // string_value_expression
    SQL_TOK_FROM value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM();
    }
    |
    SQL_TOK_SUBSTRING
    SQL_TOK_LEFT_PAREN
    value_expression // string_value_expression
    SQL_TOK_FROM value_expression // numeric_value_expression
    SQL_TOK_FOR value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM_FOR();
    }
    |
    //    SQL_TOK_SUBSTRING
    //    SQL_TOK_LEFT_PAREN
    //    value_expression // string_value_expression
    //    SQL_TOK_FROM value_expression // numeric_value_expression
    //    SQL_TOK_USING char_length_units
    //    SQL_TOK_RIGHT_PAREN
    //    {
    //        /* only char */
    //        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM_USING();
    //    }
    //    |
    //    SQL_TOK_SUBSTRING
    //    SQL_TOK_LEFT_PAREN
    //    value_expression // string_value_expression // character_value_expression
    //    SQL_TOK_FROM value_expression // numeric_value_expression
    //    SQL_TOK_FOR value_expression // numeric_value_expression
    //    SQL_TOK_USING char_length_units
    //    SQL_TOK_RIGHT_PAREN
    //    {
    //        /* only char */
    //        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM_FOR_USING();
    //    }
    SQL_TOK_SUBSTR
    SQL_TOK_LEFT_PAREN
    value_expression // string_value_expression
    SQL_TOK_FROM value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM();
    }
    |
    SQL_TOK_SUBSTR
    SQL_TOK_LEFT_PAREN
    value_expression // string_value_expression
    SQL_TOK_FROM value_expression // numeric_value_expression
    SQL_TOK_FOR value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM_FOR();
    }
    |
    //    SQL_TOK_SUBSTR
    //    SQL_TOK_LEFT_PAREN
    //    value_expression // string_value_expression
    //    SQL_TOK_FROM value_expression // numeric_value_expression
    //    SQL_TOK_USING char_length_units
    //    SQL_TOK_RIGHT_PAREN
    //    {
    //        /* only char */
    //        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM_USING();
    //    }
    //    |
    //    SQL_TOK_SUBSTR
    //    SQL_TOK_LEFT_PAREN
    //    value_expression // string_value_expression // character_value_expression
    //    SQL_TOK_FROM value_expression // numeric_value_expression
    //    SQL_TOK_FOR value_expression // numeric_value_expression
    //    SQL_TOK_USING char_length_units
    //    SQL_TOK_RIGHT_PAREN
    //    {
    //        /* only char */
    //        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____FROM_FOR_USING();
    //    }
    //    |
    SQL_TOK_SUBSTRING
    SQL_TOK_LEFT_PAREN
    value_expression               // string_value_expression
    SQL_TOK_COMMA value_expression // numeric_value_expression
    SQL_TOK_COMMA value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* only char */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____COMMA();
    }
    |
    SQL_TOK_SUBSTR
    SQL_TOK_LEFT_PAREN
    value_expression               // string_value_expression
    SQL_TOK_COMMA value_expression // numeric_value_expression
    SQL_TOK_COMMA value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* only char */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____COMMA();
    }
    |
    SQL_TOK_SUBSTRING
    SQL_TOK_LEFT_PAREN
    value_expression               // string_value_expression
    SQL_TOK_COMMA value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____SINGLE_COMMA();
    }
    |
    SQL_TOK_SUBSTR
    SQL_TOK_LEFT_PAREN
    value_expression               // string_value_expression
    SQL_TOK_COMMA value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_SUBSTRING_FUNCTION____SINGLE_COMMA();
    }
    ;

char_length_units:  // qlpValue : integer : dtlStringLengthUnit
    SQL_TOK_CHARACTERS
    {
        STL_PARSER_CHAR_LENGTH_UNITS____CHARACTER();
    }
    | SQL_TOK_CHAR
    {
        STL_PARSER_CHAR_LENGTH_UNITS____CHARACTER();
    }
    | SQL_TOK_OCTETS
    {
        STL_PARSER_CHAR_LENGTH_UNITS____OCTET();
    }
    | SQL_TOK_BYTE
    {
        STL_PARSER_CHAR_LENGTH_UNITS____OCTET();
    }
    ;

character_substrb_function:
    SQL_TOK_SUBSTRB
    SQL_TOK_LEFT_PAREN
    value_expression SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_SUBSTRB_FUNCTION____SINGLE_COMMA();
    }
    |
    SQL_TOK_SUBSTRB
    SQL_TOK_LEFT_PAREN
    value_expression SQL_TOK_COMMA value_expression SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_SUBSTRB_FUNCTION____COMMA();
    }
    ;

fold:
    SQL_TOK_UPPER
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_FOLD____UPPER();
    }
    |
    SQL_TOK_LOWER SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_FOLD____LOWER();
    }
    |
    SQL_TOK_INITCAP SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_FOLD____INITCAP();
    }
    ;

concatenate_function:
    SQL_TOK_CONCAT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CONCATENATE_FUNCTION____();
    }
    |
    SQL_TOK_CONCATENATE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CONCATENATE_FUNCTION____();
    }
    ;

trim_function:
    SQL_TOK_TRIM
    SQL_TOK_LEFT_PAREN trim_operands SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TRIM_FUNCTION____();
    }
    |
    SQL_TOK_LTRIM
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_LTRIM_FUNCTION____DEFAULT();
    }
    |
    SQL_TOK_LTRIM
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_LTRIM_FUNCTION____();
    }
    |
    SQL_TOK_RTRIM
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_RTRIM_FUNCTION____DEFAULT();
    }
    |
    SQL_TOK_RTRIM
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_RTRIM_FUNCTION____();
    }
    ;

trim_operands: // qlpList : qlpNode
    value_expression // string_value_expression // character_value_expression
    {
        STL_PARSER_TRIM_OPERANDS____EXPR();
    }
    | trim_specification SQL_TOK_FROM value_expression // string_value_expression // character_value_expression
    {
        STL_PARSER_TRIM_OPERANDS____TRIM_FROM_EXPR();
    }
    | value_expression // string_value_expression // character_value_expression
    SQL_TOK_FROM value_expression // string_value_expression // character_value_expression
    {
        STL_PARSER_TRIM_OPERANDS____EXPR_FROM_EXPR();
    }
    | trim_specification value_expression // string_value_expression // character_value_expression
    SQL_TOK_FROM value_expression // string_value_expression // character_value_expression
    {
        STL_PARSER_TRIM_OPERANDS____TRIM_EXPR_FROM_EXPR();
    }
    ;

trim_specification:  // qlpValue : string
    SQL_TOK_LEADING
    {
        STL_PARSER_TRIM_SPECIFICATION____LEADING();
    }
    | SQL_TOK_TRAILING
    {
        STL_PARSER_TRIM_SPECIFICATION____TRAILING();
    }
    | SQL_TOK_BOTH
    {
        STL_PARSER_TRIM_SPECIFICATION____BOTH();
    }
    ;

character_overlay_function:
    SQL_TOK_OVERLAY SQL_TOK_LEFT_PAREN value_expression // string_value_expression // character_value_expression
    SQL_TOK_PLACING value_expression // string_value_expression // character_value_expression
    SQL_TOK_FROM value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_OVERLAY_FUNCTION____FROM();
    }
    | SQL_TOK_OVERLAY SQL_TOK_LEFT_PAREN value_expression // string_value_expression // character_value_expression
    SQL_TOK_PLACING value_expression // string_value_expression // character_value_expression
    SQL_TOK_FROM value_expression // numeric_value_expression
    SQL_TOK_FOR value_expression // numeric_value_expression
    SQL_TOK_RIGHT_PAREN
    {
        /* char & binary */
        STL_PARSER_CHARACTER_OVERLAY_FUNCTION____FROM_FOR();
    }
//    | SQL_TOK_OVERLAY SQL_TOK_LEFT_PAREN value_expression // string_value_expression // character_value_expression
//    SQL_TOK_PLACING value_expression // string_value_expression // character_value_expression
//    SQL_TOK_FROM value_expression // numeric_value_expression
//    SQL_TOK_USING char_length_units SQL_TOK_RIGHT_PAREN
//    {
//        /* only char */
//        STL_PARSER_CHARACTER_OVERLAY_FUNCTION____FROM_USING();
//    }
//    | SQL_TOK_OVERLAY SQL_TOK_LEFT_PAREN value_expression // string_value_expression // character_value_expression
//    SQL_TOK_PLACING value_expression // string_value_expression // character_value_expression
//    SQL_TOK_FROM value_expression // numeric_value_expression
//    SQL_TOK_FOR value_expression // numeric_value_expression
//    SQL_TOK_USING char_length_units SQL_TOK_RIGHT_PAREN
//    {
//        /* only char */
//        STL_PARSER_CHARACTER_OVERLAY_FUNCTION____FROM_FOR_USING();
//    }
    ;

// binary_value_function:
//     character_substring_function // binary_substring_function
//     {
//     }
//     | trim_function // binary_trim_function
//     {
//     }
//     | character_overlay_function // binary_overlay_function
//     {
//     }
//     ;

// binary_substring_function:
//     SQL_TOK_SUBSTRING SQL_TOK_LEFT_PAREN string_value_expression // binary_value_expression
//     SQL_TOK_FROM numeric_value_expression SQL_TOK_RIGHT_PAREN
//     {

//     }
//     | SQL_TOK_SUBSTRING SQL_TOK_LEFT_PAREN string_value_expression // binary_value_expression
//     SQL_TOK_FROM numeric_value_expression
//     SQL_TOK_FOR numeric_value_expression SQL_TOK_RIGHT_PAREN
//     {
//     }
//     ;

// binary_trim_function:
//     SQL_TOK_TRIM SQL_TOK_LEFT_PAREN binary_trim_operands SQL_TOK_RIGHT_PAREN
//     {
//     }
//     ;

// binary_trim_operands:
//     string_value_expression // binary_value_expression
//     {
//     }
//     | trim_specification SQL_TOK_FROM string_value_expression // binary_value_expression
//     {
//     }
//     | string_value_expression // binary_value_expression
//     SQL_TOK_FROM string_value_expression // binary_value_expression
//     {
//     }
//     | trim_specification string_value_expression // binary_value_expression
//     SQL_TOK_FROM string_value_expression // binary_value_expression
//     {
//     }
//     ;

// binary_overlay_function:
//     SQL_TOK_OVERLAY SQL_TOK_LEFT_PAREN string_value_expression // binary_value_expression
//     SQL_TOK_PLACING string_value_expression // binary_value_expression
//     SQL_TOK_FROM numeric_value_expression SQL_TOK_RIGHT_PAREN
//     {
//     }
//     | SQL_TOK_OVERLAY SQL_TOK_LEFT_PAREN string_value_expression // binary_value_expression
//     SQL_TOK_PLACING string_value_expression // binary_value_expression
//     SQL_TOK_FROM numeric_value_expression
//     SQL_TOK_FOR numeric_value_expression SQL_TOK_RIGHT_PAREN
//     {
//     }
//     ;

// datetime_value_expression:
//     datetime_factor
//     {
//     }
//     | interval_value_expression SQL_TOK_PLUS_SIGN datetime_factor // datetime_term
//     {
//     }
//     | datetime_value_expression SQL_TOK_PLUS_SIGN term // interval_term
//     {
//     }
//     | datetime_value_expression SQL_TOK_MINUS_SIGN term // interval_term
//     {
//     }
//     ;

// datetime_term:
//     datetime_factor
//     {
//     }
//     ;

// datetime_factor:
//     stl_value_primary // datetime_primary
//     {
//     }
//     | stl_value_primary // datetime_primary
//     time_zone
//     {
//     }
//     ;

// datetime_primary:
//     nonparenthesized_value_expression_primary // value_expression_primary
//     {
//     }
//     | datetime_value_function
//     {
//     }
//     ;


pad_function:
    SQL_TOK_LPAD
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_LPAD_FUNCTION____BOTH();
    }
    |
    SQL_TOK_LPAD
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_LPAD_FUNCTION____BASIC();
    }
    |
    SQL_TOK_RPAD
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_RPAD_FUNCTION____BOTH();
    }
    |
    SQL_TOK_RPAD
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_RPAD_FUNCTION____BASIC();
    }
    ;

repeat_function:
SQL_TOK_REPEAT
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_REPEAT_FUNCTION____();
    }
    ;

replace_function:
    SQL_TOK_REPLACE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_REPLACE_FUNCTION____BOTH();
    }
    |
    SQL_TOK_REPLACE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_REPLACE_FUNCTION____BASIC();
    }
    ;

split_part_function:
SQL_TOK_SPLIT_PART
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SPLITPART_FUNCTION____();
    }
    ;

translate_function:
SQL_TOK_TRANSLATE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TRANSLATE_FUNCTION____();
    }
    ;

to_char_function:
    SQL_TOK_TO_CHAR
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_CHAR_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_CHAR
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_CHAR_FUNCTION____();        
    }
    ;

chr_value_function:
    SQL_TOK_CHR
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHR_FUNCTION____();
    }
    ;

time_zone:
    SQL_TOK_AT time_zone_specifier
    {
        STL_PARSER_TIME_ZONE____();
    }
    ;

time_zone_specifier:
    SQL_TOK_LOCAL
    {
        STL_PARSER_TIME_ZONE_SPECIFIER____LOCAL();
    }
    | SQL_TOK_TIME SQL_TOK_ZONE unsigned_value_specification // interval_primary
    {
        STL_PARSER_TIME_ZONE_SPECIFIER____TIME_ZONE();
    }
    ;

// interval_value_expression:
//     term // interval_term
//     {
//     }
//     | interval_value_expression // interval_value_expression_1
//     SQL_TOK_PLUS_SIGN term // interval_term // interval_term_1
//     {
//     }
//     | interval_value_expression // interval_value_expression_1
//     SQL_TOK_MINUS_SIGN term // interval_term // interval_term_1
//     {
//     }
//     | SQL_TOK_LEFT_PAREN datetime_value_expression SQL_TOK_MINUS_SIGN datetime_factor // datetime_term
//     SQL_TOK_RIGHT_PAREN interval_qualifier
//     {
//     }
//     ;

// interval_term:
//     interval_factor
//     {
//     }
//     | interval_term // interval_term_2
//     SQL_TOK_ASTERISK factor
//     {
//     }
//     | interval_term // interval_term_2
//     SQL_TOK_SOLIDUS factor
//     {
//     }
//     | term SQL_TOK_ASTERISK interval_factor
//     {
//     }
//     ;

// interval_factor:
//     stl_value_primary // interval_primary
//     {
//     }
//     | sign stl_value_primary // interval_primary
//     {
//     }
//     ;

// interval_primary:
//     nonparenthesized_value_expression_primary // value_expression_primary
//     {
//     }
//     | nonparenthesized_value_expression_primary // value_expression_primary
//     interval_qualifier
//     {
//     }
//     | interval_value_function
//     {
//     }
//     ;

// interval_value_expression_1:
//     interval_value_expression
//     {
//     }
//     ;

// interval_term_1:
//     interval_term
//     {
//     }
//     ;

// interval_term_2:
//     interval_term
//     {
//     }
//     ;

// factor:
//     stl_value_primary // numeric_primary
//     {
//     }
//     | sign stl_value_primary // numeric_primary
//     {
//     }
//     ;

interval_qualifier:
    start_field // SQL_TOK_TO
    end_field
    {
        STL_PARSER_INTERVAL_QUALIFIER____START_TO_END();
    }
    | single_datetime_field
    {
        STL_PARSER_INTERVAL_QUALIFIER____SINGLE_DATETIME();
    }
    ;

start_field:
    non_second_primary_datetime_field
    {
        STL_PARSER_START_FIELD____NON_SECOND();
    }
    | non_second_primary_datetime_field SQL_TOK_LEFT_PAREN interval_leading_field_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_START_FIELD____NON_SECOND_INTERVAL();
    }
    ;

end_field:
    SQL_TOK_TO non_second_primary_datetime_field
    {
        STL_PARSER_END_FIELD____NON_SECOND();
    }
    | SQL_TOK_TO SQL_TOK_SECOND
    {
        STL_PARSER_END_FIELD____TO_SECOND();
    }
    | SQL_TOK_TO SQL_TOK_SECOND SQL_TOK_LEFT_PAREN interval_fractional_seconds_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_END_FIELD____TO_SECOND_INTERVAL();
    }
    ;

single_datetime_field:
    non_second_primary_datetime_field
    {
        STL_PARSER_SINGLE_DATETIME_FIELD____NON_SECOND();
    }
    | non_second_primary_datetime_field SQL_TOK_LEFT_PAREN interval_leading_field_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SINGLE_DATETIME_FIELD____NON_SECOND_INTERVAL();
    }
    | SQL_TOK_SECOND
    {
        STL_PARSER_SINGLE_DATETIME_FIELD____SECOND();
    }
    | SQL_TOK_SECOND SQL_TOK_LEFT_PAREN interval_leading_field_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SINGLE_DATETIME_FIELD____SECOND_INTERVAL();
    }
    | SQL_TOK_SECOND SQL_TOK_LEFT_PAREN interval_leading_field_precision SQL_TOK_COMMA
    interval_fractional_seconds_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SINGLE_DATETIME_FIELD____SECOND_INTERVAL_INTERVAL();
    }
    ;

primary_datetime_field:
    non_second_primary_datetime_field
    {
        STL_PARSER_NON_SECOND_PRIMARY_DATETIME_FIELD();
    }
    | SQL_TOK_SECOND
    {
        STL_PARSER_PRIMARY_DATETIME_FIELD____SECOND();
    }
    ;

non_second_primary_datetime_field:
    SQL_TOK_YEAR
    {
        STL_PARSER_NON_SECOND_PRIMARY_DATETIME_FIELD____YEAR();
    }
    | SQL_TOK_MONTH
    {
        STL_PARSER_NON_SECOND_PRIMARY_DATETIME_FIELD____MONTH();
    }
    | SQL_TOK_DAY
    {
        STL_PARSER_NON_SECOND_PRIMARY_DATETIME_FIELD____DAY();
    }
    | SQL_TOK_HOUR
    {
        STL_PARSER_NON_SECOND_PRIMARY_DATETIME_FIELD____HOUR();
    }
    | SQL_TOK_MINUTE
    {
        STL_PARSER_NON_SECOND_PRIMARY_DATETIME_FIELD____MINUTE();
    }
    ;

interval_leading_field_precision:
    unsigned_integer
    {
        STL_PARSER_INTERVAL_LEADING_FIELD_PRECISION____();
    }
    ;

interval_fractional_seconds_precision:
    unsigned_integer
    {
        STL_PARSER_INTERVAL_FRACTIONAL_SECONDS_PRECISION____();
    }
    ;

// interval_value_function:
//     interval_absolute_value_function
//     {
//     }
//     ;

// interval_absolute_value_function:
//     SQL_TOK_ABS SQL_TOK_LEFT_PAREN value_expression // interval_value_expression
//     SQL_TOK_RIGHT_PAREN
//     {
//     }
//     ;

datetime_value_function:  // qlpFunction
    sysdate_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____SYSDATE();
    }
    | systime_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____SYSTIME();
    }
    | systimestamp_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____SYSTIMESTAMP();
    }
    | clock_date_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____CLOCK_DATE();
    }
    | current_date_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____STATEMENT_DATE();
    }
    | transaction_date_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TRANSACTION_DATE();
    }
    | clock_time_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____CLOCK_TIME();
    }
    | current_time_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____STATEMENT_TIME();
    }
    | transaction_time_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TRANSACTION_TIME();
    }
    | clock_timestamp_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____CLOCK_TIMESTAMP();
    }
    | current_timestamp_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____STATEMENT_TIMESTAMP();
    }
    | transaction_timestamp_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TRANSACTION_TIMESTAMP();
    }
    | clock_localtime_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____CLOCK_LOCALTIME();
    }
    | statement_localtime_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____STATEMENT_LOCALTIME();
    }
    | transaction_localtime_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TRANSACTION_LOCALTIME();
    }
    | clock_localtimestamp_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____CLOCK_LOCALTIMESTAMP();
    }
    | statement_localtimestamp_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____STATEMENT_LOCALTIMESTAMP();
    }
    | transaction_localtimestamp_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TRANSACTION_LOCALTIMESTAMP();
    }
    | adddate_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____ADDDATE();
    }
    | addtime_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____ADDTIME();
    }
    | dateadd_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____DATEADD();
    }
    | date_add_value_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____DATE_ADD();
    }
    | to_date_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TO_DATE();
    }
    | to_time_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TO_TIME();
    }
    | to_time_with_time_zone_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TO_TIME_WITH_TIME_ZONE();
    }
    | to_timestamp_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TO_TIMESTAMP();
    }
    | to_timestamp_with_time_zone_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____TO_TIMESTAMP_WITH_TIME_ZONE();
    }
    | last_day_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____LAST_DAY();
    }
    | add_months_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____ADD_MONTHS();
    }
    | from_unixtime_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____FROM_UNIXTIME();
    }
    | datediff_function
    {
        STL_PARSER_DATETIME_VALUE_FUNCTION____DATEDIFF();
    }
    ;

/* SQL_TOK_ROW_DATE() 은 제거되어야 함 */
sysdate_value_function:
    SQL_TOK_SYSDATE
    ;

systime_value_function:
    SQL_TOK_SYSTIME
    ;

systimestamp_value_function:
    SQL_TOK_SYSTIMESTAMP
    ;

clock_date_value_function:
    SQL_TOK_ROW_DATE SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CLOCK_DATE SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

current_date_value_function:
    SQL_TOK_STATEMENT_DATE SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CURRENT_DATE
    | SQL_TOK_CURRENT_DATE SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

transaction_date_value_function:
    SQL_TOK_TRANSACTION_DATE SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

/* SQL_TOK_ROW_TIME() 은 제거되어야 함 */
clock_time_value_function:
    SQL_TOK_ROW_TIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CLOCK_TIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

current_time_value_function:
    SQL_TOK_STATEMENT_TIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CURRENT_TIME
    | SQL_TOK_CURRENT_TIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CURRENT_TIME SQL_TOK_LEFT_PAREN time_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

transaction_time_value_function:
    SQL_TOK_TRANSACTION_TIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

/* SQL_TOK_ROW_TIMESTAMP() 은 제거되어야 함 */
clock_timestamp_value_function:
    SQL_TOK_ROW_TIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CLOCK_TIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

current_timestamp_value_function:
    SQL_TOK_STATEMENT_TIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CURRENT_TIMESTAMP
    | SQL_TOK_CURRENT_TIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CURRENT_TIMESTAMP SQL_TOK_LEFT_PAREN timestamp_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

transaction_timestamp_value_function:
    SQL_TOK_TRANSACTION_TIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

/* SQL_TOK_ROW_LOCALTIME() 은 제거되어야 함 */
clock_localtime_value_function:
    SQL_TOK_ROW_LOCALTIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CLOCK_LOCALTIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

statement_localtime_value_function:
    SQL_TOK_STATEMENT_LOCALTIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_LOCALTIME
    | SQL_TOK_LOCALTIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_LOCALTIME SQL_TOK_LEFT_PAREN time_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

transaction_localtime_value_function:
    SQL_TOK_TRANSACTION_LOCALTIME SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

/* SQL_TOK_ROW_LOCALTIMESTAMP() 은 제거되어야 함 */
clock_localtimestamp_value_function:
    SQL_TOK_ROW_LOCALTIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_CLOCK_LOCALTIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

statement_localtimestamp_value_function:
    SQL_TOK_STATEMENT_LOCALTIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_LOCALTIMESTAMP
    | SQL_TOK_LOCALTIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    | SQL_TOK_LOCALTIMESTAMP SQL_TOK_LEFT_PAREN time_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

transaction_localtimestamp_value_function:
    SQL_TOK_TRANSACTION_LOCALTIMESTAMP SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    ;

time_precision:  // qlpValue : float
    time_fractional_seconds_precision
    {
        STL_PARSER_TIME_PRECISION____();
    }
    ;

timestamp_precision:  // qlpValue : float
    time_fractional_seconds_precision
    {
        STL_PARSER_TIMESTAMP_PRECISION____();
    }
    ;

time_fractional_seconds_precision:  // qlpValue : float
    unsigned_integer
    {
        STL_PARSER_TIME_FRACTIONAL_SECONDS_PRECISION____();
    }
    ;

adddate_value_function:
    SQL_TOK_ADDDATE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ADDDATE_FUNCTION____();
    }
    ;

addtime_value_function:
    SQL_TOK_ADDTIME
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ADDTIME_FUNCTION____();
    }
    ;

dateadd_value_function:
    SQL_TOK_DATEADD
    SQL_TOK_LEFT_PAREN
    datetime_part
    SQL_TOK_COMMA value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DATETIME_FUNCTION____DATEADD();
    }
    ;

datetime_part:
    datetime_part_field
    {
        STL_PARSER_DATETIME_PART____DATETIME_PART();
    }
    ;

datetime_part_field:
    primary_datetime_field
    {
        STL_PARSER_DATETIME_PART____PRIMARY_DATETIME_FIELD();
    }
    |
    SQL_TOK_QUARTER
    {
        STL_PARSER_DATETIME_PART____QUARTER();
    }
    | SQL_TOK_DAYOFYEAR
    {
        STL_PARSER_DATETIME_PART____DAYOFYEAR();
    }
    | SQL_TOK_WEEK
    {
        STL_PARSER_DATETIME_PART____WEEK();
    }
    | SQL_TOK_WEEKDAY
    {
        STL_PARSER_DATETIME_PART____WEEKDAY();
    }
    | SQL_TOK_MILLISECOND
    {
        STL_PARSER_DATETIME_PART____MILLISECOND();
    }
    | SQL_TOK_MICROSECOND
    {
        STL_PARSER_DATETIME_PART____MICROSECOND();
    }
    ;

datediff_datetime_part_field:
    primary_datetime_field
    {
        STL_PARSER_DATETIME_PART____PRIMARY_DATETIME_FIELD();
    }
    |
    SQL_TOK_QUARTER
    {
        STL_PARSER_DATETIME_PART____QUARTER();
    }
    | SQL_TOK_DAYOFYEAR
    {
        STL_PARSER_DATETIME_PART____DAYOFYEAR();
    }
    | SQL_TOK_MILLISECOND
    {
        STL_PARSER_DATETIME_PART____MILLISECOND();
    }
    | SQL_TOK_MICROSECOND
    {
        STL_PARSER_DATETIME_PART____MICROSECOND();
    }
    ;

date_add_value_function:
    SQL_TOK_DATE_ADD
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DATE_ADD_FUNCTION____();
    }
    ;

to_date_function:
    SQL_TOK_TO_DATE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_DATE_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_DATE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_DATE_FUNCTION____();
    }
    ;

to_time_function:
    SQL_TOK_TO_TIME
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIME_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_TIME
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIME_FUNCTION____();
    }
    ;

to_time_with_time_zone_function:
    SQL_TOK_TO_TIME_WITH_TIME_ZONE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIME_WITH_TIME_ZONE_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_TIME_WITH_TIME_ZONE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIME_WITH_TIME_ZONE_FUNCTION____();
    }
    | SQL_TOK_TO_TIME_TZ
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIME_WITH_TIME_ZONE_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_TIME_TZ
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIME_WITH_TIME_ZONE_FUNCTION____();
    }
    ;

to_timestamp_function:
    SQL_TOK_TO_TIMESTAMP
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIMESTAMP_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_TIMESTAMP
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIMESTAMP_FUNCTION____();
    }
    ;

to_timestamp_with_time_zone_function:
    SQL_TOK_TO_TIMESTAMP_WITH_TIME_ZONE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIMESTAMP_WITH_TIME_ZONE_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_TIMESTAMP_WITH_TIME_ZONE
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIMESTAMP_WITH_TIME_ZONE_FUNCTION____();
    }
    | SQL_TOK_TO_TIMESTAMP_TZ
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIMESTAMP_WITH_TIME_ZONE_FUNCTION____DEFAULT();
    }
    | SQL_TOK_TO_TIMESTAMP_TZ
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_TO_TIMESTAMP_WITH_TIME_ZONE_FUNCTION____();
    }
    ;

last_day_function:
    SQL_TOK_LAST_DAY SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_LAST_DAY_FUNCTION____();
    }
    ;

add_months_function:
    SQL_TOK_ADD_MONTHS
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ADD_MONTHS_FUNCTION____();
    }
    ;

from_unixtime_function:
    SQL_TOK_FROM_UNIXTIME
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_FROM_UNIXTIME_FUNCTION____();
    }
    ;

datediff_function:
    SQL_TOK_DATEDIFF
    SQL_TOK_LEFT_PAREN
    datediff_datetime_part
    SQL_TOK_COMMA value_expression
    SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DATEDIFF_FUNCTION____();
    }
    ;

datediff_datetime_part:
    datediff_datetime_part_field
    {
        STL_PARSER_DATETIME_PART____DATETIME_PART();
    }
    ;

nvl_function:
    SQL_TOK_NVL
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NVL_FUNCTION____();
    }
    | SQL_TOK_NVL2
    SQL_TOK_LEFT_PAREN
    value_expression SQL_TOK_COMMA value_expression SQL_TOK_COMMA value_expression
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_NVL2_FUNCTION____();
    }
    ;

dump_function:
    SQL_TOK_DUMP
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DUMP_FUNCTION____();
    }
    ;

decode_function:
    SQL_TOK_DECODE
    SQL_TOK_LEFT_PAREN decode_expr_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DECODE_FUNCTION____();
    }
    ;

decode_expr_list:
    value_expression
    {
        STL_PARSER_DECODE_LIST____DECODE_FUNC();
    }
    |
    decode_expr_list SQL_TOK_COMMA value_expression
    {
        STL_PARSER_DECODE_LIST____DECODE_FUNC_LIST();
    }
    ;

case2_function:
    SQL_TOK_CASE2
    SQL_TOK_LEFT_PAREN case2_expr_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CASE2_FUNCTION____();
    }
    ;

case2_expr_list:
    value_expression
    {
        STL_PARSER_CASE2_LIST____CASE2_FUNC();
    }
    |
    case2_expr_list SQL_TOK_COMMA value_expression
    {
        STL_PARSER_CASE2_LIST____CASE2_FUNC_LIST();
    }
    ;

general_comparison_function:
    SQL_TOK_GREATEST
    SQL_TOK_LEFT_PAREN general_comparison_function_arg_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_GENERAL_COMPARISON_FUNCTION____GREATEST_FUNC();
    }
    |
    SQL_TOK_LEAST
    SQL_TOK_LEFT_PAREN general_comparison_function_arg_list SQL_TOK_RIGHT_PAREN    
    {
        STL_PARSER_GENERAL_COMPARISON_FUNCTION____LEAST_FUNC();        
    }
    ;

general_comparison_function_arg_list:
    value_expression
    {
        STL_PARSER_GENERAL_COMPARISON_FUNCTION_ARG_LIST____GENERAL_COMPARISON_FUNC();
    }
    |
    general_comparison_function_arg_list SQL_TOK_COMMA value_expression
    {
        STL_PARSER_GENERAL_COMPARISON_FUNCTION_ARG_LIST____GENERAL_COMPARISON_FUNC_LIST();
    }
    ;

// reference_value_expression:
//     value_expression_primary
//     {
//     }
//     ;

unsigned_value_specification:  // qlpNode
    unsigned_literal
    {
        // qlpConstant
        STL_PARSER_UNSIGNED_VALUE_SPECIFICATION____LITERAL();
    }
    | general_value_specification
    {
        STL_PARSER_UNSIGNED_VALUE_SPECIFICATION____VALUE();
    }
    ;

unsigned_literal:  // qlpConstant
    unsigned_numeric_literal
    {
        STL_PARSER_UNSIGNED_LITERAL____NUMERIC_LITERAL();
    }
    | general_literal
    {
        STL_PARSER_UNSIGNED_LITERAL____GENERAL_LITERAL();
    }
    ;

unsigned_numeric_literal:  // qlpConstant
    unsigned_exact_numeric_literal
    {
        STL_PARSER_UNSIGNED_NUMERIC_LITERAL____EXACT();
    }
    | unsigned_approximate_numeric_literal
    {
        STL_PARSER_UNSIGNED_NUMERIC_LITERAL____APPROXIMATE();
    }
    ;

unsigned_exact_numeric_literal:  // qlpConstant ( qlpValue : float)
    SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_EXACT_NUMERIC_LITERAL____UNSIGNED_INTEGER();
    }
    | SQL_TOK_UNSIGNED_EXACT_NUMERIC_LITERAL
    {
        STL_PARSER_EXACT_NUMERIC_LITERAL____EXACT_NUMERIC();
    }
    ;

unsigned_approximate_numeric_literal:  // qlpConstant ( qlpValue : float)
    SQL_TOK_UNSIGNED_APPROXIMATE_NUMERIC_LITERAL // mantissa "E" exponent
    {
        STL_PARSER_APPROXIMATE_NUMERIC_LITERAL____();
    }
    ;

// mantissa:  // str
//     exact_numeric_literal
//     {
//         STL_PARSER_MANTISSA____();
//     }
//     ;

// exponent:  // str
//     signed_integer
//     {
//         STL_PARSER_EXPONENT____();
//     }
//     ;

signed_integer:  // qlpValue : float
    unsigned_integer
    {
        STL_PARSER_SIGNED_INTEGER____UNSIGNED_INTERGER();
    }
    | sign unsigned_integer
    {
        STL_PARSER_SIGNED_INTEGER____SIGNED_INTERGER();
    }
    ;

unsigned_integer:  // qlpValue : float
    SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_UNSIGNED_INTEGER____();
    }
    ;

general_literal:  // qlpConstant
    character_string_literal
    {
        STL_PARSER_GENERAL_LITERAL____CHARACTER();
    }
    | binary_string_literal
    {
        STL_PARSER_GENERAL_LITERAL____BINARY();
    }
    | datetime_literal
    {
        STL_PARSER_GENERAL_LITERAL____DATETIME();
    }
    | interval_literal
    {
        STL_PARSER_GENERAL_LITERAL____INTERVAL();
    }
    | boolean_literal
    {
        STL_PARSER_GENERAL_LITERAL____BOOLEAN();
    }
    | SQL_TOK_NULL
    {
        STL_PARSER_GENERAL_LITERAL____NULL();
    }
    ;

boolean_literal:  // qlpConstant
    SQL_TOK_TRUE
    {
        STL_PARSER_BOOLEAN_LITERAL____TRUE();
    }
    | SQL_TOK_FALSE
    {
        STL_PARSER_BOOLEAN_LITERAL____FALSE();
    }
    | SQL_TOK_UNKNOWN
    {
        STL_PARSER_BOOLEAN_LITERAL____UNKNOWN();
    }
    ;

character_string_literal:  // qlpConstant
    quote_character_representation_list
    {
        STL_PARSER_CHARACTER_STRING_LITERAL____STRING();
    }
    | introducer character_set_specification
    quote_character_representation_list
    {
        /*
         * @todo char_set 이름과 string사이에 어떤 문자를 넣어야 하는가?
         * 우선은 quote(')를 넣어 놓도록 한다.
         */

        STL_PARSER_CHARACTER_STRING_LITERAL____INTRODUCER_STRING();
    }
    ;

quote_character_representation_list:  // qlpValue : string
    quote_character_representation
    {
        STL_PARSER_QUOTE_CHARACTER_REPRESENTATION_LIST____STRING();
    }
    // | quote_character_representation_list // separator
    // quote_character_representation
    // {
    //     STL_PARSER_QUOTE_CHARACTER_REPRESENTATION_LIST____STRING_LIST();
    // }
    ;


quote_character_representation:  // qlpValue : string
    SQL_TOK_QUOTE_STRING // SQL_TOK_QUOTE character_representation SQL_TOK_QUOTE
    {
        STL_PARSER_QUOTE_CHARACTER_REPRESENTATION____STRING();
    }
    ;


// character_string_literal:  // qlpConstant
//     quote_character_representation
//     separator_character_representation
//     {

//     }
//     | introducer character_set_specification
//     quote_character_representation
//     separator_character_representation
//     {
//     }
//     ;

// quote_character_representation:
//     SQL_TOK_QUOTE SQL_TOK_QUOTE
//     {

//     }
//     | SQL_TOK_QUOTE_STRING // SQL_TOK_QUOTE character_representation SQL_TOK_QUOTE
//     {
//     }
//     ;

// separator_character_representation:
//     /* empty */
//     {
//     }
//     | separator SQL_TOK_QUOTE SQL_TOK_QUOTE
//     {
//     }
//     | separator_character_representation_2  // SQL_TOK_QUOTE character_representation SQL_TOK_QUOTE
//     {
//     }
//     ;

// separator_character_representation_2:
//     separator SQL_TOK_QUOTE_STRING
//     {

//     }
//     | separator_character_representation_2
//     separator SQL_TOK_QUOTE_STRING // SQL_TOK_QUOTE character_representation SQL_TOK_QUOTE
//     {

//     }
//     ;




// separator:
//     separator_1
//     {
//     }
//     | separator_1 separator
//     {
//     }
//     ;

// separator_1:
//     // comment
//     SQL_TOK_SIMPLE_COMMENT // simple_comment
//     {
//     }
//     | SQL_TOK_COMMENT_INTRODUCER bracketed_comment_contents SQL_TOK_COMMENT_TERMINATOR // bracketed_comment
//     {
//     }
//     | SQL_TOK_WHITE_SPACE
//     {
//     }
//     ;

// separator:  // not_support
//     separator_2
//     {
//         STL_PARSER_SEPARATOR____();
//     }
//     | separator separator_2
//     {
//         STL_PARSER_SEPARATOR____();
//     }
//     ;

// separator_2:  // not_support
//     SQL_TOK_SIMPLE_COMMENT
//     {
//         STL_PARSER_SEPARATOR_2____();
//     }
//     | SQL_TOK_BRACKETED_COMMENT
//     {
//         STL_PARSER_SEPARATOR_2____();
//     }
//     ;

// separator:
//     comment separator_2
//     {
//     }
//     | SQL_TOK_WHITE_SPACE separator_2
//     {
//     }
//     ;

// separator_2:
//     /* empty */
//     {
//     }
//     | comment separator_2
//     {
//     }
//     | SQL_TOK_WHITE_SPACE separator_2
//     {
//     }
//     ;

// character_representation:
//     nonquote_character
//     {
//     }
//     | quote_symbol
//     {
//     }
//     ;

// nonquote_character:
//     SQL_TOK_NONQUOTE_STRING
//     {
//     }
//     ;



introducer:
    SQL_TOK_UNDERSCORE
    {
        STL_PARSER_INTRODUCER____();
    }
    ;

character_set_specification:  // qlpValue : string
    standard_character_set_name
    {
        STL_PARSER_CHARACTER_SET_SPECIFICATION____();
    }
    ;

standard_character_set_name:  // qlpValue : string
    character_set_name
    {
        STL_PARSER_STANDARD_CHARACTER_SET_NAME____();
    }
    ;

character_set_name:  // qlpValue : string
    SQL_language_identifier
    {
        STL_PARSER_CHARACTER_SET_NAME____();
    }
    ;

SQL_language_identifier:  // qlpValue : string
    identifier
    {
        STL_PARSER_SQL_LANGUAGE_IDENTIFIER____();
    }
    ;

// comment:
//     simple_comment
//     {
//     }
//     | bracketed_comment
//     {
//     }
//     ;

// simple_comment:
//     SQL_TOK_SIMPLE_COMMENT
//     {
//     }
//     ;

// bracketed_comment:
//     SQL_TOK_COMMENT_INTRODUCER bracketed_comment_contents SQL_TOK_COMMENT_TERMINATOR
//     {
//     }
//     ;

// bracketed_comment_contents:
// // /* empty */
//     {
//     }
//     | comment_character bracketed_comment_contents // comment_contents
//     {
//     }
//     | separator bracketed_comment_contents // comment_contents
//     {
//     }
//     ;

// comment_contents:
// // /* empty */
//     {
//     }
//     | comment_character comment_contents
//     {
//     }
//     | separator comment_contents
//     {
//     }
//     ;

// comment_character:
//     nonquote_character
//     {
//     }
//     | SQL_TOK_QUOTE
//     {
//     }
//     ;

// column_reference:
//     identifier
//     {
//         /* identifier_chain & column_reference */
//     }
//     | identifier SQL_TOK_PERIOD identifier_chain
//     {
//         /* identifier_chain & column_reference */
//     }
//     // | SQL_TOK_MODULE SQL_TOK_PERIOD identifier // qualified_identifier
//     // SQL_TOK_PERIOD column_name
//     // {
//     //     /* only column_reference */
//     // }
//     ;

column_name:  // qlpValue : string
    identifier
    {
        STL_PARSER_COLUMN_NAME____();
    }
    ;

// basic_identifier_chain:
//     identifier_chain
//     {
//     }
//     ;

identifier_chain:  // qlpList : string
    identifier
    {
        STL_PARSER_IDENTIFIER_CHAIN____IDENTIFIER();
    }
    | identifier_chain SQL_TOK_PERIOD identifier
    {
        STL_PARSER_IDENTIFIER_CHAIN____IDENTIFIER_LIST();
    }
    ;

rowid_identifier_chain:  // qlpList : string
    rowid_pseudo_column
    {
        STL_PARSER_IDENTIFIER_CHAIN____ROWID_IDENTIFIER();
    }
    | identifier_chain SQL_TOK_PERIOD rowid_pseudo_column
    {
        STL_PARSER_IDENTIFIER_CHAIN____ROWID_IDENTIFIER_LIST();
    }
    ;

rowid_pseudo_column:
    SQL_TOK_ROWID
    {
        STL_PARSER_REGUALAR_IDENTIFIER____ROWID_IDENTIFIER();
    }
    ;

identifier:  // qlpValue : string
    actual_identifier
    {
        STL_PARSER_IDENTIFIER____();
    }
    ;

actual_identifier:  // qlpValue : string
    regualar_identifier
    {
        STL_PARSER_ACTUAL_IDENTIFIER____REGULAR();
    }
    | delimited_identifier
    {
        STL_PARSER_ACTUAL_IDENTIFIER____DELIMITED();
    }
    ;

regualar_identifier:  // qlpValue : string
    SQL_TOK_IDENTIFIER
    {
        STL_PARSER_REGUALAR_IDENTIFIER____IDENTIFIER();
    }
    | nonreserved_keyword
    {
        STL_PARSER_REGUALAR_IDENTIFIER____NON_RESERVED_WORD();
    }
    | gsql_keyword
    {
        STL_PARSER_REGUALAR_IDENTIFIER____QSQL_KEYWORD();
    }
    ;

delimited_identifier:  // qlpValue : string
    SQL_TOK_DOUBLE_QUOTE_STRING
    {
        STL_PARSER_DELIMITED_IDENTIFIER____();
    }
    ;

cast_specification:  // qlpNode : qlpTypeCast
    SQL_TOK_CAST SQL_TOK_LEFT_PAREN cast_operand SQL_TOK_AS cast_target SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CAST_SPECIFICATION____();
    }
    ;

cast_operand:  // qlpNode
    value_expression
    {
        STL_PARSER_CAST_OPERAND____VALUE_EXPR();
    }
    // | implicitly_typed_value_specification
    // {
    //     STL_PARSER_CAST_OPERAND____IMPLICITLY_TYPED_VALUE();
    // }
    ;

cast_target:  // qlpTypeName
    data_type
    {
        STL_PARSER_CAST_TARGET____();
    }
    ;

// implicitly_typed_value_specification:  // qlpValue : null
//     SQL_TOK_NULL
//     {
//         STL_PARSER_IMPLICITLY_TYPED_VALUE_SPECIFICATION____NULL();
//     }
//     | SQL_TOK_LEFT_PAREN implicitly_typed_value_specification SQL_TOK_RIGHT_PAREN
//     {
//         STL_PARSER_IMPLICITLY_TYPED_VALUE_SPECIFICATION____PAREN_NULL();
//     }
//     ;

data_type:  // qlpTypeName
    predefined_type
    {
        STL_PARSER_DATA_TYPE____();
    }
    ;

predefined_type:  // qlpTypeName
    character_string_type
    {
        STL_PARSER_PREDEFINED_TYPE____CHARACTER();
    }
    | character_string_type SQL_TOK_CHARACTER SQL_TOK_SET character_set_specification
    {
        /* @todo char_set */
        STL_PARSER_PREDEFINED_TYPE____CHARACTER_CHARACTER_SET();
    }
    | national_character_string_type
    {
        STL_PARSER_PREDEFINED_TYPE____NATIONAL_CHARACTER();
    }
    | binary_string_type
    {
        STL_PARSER_PREDEFINED_TYPE____BINARY();
    }
    | numeric_type
    {
        STL_PARSER_PREDEFINED_TYPE____NUMERIC();
    }
    | boolean_type
    {
        STL_PARSER_PREDEFINED_TYPE____BOOLEAN();
    }
    | datetime_type
    {
        STL_PARSER_PREDEFINED_TYPE____DATETIME();
    }
    | interval_type
    {
        STL_PARSER_PREDEFINED_TYPE____INTERVAL();
    }
    | rowid_type
    {
        STL_PARSER_PREDEFINED_TYPE____ROWID();
    }
    ;

character_string_type:  // qlpTypeName
    SQL_TOK_CHAR
    {
        STL_PARSER_CHARACTER_STRING_TYPE____CHAR();
    }
    |
    SQL_TOK_CHARACTER
    {
        STL_PARSER_CHARACTER_STRING_TYPE____CHAR();
    }
    |
    SQL_TOK_CHAR SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_STRING_TYPE____CHAR_LENGTH();
    }
    |
    SQL_TOK_CHARACTER SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_STRING_TYPE____CHAR_LENGTH();
    }
    |
    SQL_TOK_CHAR SQL_TOK_VARYING SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_STRING_TYPE____CHAR_VARYING_LENGTH();
    }
    |
    SQL_TOK_CHARACTER SQL_TOK_VARYING SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_STRING_TYPE____CHAR_VARYING_LENGTH();
    }
    |
    SQL_TOK_VARCHAR SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_STRING_TYPE____VARCHAR_LENGTH();
    }
    |
    SQL_TOK_VARCHAR2 SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CHARACTER_STRING_TYPE____VARCHAR_LENGTH();
    }
    |
    SQL_TOK_CHARACTER SQL_TOK_LONG SQL_TOK_VARYING
    {
        STL_PARSER_CHARACTER_STRING_TYPE____LONG_CHAR_VARYING_LENGTH();
    }
    |
    SQL_TOK_CHAR SQL_TOK_LONG SQL_TOK_VARYING
    {
        STL_PARSER_CHARACTER_STRING_TYPE____LONG_CHAR_VARYING_LENGTH();
    }
    |
    SQL_TOK_LONG SQL_TOK_CHAR SQL_TOK_VARYING
    {
        STL_PARSER_CHARACTER_STRING_TYPE____LONG_CHAR_VARYING_LENGTH();
    }
    |
    SQL_TOK_LONG SQL_TOK_CHARACTER SQL_TOK_VARYING
    {
        STL_PARSER_CHARACTER_STRING_TYPE____LONG_CHAR_VARYING_LENGTH();
    }
    |
    SQL_TOK_LONG SQL_TOK_VARCHAR
    {
        STL_PARSER_CHARACTER_STRING_TYPE____LONG_VARCHAR_LENGTH();
    }
    ;

character_length:  // qlpCharLength
    unsigned_integer
    {
        STL_PARSER_CHARACTER_LENGTH____LENGTH();
    }
    | unsigned_integer char_length_units
    {
        STL_PARSER_CHARACTER_LENGTH____LENGTH_UNIT();
    }
    ;

national_character_string_type:  // qlpTypeName
    SQL_TOK_NATIONAL SQL_TOK_CHAR
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NATIONAL SQL_TOK_CHARACTER
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NCHAR
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NATIONAL SQL_TOK_CHAR SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NATIONAL SQL_TOK_CHARACTER SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NCHAR SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NATIONAL SQL_TOK_CHAR SQL_TOK_VARYING SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NATIONAL SQL_TOK_CHARACTER SQL_TOK_VARYING SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_NCHAR SQL_TOK_VARYING SQL_TOK_LEFT_PAREN character_length SQL_TOK_RIGHT_PAREN
    {
        /* not support NCHAR */
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

binary_string_type:  // qlpTypeName
    SQL_TOK_BINARY
    {
        STL_PARSER_BINARY_STRING_TYPE____BINARY();
    }
    |
    SQL_TOK_BINARY SQL_TOK_LEFT_PAREN length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BINARY_STRING_TYPE____BINARY_LENGTH();
    }
    |
    SQL_TOK_BINARY SQL_TOK_VARYING SQL_TOK_LEFT_PAREN length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BINARY_STRING_TYPE____BINARY_VARYING_LENGTH();
    }
    |
    SQL_TOK_VARBINARY SQL_TOK_LEFT_PAREN length SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_BINARY_STRING_TYPE____VARBINARY_LENGTH();
    }
    |
    SQL_TOK_BINARY SQL_TOK_LONG SQL_TOK_VARYING
    {
        STL_PARSER_BINARY_STRING_TYPE____LONG_BINARY_VARYING_LENGTH();
    }
    |
    SQL_TOK_LONG SQL_TOK_BINARY SQL_TOK_VARYING
    {
        STL_PARSER_BINARY_STRING_TYPE____LONG_BINARY_VARYING_LENGTH();
    }
    |
    SQL_TOK_LONG SQL_TOK_VARBINARY
    {
        STL_PARSER_BINARY_STRING_TYPE____LONG_VARBINARY_LENGTH();
    }
    ;

numeric_type:  // qlpTypeName
    exact_numeric_type
    {
        STL_PARSER_NUMERIC_TYPE____EXACT();
    }
    | approximate_numeric_type
    {
        STL_PARSER_NUMERIC_TYPE____APPROXIMATE();
    }
    | native_numeric_type
    {
        STL_PARSER_NUMERIC_TYPE____NATIVE();
    }
    ;

exact_numeric_type:  // qlpTypeName
    SQL_TOK_NUMERIC
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____NUMERIC();
    }
    | SQL_TOK_NUMBER
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____NUMBER();
    }
    | SQL_TOK_SMALLINT
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____DECIMAL_SMALLINT();
    }
    | SQL_TOK_INT2
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____DECIMAL_SMALLINT();
    }
    | SQL_TOK_INTEGER
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____DECIMAL_INTEGER();
    }
    | SQL_TOK_INT
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____DECIMAL_INTEGER();
    }
    | SQL_TOK_INT4
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____DECIMAL_INTEGER();
    }
    | SQL_TOK_BIGINT
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____DECIMAL_BIGINT();
    }
    | SQL_TOK_INT8
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____DECIMAL_BIGINT();
    }
    | SQL_TOK_NUMERIC SQL_TOK_LEFT_PAREN precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____NUMERIC_PRECISION();
    }
    | SQL_TOK_NUMERIC SQL_TOK_LEFT_PAREN precision SQL_TOK_COMMA scale SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____NUMERIC_PRECISION_SCALE();
    }
    | SQL_TOK_NUMBER SQL_TOK_LEFT_PAREN precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____NUMERIC_PRECISION();
    }
    | SQL_TOK_NUMBER SQL_TOK_LEFT_PAREN precision SQL_TOK_COMMA scale SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_EXACT_NUMERIC_TYPE____NUMERIC_PRECISION_SCALE();
    }
    ;

precision:  // qlpValue : float
    signed_integer
    {
        STL_PARSER_PRECISION____();
    }
    ;

scale:  // qlpValue : float
    signed_integer
    {
        STL_PARSER_SCALE____();
    }
    ;

approximate_numeric_type:  // qlpTypeName
    SQL_TOK_FLOAT
    {
        STL_PARSER_APPROXIMATE_NUMERIC_TYPE____FLOAT();
    }
    | SQL_TOK_FLOAT SQL_TOK_LEFT_PAREN precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_APPROXIMATE_NUMERIC_TYPE____FLOAT_PRECISION();
    }
    | SQL_TOK_REAL
    {
        STL_PARSER_APPROXIMATE_NUMERIC_TYPE____DECIMAL_REAL();
    }
    | SQL_TOK_FLOAT4
    {
        STL_PARSER_APPROXIMATE_NUMERIC_TYPE____DECIMAL_REAL();
    }
    | SQL_TOK_DOUBLE SQL_TOK_PRECISION
    {
        STL_PARSER_APPROXIMATE_NUMERIC_TYPE____DECIMAL_DOUBLE_PRECISION();
    }
    | SQL_TOK_DOUBLE
    {
        STL_PARSER_APPROXIMATE_NUMERIC_TYPE____DECIMAL_DOUBLE();
    }
    | SQL_TOK_FLOAT8
    {
        STL_PARSER_APPROXIMATE_NUMERIC_TYPE____DECIMAL_DOUBLE();
    }
    ;

native_numeric_type:  // qlpTypeName
    SQL_TOK_NATIVE_SMALLINT
    {
        STL_PARSER_NATIVE_NUMERIC_TYPE____NATIVE_SMALLINT();
    }
    |
    SQL_TOK_NATIVE_INTEGER
    {
        STL_PARSER_NATIVE_NUMERIC_TYPE____NATIVE_INTEGER();
    }
    |
    SQL_TOK_NATIVE_BIGINT
    {
        STL_PARSER_NATIVE_NUMERIC_TYPE____NATIVE_BIGINT();
    }
    |
    SQL_TOK_NATIVE_REAL
    {
        STL_PARSER_NATIVE_NUMERIC_TYPE____NATIVE_REAL();
    }
    |
    SQL_TOK_NATIVE_DOUBLE
    {
        STL_PARSER_NATIVE_NUMERIC_TYPE____NATIVE_DOUBLE();
    }
    ;

length:  // qlpValue : float
    unsigned_integer
    {
        STL_PARSER_LENGTH____();
    }
    ;

boolean_type:  // qlpTypeName
    SQL_TOK_BOOLEAN
    {
        STL_PARSER_BOOLEAN_TYPE____();
    }
    ;

datetime_type:  // qlpTypeName @todo
    SQL_TOK_DATE
    {
        STL_PARSER_DATETIME_TYPE____DATE();
    }
    | SQL_TOK_TIME
    {
        STL_PARSER_DATETIME_TYPE____TIME();
    }
    | SQL_TOK_TIMESTAMP
    {
        STL_PARSER_DATETIME_TYPE____TIMESTAMP();
    }
    | SQL_TOK_TIME SQL_TOK_LEFT_PAREN time_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DATETIME_TYPE____TIME_PRECISION();
    }
    | SQL_TOK_TIME SQL_TOK_WITH_TIME_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIME_WITH();
    }
    | SQL_TOK_TIME SQL_TOK_WITHOUT SQL_TOK_TIME SQL_TOK_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIME_WITHOUT();
    }
    | SQL_TOK_TIME SQL_TOK_LEFT_PAREN time_precision SQL_TOK_RIGHT_PAREN SQL_TOK_WITH_TIME_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIME_PRECISION_WITH();
    }
    | SQL_TOK_TIME SQL_TOK_LEFT_PAREN time_precision SQL_TOK_RIGHT_PAREN SQL_TOK_WITHOUT SQL_TOK_TIME SQL_TOK_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIME_PRECISION_WITHOUT();
    }
    | SQL_TOK_TIMESTAMP SQL_TOK_LEFT_PAREN timestamp_precision SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_DATETIME_TYPE____TIMESTAMP_PRECISION();
    }
    | SQL_TOK_TIMESTAMP SQL_TOK_WITH_TIME_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIMESTAMP_WITH();
    }
    | SQL_TOK_TIMESTAMP SQL_TOK_WITHOUT SQL_TOK_TIME SQL_TOK_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIMESTAMP_WITHOUT();
    }
    | SQL_TOK_TIMESTAMP SQL_TOK_LEFT_PAREN timestamp_precision SQL_TOK_RIGHT_PAREN
    SQL_TOK_WITH_TIME_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIMESTAMP_PRECISION_WITH();
    }
    | SQL_TOK_TIMESTAMP SQL_TOK_LEFT_PAREN timestamp_precision SQL_TOK_RIGHT_PAREN
    SQL_TOK_WITHOUT SQL_TOK_TIME SQL_TOK_ZONE
    {
        STL_PARSER_DATETIME_TYPE____TIMESTAMP_PRECISION_WITHOUT();
    }
    ;

interval_type:  // qlpTypeName
    SQL_TOK_INTERVAL interval_qualifier
    {
        STL_PARSER_INTERVAL_TYPE____();
    }
    ;

rowid_type:  // qlpTypeName
    SQL_TOK_ROWID
    {
        STL_PARSER_ROWID_TYPE____();
    }
    ;

binary_string_literal:  // qlpConstant
    SQL_TOK_HEXIT_STRING
    {
        STL_PARSER_BINARY_STRING_LITERAL____();
    }
    ;

datetime_literal:  // qlpConstant
    date_literal
    {
        STL_PARSER_DATETIME_LITERAL____DATE();
    }
    | time_literal
    {
        STL_PARSER_DATETIME_LITERAL____TIME();
    }
    | timestamp_literal
    {
        STL_PARSER_DATETIME_LITERAL____TIMESTAMP();
    }
    ;

date_literal:
    SQL_TOK_DATE datetime_string
    {
        STL_PARSER_DATE_LITERAL____();
    }
    | SQL_TOK_LEFT_BRACE SQL_TOK_D datetime_string SQL_TOK_RIGHT_BRACE
    {
        STL_PARSER_DATE_LITERAL____ESCAPE_SEQUENCE_DATE();
    }
    ;

time_literal:
    SQL_TOK_TIME datetime_string
    {
        STL_PARSER_TIME_LITERAL____();
    }
    | SQL_TOK_LEFT_BRACE SQL_TOK_T datetime_string SQL_TOK_RIGHT_BRACE
    {
        STL_PARSER_TIME_LITERAL____ESCAPE_SEQUENCE_TIME();
    }
    | SQL_TOK_TIME SQL_TOK_WITH_TIME_ZONE datetime_string
    {
        STL_PARSER_TIME_WITH_LITERAL____();
    }
    ;

timestamp_literal:
    SQL_TOK_TIMESTAMP datetime_string
    {
        STL_PARSER_TIMESTAMP_LITERAL____();
    }
    | SQL_TOK_LEFT_BRACE SQL_TOK_TS datetime_string SQL_TOK_RIGHT_BRACE
    {
        STL_PARSER_TIMESTAMP_LITERAL____ESCAPE_SEQUENCE_TIMESTAMP();
    }
    | SQL_TOK_TIMESTAMP SQL_TOK_WITH_TIME_ZONE datetime_string
    {
        STL_PARSER_TIMESTAMP_WITH_LITERAL____();
    }
    ;

datetime_string:
    SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_GENERAL_LITERAL____CHARACTER();
    }
    ;

interval_literal:
    SQL_TOK_INTERVAL interval_string interval_qualifier
    {
        STL_PARSER_INTERVAL_LITERAL____INTERVAL();
    }
    ;

interval_string:
    SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_INTERVAL_STRING____();
    }
    ;

/*
unquoted_interval_string:
    year_month_literal
    {
        STL_PARSER_UNQUOTED_INTERVAL_STRING____YEAR_MONTH();
    }
    | day_time_literal
    {
        STL_PARSER_UNQUOTED_INTERVAL_STRING____DAY_TIME();
    }
    | sign year_month_literal
    {
        STL_PARSER_UNQUOTED_INTERVAL_STRING____SIGN_YEAR_MONTH();
    }
    | sign day_time_literal
    {
        STL_PARSER_UNQUOTED_INTERVAL_STRING____SIGN_DAY_TIME();
    }
    ;

year_month_literal:
    // years_value
    // {
    // }
    // |
    // datetime_value // months_value
    // {
    // }
    // |
    //datetime_value // years_value
    //SQL_TOK_MINUS_SIGN datetime_value // months_value
    //{
    //    STL_PARSER_YEAR_MONTH_LITERAL____YEAR_MONTH();
    //}
    //;

day_time_literal:
    day_time_interval
    {
        STL_PARSER_DAY_TIME_LITERAL____DAY_TIME();
    }
    | time_interval
    {
        STL_PARSER_DAY_TIME_LITERAL____TIME();
    }
    ;

day_time_interval:  // @todo : day time interval에 대한 lexer 구성이 필요
    datetime_value // days_value
    {
        STL_PARSER_DAY_TIME_INTERVAL____DAY();
    }
    | datetime_value // days_value
    // SQL_TOK_WHITE_SPACE
    datetime_value // hours_value
    {
        STL_PARSER_DAY_TIME_INTERVAL____DAY_HOUR();
    }
    | datetime_value // days_value
    // SQL_TOK_WHITE_SPACE
    datetime_value // hours_value
    SQL_TOK_COLON datetime_value // minutes_value
    {
        STL_PARSER_DAY_TIME_INTERVAL____DAY_HOUR_MINUTE();
    }
    | datetime_value // days_value
    // SQL_TOK_WHITE_SPACE
    datetime_value // hours_value
    SQL_TOK_COLON datetime_value // minutes_value
    SQL_TOK_COLON seconds_value
    {
        STL_PARSER_DAY_TIME_INTERVAL____DAY_HOUR_MINUTE_SECOND();
    }
    ;

time_interval:
    // hours_value
    // {
    // }
    // |
    // hours_value SQL_TOK_COLON minutes_value
    // {
    // }
    // |
    datetime_value // hours_value
    SQL_TOK_COLON datetime_value // minutes_value
    {
        STL_PARSER_TIME_INTERVAL____HOUR_MINUTE();
    }
    | datetime_value // hours_value
    SQL_TOK_COLON datetime_value // minutes_value
    SQL_TOK_COLON seconds_value
    {
        STL_PARSER_TIME_INTERVAL____HOUR_MINUTE_SECOND();
    }
    // | minutes_value
    // {
    // }
    // | minutes_value SQL_TOK_COLON seconds_value
    // {
    // }
    // | seconds_value
    // {
    // }
    ;

// years_value:
//     datetime_value
//     {
//     }
//     ;

// months_value:
//     datetime_value
//     {
//     }
//     ;

// days_value:
//     datetime_value
//     {
//     }
//     ;

// hours_value:
//     datetime_value
//     {
//     }
//     ;

// minutes_value:
//     datetime_value
//     {
//     }
//     ;

seconds_value:
    seconds_integer_value
    {
        STL_PARSER_SECONDS_VALUE____INTEGER();
    }
    |
    seconds_integer_value SQL_TOK_PERIOD seconds_fraction
    {
        STL_PARSER_SECONDS_VALUE____INTEGER_FRACTION();
    }
    ;

seconds_integer_value:
    datetime_value
    {
        STL_PARSER_SECONDS_INTEGER_VALUE____();
    }
    ;

seconds_fraction:
    unsigned_integer
    {
        STL_PARSER_SECONDS_FRACTION____();
    }
    ;

datetime_value:
    unsigned_integer
    {
        STL_PARSER_DATETIME_VALUE____();
    }
    ;
*/

general_value_specification:  // qlpNode : qlpParameter
    host_variable indicator_paramter  // host_parameter_specification
    {
        STL_PARSER_GENERAL_VALUE_SPECIFICATION____HOST_PARAMETER();
    }
    | identifier_chain // column_reference
    {
        STL_PARSER_GENERAL_VALUE_SPECIFICATION____COLUMN();
    }
    | identifier_chain SQL_TOK_OUTER_MARK // column_reference with Outer Join Operator
    {
        STL_PARSER_GENERAL_VALUE_SPECIFICATION____COLUMN_WITH_OUTER_JOIN_OPERATOR();
    }
    | rowid_identifier_chain
    {
        STL_PARSER_GENERAL_VALUE_SPECIFICATION____ROWID_COLUMN();
    }
    | rowid_identifier_chain SQL_TOK_OUTER_MARK
    {
        STL_PARSER_GENERAL_VALUE_SPECIFICATION____ROWID_COLUMN_WITH_OUTER_JOIN_OPERATOR();
    }
    | SQL_TOK_QUESTION_MARK // dynamic_parameter_specification
    {
        STL_PARSER_GENERAL_VALUE_SPECIFICATION____DYNAMIC_PARAMETER();
    }
    ;

indicator_paramter:  // qlpValue : string
/* empty */
    {
        STL_PARSER_INDICATOR_PARAMTER____NO_INDICATOR();
    }
    | host_variable
    {
        STL_PARSER_INDICATOR_PARAMTER____EMPTY_INDICATOR();
    }
    | SQL_TOK_INDICATOR host_variable
    {
        STL_PARSER_INDICATOR_PARAMTER____INDICATOR();
    }
    ;


// host_parameter_specification:
//     host_parameter_name
//     {
//     }
//     ;

// host_parameter_name:
//     SQL_TOK_COLON identifier
//     {
//     }
//     ;

// SQL_parameter_reference:
//     identifier_chain // basic_identifier_chain
//     {
//     }
//     ;

// dynamic_parameter_specification:
//     SQL_TOK_QUESTION_MARK
//     {
//     }
//     ;

// character_pattern:
//     string_value_expression // character_value_expression
//     {
//     }
//     ;

// escape_character:
//     string_value_expression // character_value_expression
//     {
//     }
//     ;

// octet_like_predicate:
//     row_value_expression // row_value_predicand
//     octet_like_predicate_part_2
//     {
//     }
//     ;

// octet_like_predicate_part_2:
//     SQL_TOK_LIKE string_value_expression // octet_pattren
//     {
//     }
//     | SQL_TOK_NOT SQL_TOK_LIKE string_value_expression // octet_pattren
//     {
//     }
//     | SQL_TOK_LIKE string_value_expression // octet_pattren
//     SQL_TOK_ESCAPE string_value_expression // escape_octet
//     {
//     }
//     | SQL_TOK_NOT SQL_TOK_LIKE string_value_expression // octet_pattren
//     SQL_TOK_ESCAPE string_value_expression // escape_octet
//     {
//     }
//     ;

// octet_pattren:
//     string_value_expression // binary_value_expression
//     {
//     }
//     ;

// escape_octet:
//     string_value_expression // binary_value_expression
//     {
//     }
//     ;

// row_value_predicand:
//     nonparenthesized_value_expression_primary // row_value_special_case
//     {
//     }
//     |
//     row_value_constructor_predicand
//     {
//         STL_PARSER_ROW_VALUE_PREDICAND____CONSTRUCTOR_VALUE();
//     }
//     | value_factor_3
//     {
//     }
//     ;

// row_value_special_case:
//     nonparenthesized_value_expression_primary
//     {
//     }
//     ;

row_value_constructor_predicand:
    explicit_row_value_constructor
    {
        STL_PARSER_ROW_VALUE_CONSTRUCTOR____EXPLICIT_VALUE();
    }
    | SQL_TOK_LEFT_PAREN row_value_constructor_predicand SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROW_VALUE_CONSTRUCTOR____();
    }
//     | common_value_expression
//     {
//     }
//     | boolean_predicand
//     {
//     }
    ;

explicit_row_value_constructor:
    SQL_TOK_LEFT_PAREN
    row_value_constructor_element
    SQL_TOK_COMMA
    row_value_constructor_element_list
    SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_ROW_VALUE____CONSTRUCTOR();        
    }
//    | ROW <left paren> row_value_constructor_element_list <right paren>
//    {
//    }
//    |
//    row_subqury
//    {
//    }
    ;

row_value_constructor_element_list:
    row_value_constructor_element
    {
        STL_PARSER_ROW_VALUE_CONSTRUCTOR_LIST____ELEMENT();
    }
    |
    row_value_constructor_element_list SQL_TOK_COMMA row_value_constructor_element
    {
        STL_PARSER_ROW_VALUE_CONSTRUCTOR_LIST____ELEMENT_LIST();
    }
    ;

row_value_constructor_element:
    value_expression
    {
        STL_PARSER_ROW_VALUE_CONSTRUCTOR____ELEMENT();
    }
    ;

// value_expression_primary:
//     // parenthesized_value_expression
//     // {
//     // }
// | //    nonparenthesized_value_expression_primary
//     {
//     }
//     ;

// row_value_expression:
//     nonparenthesized_value_expression_primary // row_value_special_case
//     {
//     }
//     ;

table_primary:  // qlpRelInfo
    identifier_chain // table_or_query_name
    {
        STL_PARSER_TABLE_PRIMARY____NAME();
    }
    | identifier_chain // table_or_query_name
    SQL_TOK_AS correlation_name
    {
        STL_PARSER_TABLE_PRIMARY____NAME_ALIAS_WITH_AS();
    }
    | identifier_chain // table_or_query_name
    correlation_name
    {
        STL_PARSER_TABLE_PRIMARY____NAME_ALIAS_WITH_BLANK();
    }
    ;

// table_or_query_name:
//     local_or_schema_qualified_name // table_name
//     {
//     }
//     ;

// table_name:
//     local_or_schema_qualified_name
//     {
//     }
//     ;

// local_or_schema_qualified_name:
//     identifier // qualified_identifier
//     {
//     }
//     | local_or_schema_qualified_name SQL_TOK_PERIOD identifier // qualified_identifier
//     {
//     }
//     ;

// index_name:
//     identifier_chain // local_or_schema_qualified_name
//     {
//     }
//     ;

// qualified_identifier:
//     identifier
//     {
//     }
//     ;

correlation_name:  // qlpAlias
    identifier
    {
        STL_PARSER_CORRELATION_NAME____();
    }
    ;


/*
 * SAVEPOINT
 */

savepoint_statement:
    SQL_TOK_SAVEPOINT identifier  // savepoint_specifier
    {
        STL_PARSER_SAVEPOINT_STATEMENT____();
    }
    ;

/*
 * RELEASE SAVEPOINT
 */
release_savepoint_statement:
    SQL_TOK_RELEASE SQL_TOK_SAVEPOINT identifier  // savepoint_specifier
    {
        STL_PARSER_RELEASE_SAVEPOINT_STATEMENT____();
    }
    ;


/*
 * COMMIT STATEMENT
 */

commit_statement:
     SQL_TOK_COMMIT work_option comment_option
     {
         STL_PARSER_COMMIT_STATEMENT____();
     }
     | SQL_TOK_COMMIT work_option comment_option SQL_TOK_WRITE commit_write_mode
     {
         STL_PARSER_COMMIT_STATEMENT____WRITE_MODE();
     }
     | SQL_TOK_COMMIT work_option SQL_TOK_FORCE SQL_TOK_QUOTE_STRING comment_option
     {
         STL_PARSER_COMMIT_STATEMENT____FORCE();
     }
     | SQL_TOK_COMMIT work_option SQL_TOK_RELEASE
     {
         STL_PARSER_COMMIT_STATEMENT____RELEASE();
     }
     ;

comment_option:
/* empty */
    {
        STL_PARSER_CHECK( v0 = NULL );
    }
    | SQL_TOK_COMMENT SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_COMMENT_OPTION____();
    }
    ;

/*
 * ROLLBACK STATEMENT
 */

rollback_statement:
    SQL_TOK_ROLLBACK work_option
    {
        STL_PARSER_ROLLBACK_STATEMENT____();
    }
    | SQL_TOK_ROLLBACK work_option SQL_TOK_FORCE SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_ROLLBACK_STATEMENT____FORCE();
    }
    | SQL_TOK_ROLLBACK work_option SQL_TOK_FORCE SQL_TOK_QUOTE_STRING SQL_TOK_COMMENT SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_ROLLBACK_STATEMENT____FORCE_COMMENT();
    }
    | SQL_TOK_ROLLBACK work_option SQL_TOK_RELEASE
    {
        STL_PARSER_ROLLBACK_STATEMENT____RELEASE();
    }
    | SQL_TOK_ROLLBACK work_option savepoint_clause
    {
        STL_PARSER_ROLLBACK_STATEMENT____SAVEPOINT();
    }
    ;

work_option:
/* empty */
    {
        STL_PARSER_CHECK( v0 = NULL );
    }
    | SQL_TOK_WORK
    {
        STL_PARSER_CHECK( v0 = NULL ); 
    }
    ;

commit_write_mode:
    /* empty */
    {
        STL_PARSER_COMMIT_WRITE_MODE____NONE();
    }
    | SQL_TOK_WAIT
    {
        STL_PARSER_COMMIT_WRITE_MODE____WAIT();
    }
    | SQL_TOK_NOWAIT
    {
        STL_PARSER_COMMIT_WRITE_MODE____NOWAIT();
    }
    ;

savepoint_clause:
    SQL_TOK_TO SQL_TOK_SAVEPOINT savepoint_specifier
    {
        STL_PARSER_SAVEPOINT_CLAUSE____();
    }
    ;

savepoint_specifier:
    savepoint_name
    {
        STL_PARSER_SAVEPOINT_SPECIFIER____();
    }
    ;

savepoint_name:
    identifier
    {
        STL_PARSER_SAVEPOINT_NAME____();
    }
    ;


/*
 * ALTER SYSTEM STATEMENT
 */

alter_system_statement:
    SQL_TOK_ALTER SQL_TOK_SYSTEM alter_system_clause
    {
        STL_PARSER_ALTER_SYSTEM_STATEMENT____();
    }
    ;

alter_system_clause:
    SQL_TOK_SET alter_system_set_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____SET();
    }
    | SQL_TOK_RESET alter_system_reset_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____RESET();
    }
    | SQL_TOK_UNSET alter_system_reset_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____RESET();
    }
    | alter_system_ager_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____AGER();
    }
    | alter_system_database_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____DATABASE();
    }
    | SQL_TOK_SWITCH SQL_TOK_LOGFILE
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____SWITCH_LOGFILE();
    }
    | SQL_TOK_CHECKPOINT
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____CHECKPOINT();
    }
    | alter_system_flush_log_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____FLUSH_LOGS();
    }
    | SQL_TOK_CLEANUP SQL_TOK_PLAN
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____CLEANUP_PLAN();
    }
    | SQL_TOK_CLEANUP SQL_TOK_SESSION
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____CLEANUP_SESSION();
    }
    | end_session_clauses
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____END_SESSION();
    }
    | register_breakpoint_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____REGISTER_BREAKPOINT();
    }
    | clear_breakpoint_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____CLEAR_BREAKPOINT();
    }
    | register_session_name_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____REGISTER_SESSION_NAME();
    }
    | clear_session_name_clause
    {
        STL_PARSER_ALTER_SYSTEM_CLAUSE____CLEAR_SESSION_NAME();
    }
    ;

alter_system_set_clause:
    set_parameter_clause
    {
        STL_PARSER_ALTER_SYSTEM_SET_CLAUSE____PARAMETER();
    }
    ;

set_parameter_clause:
    parameter_name SQL_TOK_EQUAL_OPERATOR parameter_value property_clause
    {
        STL_PARSER_SET_PARAMETER_CLAUSE____SET();
    }
    | parameter_name SQL_TOK_TO SQL_TOK_DEFAULT property_clause
    {
        STL_PARSER_SET_PARAMETER_CLAUSE____SET_DEFAULT();
    }
    ;

end_session_clauses:
    SQL_TOK_DISCONNECT SQL_TOK_SESSION SQL_TOK_UNSIGNED_INTEGER SQL_TOK_COMMA SQL_TOK_UNSIGNED_INTEGER end_session_option
    {
        STL_PARSER_END_SESSION_CLAUSE____DISCONNECT_SESSION();
    }
    | SQL_TOK_DISCONNECT SQL_TOK_SESSION SQL_TOK_UNSIGNED_INTEGER SQL_TOK_COMMA SQL_TOK_UNSIGNED_INTEGER SQL_TOK_POST_TRANSACTION end_session_option
    {
        STL_PARSER_END_SESSION_CLAUSE____DISCONNECT_SESSION_POST_TRANSACTION();
    }
    | SQL_TOK_KILL SQL_TOK_SESSION SQL_TOK_UNSIGNED_INTEGER SQL_TOK_COMMA SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_END_SESSION_CLAUSE____KILL_SESSION();
    };

end_session_option:
    {
        STL_PARSER_END_SESSION_OPTION____DEFAULT();
    }
    | SQL_TOK_IMMEDIATE
    {
        STL_PARSER_END_SESSION_OPTION____IMMEDIATE();
    }
    ;

parameter_name:
    identifier
    {
        STL_PARSER_PARAMETER_NAME____();
    }
    ;

parameter_value:
    sign unsigned_integer
    {
        STL_PARSER_PARAMETER_VALUE____SIGNED_INTEGER();
    }
    | SQL_TOK_UNSIGNED_INTEGER byte_unit
    {
        STL_PARSER_PARAMETER_VALUE____UNSIGNED_INTEGER_BYTE_UNIT();
    }
    | SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_PARAMETER_VALUE____QUOTE_STRING();
    }
    | SQL_TOK_TRUE
    {
        STL_PARSER_PARAMETER_VALUE____TRUE();
    }
    | SQL_TOK_FALSE
    {
        STL_PARSER_PARAMETER_VALUE____FALSE();
    }
    | SQL_TOK_YES
    {
        STL_PARSER_PARAMETER_VALUE____YES();
    }
    | SQL_TOK_NO
    {
        STL_PARSER_PARAMETER_VALUE____NO();
    }
    | SQL_TOK_ON
    {
        STL_PARSER_PARAMETER_VALUE____ON();
    }
    | SQL_TOK_OFF
    {
        STL_PARSER_PARAMETER_VALUE____OFF();
    }
    | SQL_TOK_ENABLE
    {
        STL_PARSER_PARAMETER_VALUE____ENABLE();
    }
    | SQL_TOK_DISABLE
    {
        STL_PARSER_PARAMETER_VALUE____DISABLE();
    }
    ;

alter_system_reset_clause:
    parameter_name
    {
        STL_PARSER_ALTER_SYSTEM_RESET_CLAUSE____RESET();
    }
    | parameter_name SQL_TOK_SCOPE SQL_TOK_EQUAL_OPERATOR SQL_TOK_FILE
    {
        STL_PARSER_ALTER_SYSTEM_RESET_CLAUSE____RESET();
    }
    | parameter_name SQL_TOK_SCOPE SQL_TOK_EQUAL_OPERATOR SQL_TOK_SPFILE
    {
        STL_PARSER_ALTER_SYSTEM_RESET_CLAUSE____RESET();
    }
    ;

property_clause:
/* empty */
    {
        STL_PARSER_PROPERTY_CLAUSE____DEFAULT();
    }
    | SQL_TOK_DEFERRED
    {
        STL_PARSER_PROPERTY_CLAUSE____DEFERRED();
    }
    | property_scope
    {
        STL_PARSER_PROPERTY_CLAUSE____SCOPE();
    }
    | SQL_TOK_DEFERRED property_scope
    {
        STL_PARSER_PROPERTY_CLAUSE____DEFERRED_SCOPE();
    }
    ;

property_scope:
    SQL_TOK_SCOPE SQL_TOK_EQUAL_OPERATOR SQL_TOK_MEMORY
    {
        STL_PARSER_PROPERTY_SCOPE____MEMORY();
    }
    | SQL_TOK_SCOPE SQL_TOK_EQUAL_OPERATOR SQL_TOK_FILE
    {
        STL_PARSER_PROPERTY_SCOPE____FILE();
    }
    | SQL_TOK_SCOPE SQL_TOK_EQUAL_OPERATOR SQL_TOK_SPFILE
    {
        STL_PARSER_PROPERTY_SCOPE____FILE();
    }
    | SQL_TOK_SCOPE SQL_TOK_EQUAL_OPERATOR SQL_TOK_BOTH
    {
        STL_PARSER_PROPERTY_SCOPE____BOTH();
    }
    ;

register_breakpoint_clause:
    SQL_TOK_REGISTER SQL_TOK_BREAKPOINT identifier SQL_TOK_FOR identifier breakpoint_option_clause
    {
        STL_PARSER_REGISTER_BREAKPOINT_CLAUSE____();
    }
    | SQL_TOK_REGISTER SQL_TOK_BREAKPOINT identifier SQL_TOK_FOR SQL_TOK_SYSTEM breakpoint_option_clause
    {
        STL_PARSER_REGISTER_SYSTEM_BREAKPOINT_CLAUSE____();
    }
    ;

breakpoint_option_clause:
    SQL_TOK_SKIP SQL_TOK_UNSIGNED_INTEGER breakpoint_action_clause
    {
        STL_PARSER_BREAKPOINT_OPTION_CLAUSE____SKIP();
    }
    | breakpoint_action_clause
    {
        STL_PARSER_BREAKPOINT_OPTION_CLAUSE____NOSKIP();
    }
    ;

breakpoint_action_clause:
    SQL_TOK_WAKEUP identifier
    {
        STL_PARSER_BREAKPOINT_ACTION_CLAUSE____WAKEUP_NONE();
    }
    | SQL_TOK_WAKEUP identifier SQL_TOK_AND SQL_TOK_ABORT
    {
        STL_PARSER_BREAKPOINT_ACTION_CLAUSE____WAKEUP_ABORT();
    }
    | SQL_TOK_WAKEUP identifier SQL_TOK_AND SQL_TOK_SESSION SQL_TOK_KILL
    {
        STL_PARSER_BREAKPOINT_ACTION_CLAUSE____WAKEUP_SESSION_KILL();
    }
    | SQL_TOK_WAKEUP identifier SQL_TOK_AND SQL_TOK_SYSTEM SQL_TOK_KILL
    {
        STL_PARSER_BREAKPOINT_ACTION_CLAUSE____WAKEUP_SYSTEM_KILL();
    }
    | SQL_TOK_SLEEP SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_BREAKPOINT_ACTION_CLAUSE____SLEEP();
    }
    | SQL_TOK_ABORT
    {
        STL_PARSER_BREAKPOINT_ACTION_CLAUSE____ABORT();
    }
    | SQL_TOK_KILL
    {
        STL_PARSER_BREAKPOINT_ACTION_CLAUSE____KILL();
    }
    ;

clear_breakpoint_clause:
    SQL_TOK_CLEAR SQL_TOK_BREAKPOINT
    {
        STL_PARSER_CLEAR_BREAKPOINT_CLAUSE____();
    }
    ;

register_session_name_clause:
    SQL_TOK_REGISTER SQL_TOK_SESSION SQL_TOK_NAME SQL_TOK_AS SQL_TOK_SYSTEM 
    {
        STL_PARSER_REGISTER_SYSTEM_SESSION_NAME_CLAUSE____();
    }
    | SQL_TOK_REGISTER SQL_TOK_SESSION SQL_TOK_NAME SQL_TOK_AS identifier
    {
        STL_PARSER_REGISTER_USER_SESSION_NAME_CLAUSE____();
    }
    ;

clear_session_name_clause:
    SQL_TOK_CLEAR SQL_TOK_SESSION SQL_TOK_NAME
    {
        STL_PARSER_CLEAR_SESSION_NAME_CLAUSE____();
    }
    ;

alter_system_ager_clause:
    SQL_TOK_STOP SQL_TOK_AGER
    {
        STL_PARSER_ALTER_SYSTEM_AGER_CLAUSE____STOP();
    }
    | SQL_TOK_START SQL_TOK_AGER
    {
        STL_PARSER_ALTER_SYSTEM_AGER_CLAUSE____START();
    }
    | SQL_TOK_LOOPBACK SQL_TOK_AGER
    {
        STL_PARSER_ALTER_SYSTEM_AGER_CLAUSE____LOOPBACK();
    }
    ;

alter_system_flush_log_clause:
    SQL_TOK_FLUSH SQL_TOK_LOGS
    {
        STL_PARSER_ALTER_SYSTEM_FLUSH_LOG_CLAUSE____FLUSH_LOGS();
    }
    | SQL_TOK_STOP SQL_TOK_LOG SQL_TOK_FLUSHING
    {
        STL_PARSER_ALTER_SYSTEM_FLUSH_LOG_CLAUSE____STOP_LOG_FLUSHING();
    }
    | SQL_TOK_START SQL_TOK_LOG SQL_TOK_FLUSHING
    {
        STL_PARSER_ALTER_SYSTEM_FLUSH_LOG_CLAUSE____START_LOG_FLUSHING();
    }
    ;

alter_system_database_clause:
    SQL_TOK_MOUNT SQL_TOK_DATABASE
    {
        STL_PARSER_ALTER_SYSTEM_DATABASE_CLAUSE____MOUNT();
    }
    | SQL_TOK_OPEN SQL_TOK_DATABASE open_database_option open_log_option
    {
        STL_PARSER_ALTER_SYSTEM_DATABASE_CLAUSE____OPEN();
    }
    | SQL_TOK_CLOSE SQL_TOK_DATABASE close_database_option
    {
        STL_PARSER_ALTER_SYSTEM_DATABASE_CLAUSE____CLOSE();
    }
    ;

open_database_option:
    /*
     * empty
     */
    {
        STL_PARSER_OPEN_DATABASE____EMPTY();
    }
    |
    SQL_TOK_READ SQL_TOK_WRITE
    {
        STL_PARSER_OPEN_DATABASE____READ_WRITE();
    }
    |
    SQL_TOK_READ SQL_TOK_ONLY
    {
        STL_PARSER_OPEN_DATABASE____READ_ONLY();
    }
    ;

open_log_option:
    /*
     * empty
     */
    {
        STL_PARSER_OPEN_LOG____NORESETLOGS();
    }
    |
    SQL_TOK_NORESETLOGS
    {
        STL_PARSER_OPEN_LOG____NORESETLOGS();
    }
    |
    SQL_TOK_RESETLOGS
    {
        STL_PARSER_OPEN_LOG____RESETLOGS();
    }
    ;

close_database_option:
    /*
     * empty
     */
    {
        STL_PARSER_CLOSE_DATABASE____EMPTY();
    }
    |
    SQL_TOK_NORMAL
    {
        STL_PARSER_CLOSE_DATABASE____NORMAL();
    }
    |
    SQL_TOK_TRANSACTIONAL
    {
        STL_PARSER_CLOSE_DATABASE____TRANSACTIONAL();
    }
    |
    SQL_TOK_IMMEDIATE
    {
        STL_PARSER_CLOSE_DATABASE____IMMEDIATE();
    }
    |
    SQL_TOK_OPERATIONAL
    {
        STL_PARSER_CLOSE_DATABASE____OPERATIONAL();
    }
    |
    SQL_TOK_ABORT
    {
        STL_PARSER_CLOSE_DATABASE____ABORT();
    }
    ;



/*
 * ALTER SESSION STATEMENT
 */

alter_session_statement:
    SQL_TOK_ALTER SQL_TOK_SESSION alter_session_clause
    {
        STL_PARSER_ALTER_SESSION_STATEMENT____();
    }
    ;

alter_session_clause:
    SQL_TOK_SET parameter_name SQL_TOK_EQUAL_OPERATOR parameter_value
    {
        STL_PARSER_ALTER_SESSION_CLAUSE____SET();
    }
    | SQL_TOK_SET parameter_name SQL_TOK_TO SQL_TOK_DEFAULT
    {
        STL_PARSER_ALTER_SESSION_CLAUSE____SET_DEFAULT();
    }
    ;


/*
 * LOCK TABLE STATEMENT
 */

lock_table_statement:  // qlpLockTable
    SQL_TOK_LOCK SQL_TOK_TABLE table_name_list
    SQL_TOK_IN lock_mode SQL_TOK_MODE wait_clause
    {
        STL_PARSER_LOCK_TABLE_STATEMENT____();
    }
    ;

table_name_list:  // qlpList : qlpRelInfo
    identifier_chain
    {
        STL_PARSER_TABLE_NAME_LIST____TABLE();
    }
    | table_name_list SQL_TOK_COMMA identifier_chain
    {
        STL_PARSER_TABLE_NAME_LIST____TABLE_LIST();
    }
    ;

lock_mode:  // qlpValue : integer
    SQL_TOK_SHARE
    {
        STL_PARSER_LOCK_MODE____SHARE();
    }
    | SQL_TOK_EXCLUSIVE
    {
        STL_PARSER_LOCK_MODE____EXCLUSIVE();
    }
    | SQL_TOK_ROW SQL_TOK_SHARE
    {
        STL_PARSER_LOCK_MODE____ROW_SHARE();
    }
    | SQL_TOK_ROW SQL_TOK_EXCLUSIVE
    {
        STL_PARSER_LOCK_MODE____ROW_EXCLUSIVE();
    }
    | SQL_TOK_SHARE SQL_TOK_ROW SQL_TOK_EXCLUSIVE
    {
        STL_PARSER_LOCK_MODE____SHARE_ROW_EXCLUSIVE();
    }
    ;

wait_clause:  // qlpValue : float
/* empty */
    {
        STL_PARSER_WAIT_CLAUSE____WAIT_INFINITY();
    }
    | SQL_TOK_NOWAIT
    {
        STL_PARSER_WAIT_CLAUSE____NO_WAIT();
    }
    | SQL_TOK_WAIT unsigned_integer
    {
        STL_PARSER_WAIT_CLAUSE____WAIT_TIME();
    }
    ;


/**
 * SESSION FUNCTION
 */

session_function:
    SQL_TOK_CURRENT_CATALOG
    {
        STL_PARSER_SESSION_FUNCTION____CURRENT_CATALOG();
    }
    | SQL_TOK_CURRENT_CATALOG SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____CURRENT_CATALOG();
    }
    | SQL_TOK_VERSION SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____VERSION();
    }
    | SQL_TOK_USER
    {
        STL_PARSER_SESSION_FUNCTION____USER();
    }
    | SQL_TOK_USER SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____USER();
    }
    | SQL_TOK_CURRENT_USER
    {
        STL_PARSER_SESSION_FUNCTION____USER();
    }
    | SQL_TOK_CURRENT_USER SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____USER();
    }
    | SQL_TOK_CURRENT_ROLE
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_SESSION_USER
    {
        STL_PARSER_SESSION_FUNCTION____SESSION_USER();
    }
    | SQL_TOK_SESSION_USER SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____SESSION_USER();
    }
    | SQL_TOK_LOGON_USER SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____LOGON_USER();
    }
    | SQL_TOK_SYSTEM_USER
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_CURRENT_SCHEMA
    {
        STL_PARSER_SESSION_FUNCTION____CURRENT_SCHEMA();
    }
    | SQL_TOK_CURRENT_SCHEMA SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____CURRENT_SCHEMA();
    }
    | SQL_TOK_CURRENT_PATH
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_SESSION_ID SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____SESSION_ID();
    }
    | SQL_TOK_SESSION_SERIAL SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____SESSION_SERIAL();
    }
    | SQL_TOK_USER_ID SQL_TOK_LEFT_PAREN SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_SESSION_FUNCTION____USER_ID();
    }
;


/**
 * AGGREGATE FUNCTION
 */

aggregate_function:
    unary_aggregation
    {
        STL_PARSER_AGGREGATE_FUNCTION____UNARY();
    }
    ;

unary_aggregation:
    SQL_TOK_SUM SQL_TOK_LEFT_PAREN set_quantifier value_expression SQL_TOK_RIGHT_PAREN filter_clause
    {
        STL_PARSER_UNARY_AGGREGATION____SUM();
    }
    | SQL_TOK_COUNT SQL_TOK_LEFT_PAREN set_quantifier value_expression SQL_TOK_RIGHT_PAREN filter_clause
    {
        STL_PARSER_UNARY_AGGREGATION____COUNT();
    }
    | SQL_TOK_COUNT SQL_TOK_LEFT_PAREN SQL_TOK_ASTERISK SQL_TOK_RIGHT_PAREN filter_clause
    {
        STL_PARSER_UNARY_AGGREGATION____COUNT_ASTERISK();
    }
    | SQL_TOK_MIN SQL_TOK_LEFT_PAREN set_quantifier value_expression SQL_TOK_RIGHT_PAREN filter_clause
    {
        STL_PARSER_UNARY_AGGREGATION____MIN();
    }
    | SQL_TOK_MAX SQL_TOK_LEFT_PAREN set_quantifier value_expression SQL_TOK_RIGHT_PAREN filter_clause
    {
        STL_PARSER_UNARY_AGGREGATION____MAX();
    }
    | SQL_TOK_AVG SQL_TOK_LEFT_PAREN set_quantifier value_expression SQL_TOK_RIGHT_PAREN filter_clause
    {
        STL_PARSER_UNARY_AGGREGATION____AVG();
    }
    ;


/**
 * CASE EXPRESSION
 */

case_expression:
    case_specification
    {
        STL_PARSER_CASE_SPECIFICATION____();
    }
    | case_abbreviation
    {
        STL_PARSER_CASE_ABBREVIATION____();
    }
    ;

case_abbreviation:
    SQL_TOK_NULLIF
    SQL_TOK_LEFT_PAREN value_expression SQL_TOK_COMMA value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CASE_ABBREVIATION____NULLIF();
    }
    | SQL_TOK_COALESCE SQL_TOK_LEFT_PAREN coalesce_expr_list SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_CASE_ABBREVIATION____COALESCE();
    }
    ;

coalesce_expr_list:
    value_expression
    {
        STL_PARSER_CASE_ABBREVIATION_LIST____COALESCE_EXPR();
    }
    |
    coalesce_expr_list SQL_TOK_COMMA value_expression
    {
        STL_PARSER_CASE_ABBREVIATION_LIST____COALESCE_EXPR_LIST();
    }
    ;

case_specification:
    simple_case
    {
        STL_PARSER_CASE_SPECIFICATION____SIMPLE();
    }
    | searched_case
    {
        STL_PARSER_CASE_SPECIFICATION____SEARCHED();
    }
    ;

simple_case:
    SQL_TOK_CASE
    case_operand
    simple_when_clause_list
    else_clause
    SQL_TOK_END
    {
        STL_PARSER_CASE_SPECIFICATION____SIMPLE_CASE();
    }
    ;

searched_case:
    SQL_TOK_CASE
    searched_when_clause_list
    else_clause
    SQL_TOK_END
    {
        STL_PARSER_CASE_SPECIFICATION____SEARCHED_CASE();
    }
    ;

simple_when_clause_list:
    simple_when_clause
    {
        STL_PARSER_CASE_SPECIFICATION_LIST____SIMPLE_WHEN_CLAUSE();
    }
    | simple_when_clause_list simple_when_clause
    {
        STL_PARSER_CASE_SPECIFICATION_LIST____SIMPLE_WHEN_CLAUSE_LIST();
    }
    ;

simple_when_clause:
    SQL_TOK_WHEN when_operand SQL_TOK_THEN result
    {
        STL_PARSER_CASE_SPECIFICATION____SIMPLE_WHEN_CLAUSE();
    }
    ;

searched_when_clause_list:
    searched_when_clause
    {
        STL_PARSER_CASE_SPECIFICATION_LIST____SEARCHED_WHEN_CLAUSE();
    }
    | searched_when_clause_list searched_when_clause
    {
        STL_PARSER_CASE_SPECIFICATION_LIST____SEARCHED_WHEN_CLAUSE_LIST();
    }
    ;

searched_when_clause:
    SQL_TOK_WHEN search_condition SQL_TOK_THEN result
    {
        STL_PARSER_CASE_SPECIFICATION____SEARCHED_WHEN_CLAUSE();
    }
    ;

else_clause:
    /* empty */
    {
        STL_PARSER_CASE_SPECIFICATION____ELSE_CLAUSE_EMPTY();
    }
    | SQL_TOK_ELSE result
    {
        STL_PARSER_CASE_SPECIFICATION____ELSE_CLAUSE();
    }
    ;

case_operand:
    row_value_constructor_predicand
    {
        STL_PARSER_CASE_SPECIFICATION____CASE_OPERAND_ROW_VALUE();
    }
    |
    value_expression
    {
        STL_PARSER_CASE_SPECIFICATION_LIST____CASE_OPERAND_VALUE();
    }
    // | overlaps_predicate_part_1
    // {
    //     /**
    //      * @todo case_expression
    //      */                                
    // }
    ;

when_operand:
    row_value_constructor_predicand
    {
        STL_PARSER_CASE_SPECIFICATION____WHEN_OPERAND_ROW_VALUE();
    }
    |
    value_expression
    {
        STL_PARSER_CASE_SPECIFICATION_LIST____WHEN_OPERAND_VALUE();
    }
    /** @todo CASE_WHEN 테스트로 구문 범위 확인해야 함. */ 
    // 표준에는 아래와 같이 정의되어 있음. 
    // | <row value predicand>
    // | <comparison predicate part 2>
    // | <between predicate part 2>
    // | <in predicate part 2>
    // | <character like predicate part 2>
    // | <octet like predicate part 2>
    // | <similar predicate part 2>
    // | <regex like predicate part 2>
    // | <null predicate part 2>
    // | <quantified comparison predicate part 2>
    // | <normalized predicate part 2>
    // | <match predicate part 2>
    // | <overlaps predicate part 2>
    // | <distinct predicate part 2>
    // | <member predicate part 2>
    // | <submultiset predicate part 2>
    // | <set predicate part 2>
    // | <type predicate part 2>
    ; 

result:
    result_expression
    {
        STL_PARSER_CASE_SPECIFICATION____RESULT();
    }
    ;

result_expression:
    value_expression
    {
        STL_PARSER_CASE_SPECIFICATION____RESULT_EXPRESSION();
    }
    ;


/**
 * SET QUANTIFIER
 */

set_quantifier:
    /* empty */
    {
        STL_PARSER_SET_QUANTIFIER____DEFAULT();
    }
    | SQL_TOK_ALL
    {
        STL_PARSER_SET_QUANTIFIER____ALL();
    }
    | SQL_TOK_DISTINCT
    {
        STL_PARSER_SET_QUANTIFIER____DISTINCT();
    }
    ;


/**
 * FILTER CLAUSE
 */

filter_clause:
    /* empty */
    {
        STL_PARSER_FILTER_CLAUSE____EMPTY();
    }
    | SQL_TOK_FILTER SQL_TOK_LEFT_PAREN SQL_TOK_WHERE value_expression SQL_TOK_RIGHT_PAREN
    {
        STL_PARSER_FILTER_CLAUSE____FILTER();
    }
    ;


/*
 * COMMENT STATEMENT
 */

comment_statement:
    SQL_TOK_COMMENT SQL_TOK_ON comment_object SQL_TOK_IS quote_character_representation
    {
        STL_PARSER_COMMENT_STATEMENT____();
    }
    ;

comment_object:
    SQL_TOK_DATABASE
    {
        STL_PARSER_COMMENT_OBJECT____DATABASE();
    }
    |
    SQL_TOK_PROFILE identifier
    {
        STL_PARSER_COMMENT_OBJECT____PROFILE();
    }
    |
    SQL_TOK_AUTHORIZATION identifier
    {
        STL_PARSER_COMMENT_OBJECT____AUTHORIZATION();
    }
    |
    SQL_TOK_TABLESPACE identifier
    {
        STL_PARSER_COMMENT_OBJECT____TABLESPACE();
    }
    |
    SQL_TOK_SCHEMA identifier
    {
        STL_PARSER_COMMENT_OBJECT____SCHEMA();
    }
    |
    SQL_TOK_TABLE schema_qualified_name
    {
        STL_PARSER_COMMENT_OBJECT____TABLE();
    }
    |
    SQL_TOK_INDEX schema_qualified_name
    {
        STL_PARSER_COMMENT_OBJECT____INDEX();
    }
    |
    SQL_TOK_SEQUENCE schema_qualified_name
    {
        STL_PARSER_COMMENT_OBJECT____SEQUENCE();
    }
    |
    SQL_TOK_CONSTRAINT schema_qualified_name
    {
        STL_PARSER_COMMENT_OBJECT____CONSTRAINT();
    }
    |
    SQL_TOK_COLUMN identifier_chain
    {
        STL_PARSER_COMMENT_OBJECT____COLUMN();
    }
    ;

/*
 * SET CONSTRAINT
 */

set_constraint_mode_statement:
    SQL_TOK_SET SQL_TOK_CONSTRAINT constraint_name_list SQL_TOK_DEFERRED
    {
        STL_PARSER_SET_CONSTRAINT____NAME_DEFERRED();
    }
    |
    SQL_TOK_SET SQL_TOK_CONSTRAINTS constraint_name_list SQL_TOK_DEFERRED
    {
        STL_PARSER_SET_CONSTRAINT____NAME_DEFERRED();
    }
    |
    SQL_TOK_SET SQL_TOK_CONSTRAINT SQL_TOK_ALL SQL_TOK_DEFERRED
    {
        STL_PARSER_SET_CONSTRAINT____ALL_DEFERRED();
    }
    |
    SQL_TOK_SET SQL_TOK_CONSTRAINTS SQL_TOK_ALL SQL_TOK_DEFERRED
    {
        STL_PARSER_SET_CONSTRAINT____ALL_DEFERRED();
    }
    |
    SQL_TOK_SET SQL_TOK_CONSTRAINT constraint_name_list SQL_TOK_IMMEDIATE
    {
        STL_PARSER_SET_CONSTRAINT____NAME_IMMEDIATE();
    }
    |
    SQL_TOK_SET SQL_TOK_CONSTRAINTS constraint_name_list SQL_TOK_IMMEDIATE
    {
        STL_PARSER_SET_CONSTRAINT____NAME_IMMEDIATE();
    }
    |
    SQL_TOK_SET SQL_TOK_CONSTRAINT SQL_TOK_ALL SQL_TOK_IMMEDIATE
    {
        STL_PARSER_SET_CONSTRAINT____ALL_IMMEDIATE();
    }
    |
    SQL_TOK_SET SQL_TOK_CONSTRAINTS SQL_TOK_ALL SQL_TOK_IMMEDIATE
    {
        STL_PARSER_SET_CONSTRAINT____ALL_IMMEDIATE();
    }
    ;

constraint_name_list:
    table_name_list
    {
        STL_PARSER_CONSTRAINT_NAME_LIST();
    }
    ;

/*
 * SET TRANSACTION STATEMENT
 */

set_transaction_statement:
    SQL_TOK_SET SQL_TOK_TRANSACTION transaction_mode
    {
        STL_PARSER_SET_TRANSACTION____();
    }
    | SQL_TOK_SET SQL_TOK_LOCAL SQL_TOK_TRANSACTION transaction_mode
    {
        STL_PARSER_NOT_SUPPORT( a2 );
    }
    ;

transaction_mode:
    transaction_access_mode
    {
        STL_PARSER_TRANSACTION_MODE____TRANSACTION_ACCESS_MODE();
    }
    | isolation_level
    {
        STL_PARSER_TRANSACTION_MODE____ISOLATION_LEVEL();
    }
    | diagnostics_size
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | unique_integrity_check_time
    {
        STL_PARSER_TRANSACTION_MODE____UNIQUE_INTEGRITY();
    }
    ;

transaction_access_mode:
    SQL_TOK_READ SQL_TOK_ONLY
    {
        STL_PARSER_TRANSACTION_ACCESS_MODE____READ_ONLY();
    }
    | SQL_TOK_READ SQL_TOK_WRITE
    {
        STL_PARSER_TRANSACTION_ACCESS_MODE____READ_WRITE();
    }
    ;

isolation_level:
    SQL_TOK_ISOLATION SQL_TOK_LEVEL level_of_isolation
    {
        STL_PARSER_ISOLATION_LEVEL____();
    }
    ;

level_of_isolation:
    SQL_TOK_READ SQL_TOK_UNCOMMITTED
    {
        STL_PARSER_NOT_SUPPORT( a2 );
    }
    | SQL_TOK_READ SQL_TOK_COMMITTED
    {
        STL_PARSER_LEVEL_OF_ISOLATION____READ_COMMITTED();
    }
    | SQL_TOK_REPEATABLE SQL_TOK_READ
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    | SQL_TOK_SERIALIZABLE
    {
        STL_PARSER_LEVEL_OF_ISOLATION____SERIALIZABLE();
    }
    ;

diagnostics_size:
    SQL_TOK_DIAGNOSTICS SQL_TOK_SIZE SQL_TOK_UNSIGNED_INTEGER
    {
        STL_PARSER_NOT_SUPPORT( a1 );
    }
    ;

unique_integrity_check_time:
    SQL_TOK_UNIQUE SQL_TOK_INTEGRITY SQL_TOK_IS SQL_TOK_DEFAULT
    {
        STL_PARSER_UNIQUE_INTEGRITY____DEFAULT();
    }
    |
    SQL_TOK_UNIQUE SQL_TOK_INTEGRITY SQL_TOK_IS SQL_TOK_DEFERRED
    {
        STL_PARSER_UNIQUE_INTEGRITY____DEFERRED();
    }
    ;

/*
 * SET SESSION CHARACTERISTICS STATEMENT
 */

set_session_characteristics_statement:
    SQL_TOK_SET SQL_TOK_SESSION SQL_TOK_CHARACTERISTICS SQL_TOK_AS SQL_TOK_TRANSACTION transaction_mode
    {
        STL_PARSER_SET_SESSION_CHARACTERISTICS____();
    }
    ;

/*
 * DECLARE STATEMENT
 */

declare_statement:
    SQL_TOK_DECLARE identifier
    SQL_TOK_STATEMENT
    {
        STL_PARSER_DECLARE_STATEMENT____();
    }
    ;

/*
 * DECLARE CURSOR
 */

declare_cursor:
    SQL_TOK_DECLARE identifier
    cursor_sensitivity cursor_scrollability SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_FOR cursor_query
    {
        STL_PARSER_DECLARE_CURSOR____ISO_TYPE();
    }
    |
    SQL_TOK_DECLARE identifier
    cursor_sensitivity cursor_scrollability SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_IS cursor_query
    {
        STL_PARSER_DECLARE_CURSOR____ISO_TYPE();
    }
    |
    SQL_TOK_DECLARE identifier
    cursor_odbc_type SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_FOR cursor_query
    {
        STL_PARSER_DECLARE_CURSOR____ODBC_TYPE();
    }
    |
    SQL_TOK_DECLARE identifier
    cursor_odbc_type SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_IS cursor_query
    {
        STL_PARSER_DECLARE_CURSOR____ODBC_TYPE();
    }
    |
    SQL_TOK_DECLARE identifier
    cursor_sensitivity cursor_scrollability SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_FOR identifier
    {
        STL_PARSER_DYNAMIC_CURSOR____ISO_TYPE();
    }
    |
    SQL_TOK_DECLARE identifier
    cursor_sensitivity cursor_scrollability SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_IS identifier
    {
        STL_PARSER_DYNAMIC_CURSOR____ISO_TYPE();
    }
    |
    SQL_TOK_DECLARE identifier
    cursor_odbc_type SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_FOR identifier
    {
        STL_PARSER_DYNAMIC_CURSOR____ODBC_TYPE();
    }
    |
    SQL_TOK_DECLARE identifier
    cursor_odbc_type SQL_TOK_CURSOR cursor_holdability
    SQL_TOK_IS identifier
    {
        STL_PARSER_DYNAMIC_CURSOR____ODBC_TYPE();
    }
    ;

cursor_sensitivity:
    /* empty */
    {
        STL_PARSER_CURSOR_SENSITIVITY____EMPTY();
    }
    |
    SQL_TOK_INSENSITIVE
    {
        STL_PARSER_CURSOR_SENSITIVITY____INSENSITIVE();
    }
    |
    SQL_TOK_SENSITIVE
    {
        STL_PARSER_CURSOR_SENSITIVITY____SENSITIVE();
    }
    |
    SQL_TOK_ASENSITIVE
    {
        STL_PARSER_CURSOR_SENSITIVITY____ASENSITIVE();
    }
    ;

cursor_scrollability:
    /* empty */
    {
        STL_PARSER_CURSOR_SCROLLABILITY____EMPTY();
    }
    |
    SQL_TOK_NO SQL_TOK_SCROLL
    {
        STL_PARSER_CURSOR_SCROLLABILITY____NO_SCROLL();
    }
    |
    SQL_TOK_SCROLL
    {
        STL_PARSER_CURSOR_SCROLLABILITY____SCROLL();
    }
    ;

cursor_odbc_type:
    SQL_TOK_STATIC
    {
        STL_PARSER_CURSOR_ODBC_TYPE____STATIC();
    }
    |
    SQL_TOK_KEYSET
    {
        STL_PARSER_CURSOR_ODBC_TYPE____KEYSET();
    }
    |
    SQL_TOK_DYNAMIC
    {
        STL_PARSER_CURSOR_ODBC_TYPE____DYNAMIC();
    }
    ;

cursor_holdability:
    /* empty */
    {
        STL_PARSER_CURSOR_HOLDABILITY____EMPTY();
    }
    |
    SQL_TOK_WITH SQL_TOK_HOLD
    {
        STL_PARSER_CURSOR_HOLDABILITY____WITH_HOLD();
    }
    |
    SQL_TOK_WITHOUT SQL_TOK_HOLD
    {
        STL_PARSER_CURSOR_HOLDABILITY____WITHOUT_HOLD();
    }
    ;

cursor_query:
    select_statement
    {
        STL_PARSER_CURSOR_QUERY____SELECT();
    }
    |
    insert_statement
    {
        STL_PARSER_CURSOR_QUERY____INSERT_RETURNING_QUERY();
    }
    |
    update_statement
    {
        STL_PARSER_CURSOR_QUERY____UPDATE_RETURNING_QUERY();
    }
    |
    delete_statement
    {
        STL_PARSER_CURSOR_QUERY____DELETE_RETURNING_QUERY();
    }
    ;

/*
 * OPEN cursor
 */

open_statement:
    SQL_TOK_OPEN identifier
    {
        STL_PARSER_OPEN_CURSOR____();
    }
    |
    SQL_TOK_OPEN identifier using_parameter_clause
    {
        STL_PARSER_OPEN_DYNAMIC_CURSOR____();
    }
    ;

/*
 * CLOSE cursor
 */

close_statement:
    SQL_TOK_CLOSE identifier
    {
        STL_PARSER_CLOSE_CURSOR____();
    }
    ;

/*
 * FETCH cursor
 */

fetch_statement:
    SQL_TOK_FETCH fetch_orientation SQL_TOK_FROM identifier SQL_TOK_INTO select_target_list
    {
        STL_PARSER_FETCH_CURSOR____WITH_FROM();
    }
    |
    SQL_TOK_FETCH fetch_orientation identifier SQL_TOK_INTO select_target_list
    {
        STL_PARSER_FETCH_CURSOR____WITHOUT_FROM();
    }
    ;

fetch_orientation:
    /* empty */
    {
        STL_PARSER_FETCH_ORIENTATION____EMPTY();
    }
    |
    SQL_TOK_NEXT
    {
        STL_PARSER_FETCH_ORIENTATION____NEXT();
    }
    |
    SQL_TOK_PRIOR
    {
        STL_PARSER_FETCH_ORIENTATION____PRIOR();
    }
    |
    SQL_TOK_FIRST
    {
        STL_PARSER_FETCH_ORIENTATION____FIRST();
    }
    |
    SQL_TOK_LAST
    {
        STL_PARSER_FETCH_ORIENTATION____LAST();
    }
    |
    SQL_TOK_CURRENT
    {
        STL_PARSER_FETCH_ORIENTATION____CURRENT();
    }
    |
    SQL_TOK_ABSOLUTE simple_value_specification
    {
        STL_PARSER_FETCH_ORIENTATION____ABSOLUTE();
    }
    |
    SQL_TOK_RELATIVE simple_value_specification
    {
        STL_PARSER_FETCH_ORIENTATION____RELATIVE();
    }
    ;

/*
 * SET SESSION AUTHORIZATION
 */

set_session_auth_statement:
    SQL_TOK_SET SQL_TOK_SESSION SQL_TOK_AUTHORIZATION identifier
    {
        STL_PARSER_SET_SESSION_AUTHORIZATION();
    }
    ;

/*
 * SET TIME ZONE STATEMENT
 */

set_time_zone_statement:
    SQL_TOK_SET SQL_TOK_TIME SQL_TOK_ZONE SQL_TOK_LOCAL
    {
        STL_PARSER_SET_TIME_ZONE____LOCAL();
    }
    | SQL_TOK_SET SQL_TOK_TIME SQL_TOK_ZONE SQL_TOK_QUOTE_STRING
    {
        STL_PARSER_SET_TIME_ZONE____GMT_OFFSET();
    }
    ;

/*
 * CONNECTION STATEMENT
 */
connection_statement:
    connect_statement
    {
        STL_PARSER_CONNECTION____CONNECT();
    }
    | disconnect_statement
    {
        STL_PARSER_CONNECTION____DISCONNECT();
    }
    ;

connect_statement:
    SQL_TOK_CONNECT user_pwd
    {
        STL_PARSER_CONNECT____EMPTY();
    }
    | SQL_TOK_CONNECT user_pwd SQL_TOK_USING conn_string_desc
    {
        STL_PARSER_CONNECT____USING();
    }
    | SQL_TOK_CONNECT user_pwd SQL_TOK_AT conn_string_desc SQL_TOK_USING conn_string_desc
    {
        STL_PARSER_CONNECT____AT_USING();
    }
    ;

user_pwd:
    conn_string_desc
    {
        STL_PARSER_USER_PWD____USER_PASSWORD_ALL();
    }
    | conn_string_desc SQL_TOK_IDENTIFIED SQL_TOK_BY conn_string_desc
    {
        STL_PARSER_USER_PWD____USER_PASSWORD_SEP();
    }
    ;

conn_string_desc:
    host_variable
    {
        STL_PARSER_CONN_STRING_DESC____HOST_VARIABLE();
    }
    | identifier
    {
        STL_PARSER_CONN_STRING_DESC____IDENTIFIER();
    }
    ;

disconnect_statement:
    SQL_TOK_DISCONNECT
    {
        STL_PARSER_DISCONNECT____EMPTY();
    }
    | SQL_TOK_DISCONNECT conn_string_desc
    {
        STL_PARSER_DISCONNECT____CONN_OBJECT();
    }
    | SQL_TOK_DISCONNECT SQL_TOK_ALL
    {
        STL_PARSER_DISCONNECT____ALL();
    }
    ;




/***************************************************************************************
 * DYNAMIC SQL COMMAND - only available in Embedded-SQL, PSM
 * - Embedded SQL, PSM 등에서만 사용가능한 Dynamic SQL
 * - ex) EXECUTE IMMEDIATE
 ***************************************************************************************/

dynamic_sql_command:
    execute_immediate_statement
    {
        STL_PARSER_DYNAMIC_COMMAND____EXECUTE_IMMEDIATE();
    }
    |
    prepare_statement
    {
        STL_PARSER_DYNAMIC_COMMAND____PREPARE();
    }
    |
    execute_statement
    {
        STL_PARSER_DYNAMIC_COMMAND____EXECUTE();
    }
    ;

/**
 * EXECUTE IMMEDIATE
 */

execute_immediate_statement:
    SQL_TOK_EXECUTE SQL_TOK_IMMEDIATE host_variable
    {
        /* EXECUTE IMMEDIATE :varable */
        STL_PARSER_EXECUTE_IMMEDIATE____HOSTVAR();
    }
    |
    SQL_TOK_EXECUTE SQL_TOK_IMMEDIATE SQL_TOK_QUOTE_STRING
    {
        /* EXECUTE IMMEDIATE 'sql statement' */
        STL_PARSER_EXECUTE_IMMEDIATE____SINGLE_QUOTE();
    }
    |
    SQL_TOK_EXECUTE SQL_TOK_IMMEDIATE SQL_TOK_DOUBLE_QUOTE_STRING
    {
        /* EXECUTE IMMEDIATE "sql statement" */
        STL_PARSER_EXECUTE_IMMEDIATE____DOUBLE_QUOTE();
    }
    |
    SQL_TOK_EXECUTE SQL_TOK_IMMEDIATE sql_command
    {
        /* EXECUTE IMMEDIATE sql statement */
        STL_PARSER_EXECUTE_IMMEDIATE____SQL_COMMAND();
    }
    ;

/**
 * PREPARE
 */

prepare_statement:
    SQL_TOK_PREPARE identifier SQL_TOK_FROM host_variable
    {
        /* PREPARE stmt_name FROM :varable */
        STL_PARSER_PREPARE____HOSTVAR();
    }
    |
    SQL_TOK_PREPARE identifier SQL_TOK_FROM SQL_TOK_QUOTE_STRING
    {
        /* PREPARE stmt_name FROM 'sql statement' */
        STL_PARSER_PREPARE____SINGLE_QUOTE();
    }
    |
    SQL_TOK_PREPARE identifier SQL_TOK_FROM SQL_TOK_DOUBLE_QUOTE_STRING
    {
        /* PREPARE stmt_name FROM "sql statement" */
        STL_PARSER_PREPARE____DOUBLE_QUOTE();
    }
    |
    SQL_TOK_PREPARE identifier SQL_TOK_FROM sql_command
    {
        /* PREPARE stmt_name FROM sql statement */
        STL_PARSER_PREPARE____SQL_COMMAND();
    }
    ;

/**
 * EXECUTE
 */

execute_statement:
    SQL_TOK_EXECUTE identifier
    {
        /* EXECUTE stmt_name  */
        STL_PARSER_EXECUTE____EMPTY();
    }
    |
    SQL_TOK_EXECUTE identifier using_parameter_clause
    {
        /* EXECUTE stmt_name USING .. */
        STL_PARSER_EXECUTE____USING();
    }
    |
    SQL_TOK_EXECUTE identifier into_parameter_clause
    {
        /* EXECUTE stmt_name INTO .. */
        STL_PARSER_EXECUTE____INTO();
    }
    |
    SQL_TOK_EXECUTE identifier using_parameter_clause into_parameter_clause
    {
        /* EXECUTE stmt_name USING .. INTO ..*/
        STL_PARSER_EXECUTE____USING_INTO();
    }
    |
    SQL_TOK_EXECUTE identifier into_parameter_clause using_parameter_clause 
    {
        /* EXECUTE stmt_name INTO .. USING .. */
        STL_PARSER_EXECUTE____INTO_USING();
    }
    ;


using_parameter_clause:
    SQL_TOK_USING select_target_list
    {
        /* USING name1, name2, ... */
        STL_PARSER_USING_PARAMETER_CLAUSE____ARGUMENTS();
    }
    |
    SQL_TOK_USING descriptor_clause
    {
        /* USING [SQL] DESCRIPTOR desc_name */
        STL_PARSER_USING_PARAMETER_CLAUSE____DESCRIPTOR();
    }
    ;

into_parameter_clause:
    SQL_TOK_INTO select_target_list
    {
        /* INTO name1, name2, ... */
        STL_PARSER_INTO_PARAMETER_CLAUSE____ARGUMENTS();
    }
    |
    SQL_TOK_INTO descriptor_clause
    {
        /* INTO [SQL] DESCRIPTOR desc_name */
        STL_PARSER_INTO_PARAMETER_CLAUSE____DESCRIPTOR();
    }
    ;

descriptor_clause:
    SQL_TOK_DESCRIPTOR host_variable
    {
        /* DESCRIPTOR :sHost */
        STL_PARSER_DESCRIPTOR_CLAUSE____HOST_VAR();
    }
    |
    SQL_TOK_SQL SQL_TOK_DESCRIPTOR host_variable
    {
        /* SQL DESCRIPTOR :sHost */
        STL_PARSER_DESCRIPTOR_CLAUSE____SQL_HOST_VAR();
    }
    |
    SQL_TOK_DESCRIPTOR SQL_TOK_QUOTE_STRING
    {
        /* DESCRIPTOR 'desc_name' */
        STL_PARSER_DESCRIPTOR_CLUASE____SINGLE_QUOTE();
    }
    |
    SQL_TOK_SQL SQL_TOK_DESCRIPTOR SQL_TOK_QUOTE_STRING
    {
        /* SQL DESCRIPTOR 'desc_name' */
        STL_PARSER_DESCRIPTOR_CLUASE____SQL_SINGLE_QUOTE();
    }
    ;

/***************************************************************************************
 * PHRASE SYNTAX - syntax replacement
 * - Syntax Replacement 를 위해 QP 내부적으로만 사용하는 기능임.
 * - ex) viewed table : VIEW v1(c1, c2) 의 대체
 * - ex) check constraint : CHECK c1 > 0 의 대체
 * - ex) default value : DEFAULT systimestamp
 ***************************************************************************************/

partial_phrase_syntax:
      phrase_viewed_table          { STL_PARSER_PHRASE____VIEWED_TABLE(); }
    | phrase_default_expression    { STL_PARSER_PHRASE____DEFAULT_EXPRESSION(); }
    ;

/**
 * VIEW view_name ( column_list )
 */
phrase_viewed_table:
    SQL_TOK_VIEW identifier_chain
    view_column_list
    {
        STL_PHRASE_VIEWED_TABLE____BASIC();
    }
    ;


/**
 * DEFAULT expression
 */
phrase_default_expression:
    SQL_TOK_DEFAULT default_option
    {
        STL_PHRASE_DEFAULT_EXPRESSION____BASIC();
    }
    ;

/***************************************************************************************
 * keyword
 ***************************************************************************************/

nonreserved_keyword:  // qlp_value
    SQL_TOK_A
    | SQL_TOK_ABS
    | SQL_TOK_ACTION
    | SQL_TOK_ADA
    | SQL_TOK_ADD
    | SQL_TOK_ADMIN
    | SQL_TOK_ADMINISTRATION
    | SQL_TOK_AFTER
    | SQL_TOK_ALWAYS
    | SQL_TOK_ARRAY
    | SQL_TOK_ARRAY_AGG
    | SQL_TOK_ASC
    | SQL_TOK_ASSERTION
    | SQL_TOK_ASSIGNMENT
    | SQL_TOK_ATOMIC
    | SQL_TOK_ATTRIBUTE
    | SQL_TOK_ATTRIBUTES
    | SQL_TOK_AUTOMATICALLY
    | SQL_TOK_AVG
    | SQL_TOK_B
    | SQL_TOK_BEFORE
    | SQL_TOK_BEGIN_FRAME
    | SQL_TOK_BEGIN_PARTITION
    | SQL_TOK_BERNOULLI
    | SQL_TOK_BIGINT
    | SQL_TOK_BINARY
    | SQL_TOK_BLOB
    | SQL_TOK_BOOLEAN
    | SQL_TOK_BREADTH
    | SQL_TOK_C
    | SQL_TOK_CALLED
    | SQL_TOK_CARDINALITY
    | SQL_TOK_CASCADE
    | SQL_TOK_CASCADED
    | SQL_TOK_CAST
    | SQL_TOK_CATALOG
    | SQL_TOK_CATALOG_NAME
    | SQL_TOK_CEIL
    | SQL_TOK_CEILING
    | SQL_TOK_CHAIN
    | SQL_TOK_CHAR
    | SQL_TOK_CHARACTERISTICS
    | SQL_TOK_CHARACTER
    | SQL_TOK_CHARACTERS
    | SQL_TOK_CHARACTER_LENGTH
    | SQL_TOK_CHARACTER_SET_CATALOG
    | SQL_TOK_CHARACTER_SET_NAME
    | SQL_TOK_CHARACTER_SET_SCHEMA
    | SQL_TOK_CHAR_LENGTH
    
    | SQL_TOK_CHECKPOINT
    | SQL_TOK_CLASS_ORIGIN
    | SQL_TOK_CLOB
    | SQL_TOK_COALESCE
    | SQL_TOK_COBOL
    | SQL_TOK_COLLATE
    | SQL_TOK_COLLATION
    | SQL_TOK_COLLATION_CATALOG
    | SQL_TOK_COLLATION_NAME
    | SQL_TOK_COLLATION_SCHEMA
    | SQL_TOK_COLLECT
    | SQL_TOK_COLUMN_NAME
    | SQL_TOK_COMMAND_FUNCTION
    | SQL_TOK_COMMAND_FUNCTION_CODE
    | SQL_TOK_COMMITTED
    | SQL_TOK_CONDITION
    | SQL_TOK_CONDITION_NUMBER
    | SQL_TOK_CONNECTION
    | SQL_TOK_CONNECTION_NAME
    | SQL_TOK_CONSTRAINT_CATALOG
    | SQL_TOK_CONSTRAINT_NAME
    | SQL_TOK_CONSTRAINT_SCHEMA
    | SQL_TOK_CONSTRAINTS
    | SQL_TOK_CONSTRUCTOR
    | SQL_TOK_CONTAINS
    | SQL_TOK_CONTINUE
    | SQL_TOK_CONTROL
    | SQL_TOK_CONVERT
    | SQL_TOK_CORR
    | SQL_TOK_CORRESPONDING
    | SQL_TOK_COUNT
    | SQL_TOK_COVAR_POP
    | SQL_TOK_COVAR_SAMP
    | SQL_TOK_CUBE
    | SQL_TOK_CUME_DIST
    | SQL_TOK_CURSOR_NAME
    | SQL_TOK_CYCLE
    | SQL_TOK_D
    | SQL_TOK_DATA
    | SQL_TOK_DATE
    | SQL_TOK_DATETIME_INTERVAL_CODE
    | SQL_TOK_DATETIME_INTERVAL_PRECISION
    | SQL_TOK_DAY
    | SQL_TOK_DAYS
    | SQL_TOK_DEC
    | SQL_TOK_DECIMAL
    | SQL_TOK_DEFAULTS
    | SQL_TOK_DEFERRABLE
    | SQL_TOK_DEFERRED
    | SQL_TOK_DEFINED
    | SQL_TOK_DEFINER
    | SQL_TOK_DEGREE
    | SQL_TOK_DENSE_RANK
    | SQL_TOK_DEPTH
    | SQL_TOK_DERIVED
    | SQL_TOK_DESC
    | SQL_TOK_DESCRIPTOR
    | SQL_TOK_DIAGNOSTICS
    | SQL_TOK_DISPATCH
    | SQL_TOK_DOMAIN
    | SQL_TOK_DOUBLE
    | SQL_TOK_DYNAMIC
    | SQL_TOK_DYNAMIC_FUNCTION
    | SQL_TOK_DYNAMIC_FUNCTION_CODE
    | SQL_TOK_EACH
    | SQL_TOK_ELEMENT
    | SQL_TOK_END_FRAME
    | SQL_TOK_END_PARTITION
    | SQL_TOK_ENFORCED
    | SQL_TOK_EQUALS
    | SQL_TOK_EVERY
    | SQL_TOK_EXCLUDE
    | SQL_TOK_EXCLUDING
    | SQL_TOK_EXP
    | SQL_TOK_EXPRESSION
    | SQL_TOK_EXTERNAL
    | SQL_TOK_EXTRACT
    | SQL_TOK_FILE
    | SQL_TOK_FILES
    | SQL_TOK_FINAL
    | SQL_TOK_FLAG
    | SQL_TOK_FLOAT
    | SQL_TOK_FLOAT4
    | SQL_TOK_FLOAT8
    | SQL_TOK_FLOOR
    | SQL_TOK_FOLLOWING
    | SQL_TOK_FOREVER
    | SQL_TOK_FORTRAN
    | SQL_TOK_FRAME_ROW
    | SQL_TOK_FOUND
    | SQL_TOK_FUSION
    | SQL_TOK_G
    | SQL_TOK_GENERAL
    | SQL_TOK_GENERATED
    | SQL_TOK_GO
    | SQL_TOK_GOTO
    | SQL_TOK_GRANTED
    | SQL_TOK_GROUPING
    | SQL_TOK_GROUPS
    | SQL_TOK_HASH_AJ
    | SQL_TOK_HASH_ISJ
    | SQL_TOK_HASH_SJ
    | SQL_TOK_HIERARCHY
    | SQL_TOK_HOUR
    | SQL_TOK_HOURS
    | SQL_TOK_IDENTITY
    | SQL_TOK_IGNORE
    | SQL_TOK_IMAGE
    | SQL_TOK_IMPLEMENTATION
    | SQL_TOK_INCLUDING
    | SQL_TOK_INCREMENT
    | SQL_TOK_INITIALLY
    | SQL_TOK_INPUT
    | SQL_TOK_INSENSITIVE
    | SQL_TOK_INSTANCE
    | SQL_TOK_INSTANTIABLE
    | SQL_TOK_INSTEAD
    | SQL_TOK_INT
    | SQL_TOK_INT2
    | SQL_TOK_INT4
    | SQL_TOK_INT8
    | SQL_TOK_INTEGER
    | SQL_TOK_INTERSECTION
    | SQL_TOK_INTERVAL
    | SQL_TOK_INVOKER
    | SQL_TOK_ISOLATION
    | SQL_TOK_K
    | SQL_TOK_KEEP
    | SQL_TOK_KEY
    | SQL_TOK_KEY_MEMBER
    | SQL_TOK_KEY_TYPE
    | SQL_TOK_LAG
    | SQL_TOK_LANGUAGE
    | SQL_TOK_LARGE
    | SQL_TOK_LAST_VALUE
    | SQL_TOK_LATERAL
    | SQL_TOK_LEAD
    | SQL_TOK_LENGTH
    | SQL_TOK_LEVEL
    | SQL_TOK_LIKE_REGEX
    | SQL_TOK_LIST
    | SQL_TOK_LN
    | SQL_TOK_LOCATOR
    | SQL_TOK_LOWER
    | SQL_TOK_M
    | SQL_TOK_MAP
    | SQL_TOK_MATCHED
    | SQL_TOK_MAX
    | SQL_TOK_MAXVALUE
    | SQL_TOK_MAX_CARDINALITY
    | SQL_TOK_MERGE_AJ
    | SQL_TOK_MERGE_SJ
    | SQL_TOK_MESSAGE_LENGTH
    | SQL_TOK_MESSAGE_OCTET_LENGTH
    | SQL_TOK_MESSAGE_TEXT
    | SQL_TOK_METHOD
    | SQL_TOK_MIN
    | SQL_TOK_MINVALUE
    | SQL_TOK_MINUTE
    | SQL_TOK_MINUTES
    | SQL_TOK_MOD
    | SQL_TOK_MODIFIES
    | SQL_TOK_MODULE
    | SQL_TOK_MONTH
    | SQL_TOK_MORE
    | SQL_TOK_MULTISET
    | SQL_TOK_MUMPS
    | SQL_TOK_NAME
    | SQL_TOK_NAMES
    | SQL_TOK_NATIONAL
    | SQL_TOK_NATIVE_BIGINT
    | SQL_TOK_NATIVE_DOUBLE
    | SQL_TOK_NATIVE_INTEGER
    | SQL_TOK_NATIVE_REAL
    | SQL_TOK_NATIVE_SMALLINT
    | SQL_TOK_NCHAR
    | SQL_TOK_NCLOB
    | SQL_TOK_NESTING
    | SQL_TOK_NFC
    | SQL_TOK_NFD
    | SQL_TOK_NFKC
    | SQL_TOK_NFKD
    | SQL_TOK_NL_AJ
    | SQL_TOK_NL_ISJ
    | SQL_TOK_NL_SJ
    | SQL_TOK_NO
    | SQL_TOK_NO_QUERY_TRANSFORMATION
    | SQL_TOK_NO_UNNEST
    | SQL_TOK_NONE
    | SQL_TOK_NORMALIZE
    | SQL_TOK_NORMALIZED
    | SQL_TOK_NTH_VALUE
    | SQL_TOK_NTILE
    | SQL_TOK_NULLABLE
    | SQL_TOK_NULLIF
    | SQL_TOK_NULLS
    | SQL_TOK_NUMBER
    | SQL_TOK_NUMERIC
    | SQL_TOK_OBJECT
    | SQL_TOK_OBSOLETE
    | SQL_TOK_OCCURRENCES_REGEX
    | SQL_TOK_OCTETS
    | SQL_TOK_OCTET_LENGTH
    | SQL_TOK_OJ
    | SQL_TOK_ONLY
    | SQL_TOK_OPTION
    | SQL_TOK_OPTIONS
    | SQL_TOK_ORDERING
    | SQL_TOK_ORDINALITY
    | SQL_TOK_OTHERS
    | SQL_TOK_OUTER
    | SQL_TOK_OUTPUT
    | SQL_TOK_OVER
    | SQL_TOK_OVERLAPS
    | SQL_TOK_OVERLAY
    | SQL_TOK_OVERRIDING
    | SQL_TOK_P
    | SQL_TOK_PAD
    | SQL_TOK_PARAMETER
    | SQL_TOK_PARAMETER_MODE
    | SQL_TOK_PARAMETER_NAME
    | SQL_TOK_PARAMETER_ORDINAL_POSITION
    | SQL_TOK_PARAMETER_SPECIFIC_CATALOG
    | SQL_TOK_PARAMETER_SPECIFIC_NAME
    | SQL_TOK_PARAMETER_SPECIFIC_SCHEMA
    | SQL_TOK_PARTIAL
    | SQL_TOK_PARTITION
    | SQL_TOK_PASCAL
    | SQL_TOK_PATH
    | SQL_TOK_PERCENT_RANK
    | SQL_TOK_PERCENTILE_CONT
    | SQL_TOK_PERCENTILE_DISC
    | SQL_TOK_PLACING
    | SQL_TOK_PLI
    | SQL_TOK_POSITION
    | SQL_TOK_POSITION_REGEX
    | SQL_TOK_POWER
    | SQL_TOK_PRECEDING
    | SQL_TOK_PRECISION
    | SQL_TOK_PRESERVE
    | SQL_TOK_PRIVILEGES
    | SQL_TOK_PUBLIC
    | SQL_TOK_QUERY
    | SQL_TOK_RANGE
    | SQL_TOK_RANK
    | SQL_TOK_READS
    | SQL_TOK_REAL
    | SQL_TOK_RECURSIVE
    | SQL_TOK_REFERENCING
    | SQL_TOK_REGR_AVGX
    | SQL_TOK_REGR_AVGY
    | SQL_TOK_REGR_COUNT
    | SQL_TOK_REGR_INTERCEPT
    | SQL_TOK_REGR_R2
    | SQL_TOK_REGR_SLOPE
    | SQL_TOK_REGR_SXX
    | SQL_TOK_REGR_SXY
    | SQL_TOK_REGR_SYY
    | SQL_TOK_REPEATABLE
    | SQL_TOK_RESPECT
    | SQL_TOK_RESTART
    | SQL_TOK_RESTORE
    | SQL_TOK_RESTRICT
    | SQL_TOK_RETURNED_CARDINALITY
    | SQL_TOK_RETURNED_LENGTH
    | SQL_TOK_RETURNED_OCTET_LENGTH
    | SQL_TOK_RETURNED_SQLSTATE
    | SQL_TOK_ROLE
    | SQL_TOK_ROLLUP
    | SQL_TOK_ROUTINE
    | SQL_TOK_ROUTINE_CATALOG
    | SQL_TOK_ROUTINE_NAME
    | SQL_TOK_ROUTINE_SCHEMA
    | SQL_TOK_ROW_COUNT
    | SQL_TOK_SCALE
    | SQL_TOK_SCHEMA
    | SQL_TOK_SCHEMA_NAME
    | SQL_TOK_SCOPE
    | SQL_TOK_SCOPE_CATALOG
    | SQL_TOK_SCOPE_NAME
    | SQL_TOK_SCOPE_SCHEMA
    | SQL_TOK_SCROLL
    | SQL_TOK_SEARCH
    | SQL_TOK_SECOND
    | SQL_TOK_SECONDS
    | SQL_TOK_SECTION
    | SQL_TOK_SECURITY
    | SQL_TOK_SELF
    | SQL_TOK_SENSITIVE
    | SQL_TOK_SEQUENCE
    | SQL_TOK_SERIALIZABLE
    | SQL_TOK_SERVER_NAME
    | SQL_TOK_SESSION
    | SQL_TOK_SETS
    | SQL_TOK_SIMILAR
    | SQL_TOK_SIMPLE
    | SQL_TOK_SIZE
    | SQL_TOK_SMALLINT
    | SQL_TOK_SOURCE
    | SQL_TOK_SPACE
    | SQL_TOK_SPECIFIC
    | SQL_TOK_SPECIFICTYPE
    | SQL_TOK_SPECIFIC_NAME
    | SQL_TOK_STATE
    | SQL_TOK_STATEMENT
    | SQL_TOK_STATIC
    | SQL_TOK_STDDEV_POP
    | SQL_TOK_STDDEV_SAMP
    | SQL_TOK_STRUCTURE
    | SQL_TOK_STYLE
    | SQL_TOK_SUBCLASS_ORIGIN
    | SQL_TOK_SUBMULTISET
    | SQL_TOK_SUBSTRB 
    | SQL_TOK_SUBSTRING
    | SQL_TOK_SUBSTRING_REGEX
    | SQL_TOK_SUGGESTION
    | SQL_TOK_SUM
    | SQL_TOK_T
    | SQL_TOK_TABLESAMPLE
    | SQL_TOK_TABLE_NAME
    | SQL_TOK_TEMPFILE
    | SQL_TOK_TEMPORARY
    | SQL_TOK_TIES
    | SQL_TOK_TIME
    | SQL_TOK_TIMESTAMP
    | SQL_TOK_TIMEZONE_HOUR
    | SQL_TOK_TIMEZONE_MINUTE
    | SQL_TOK_TOP_LEVEL_COUNT
    | SQL_TOK_TRANSACTION
    | SQL_TOK_TRANSACTION_ACTIVE
    | SQL_TOK_TRANSACTIONS_COMMITTED
    | SQL_TOK_TRANSACTIONS_ROLLED_BACK
    | SQL_TOK_TRANSFORM
    | SQL_TOK_TRANSFORMS
    | SQL_TOK_TRANSLATE
    | SQL_TOK_TRANSLATE_REGEX
    | SQL_TOK_TRANSLATION
    | SQL_TOK_TREAT
    | SQL_TOK_TRIGGER_CATALOG
    | SQL_TOK_TRIGGER_NAME
    | SQL_TOK_TRIGGER_SCHEMA
    | SQL_TOK_TRIM
    | SQL_TOK_TRIM_ARRAY
    | SQL_TOK_TS
    | SQL_TOK_TYPE
    | SQL_TOK_UESCAPE
    | SQL_TOK_UNBOUNDED
    | SQL_TOK_UNCOMMITTED
    | SQL_TOK_UNDER
    | SQL_TOK_UNDO
    | SQL_TOK_UNNAMED
    | SQL_TOK_UNNEST
    | SQL_TOK_USAGE
    | SQL_TOK_USER_DEFINED_TYPE_CATALOG
    | SQL_TOK_USER_DEFINED_TYPE_CODE
    | SQL_TOK_USER_DEFINED_TYPE_NAME
    | SQL_TOK_USER_DEFINED_TYPE_SCHEMA
    | SQL_TOK_VALUE_OF
    | SQL_TOK_VAR_POP
    | SQL_TOK_VAR_SAMP
    | SQL_TOK_VARBINARY
    | SQL_TOK_VARCHAR
    | SQL_TOK_VARCHAR2
    | SQL_TOK_VARYING
    | SQL_TOK_VERSION
    | SQL_TOK_VERSIONING
    | SQL_TOK_VERSIONS
    | SQL_TOK_WITHIN
    | SQL_TOK_WORK
    | SQL_TOK_WRITE
    | SQL_TOK_YEAR
    | SQL_TOK_YEARS
    | SQL_TOK_ZONE
    {
    }
    ;

gsql_keyword:    // qlp_value
    SQL_TOK_ABORT
    | SQL_TOK_ACCOUNT
    | SQL_TOK_ACOS
    | SQL_TOK_ADDDATE
    | SQL_TOK_ADDITION
    | SQL_TOK_ADDTIME
    | SQL_TOK_ADD_MONTHS
    | SQL_TOK_AGER
    | SQL_TOK_ANTI
    | SQL_TOK_ARCHIVELOG
    | SQL_TOK_ASENSITIVE
    | SQL_TOK_ASIN
    | SQL_TOK_ATAN
    | SQL_TOK_ATAN2
    | SQL_TOK_AUTOEXTEND
    | SQL_TOK_BACKUP
    | SQL_TOK_BITAND
    | SQL_TOK_BITNOT
    | SQL_TOK_BITOR
    | SQL_TOK_BITXOR
    | SQL_TOK_BIT_LENGTH
    | SQL_TOK_BREAKPOINT
    | SQL_TOK_BYTE
    | SQL_TOK_BYTE_LENGTH
    | SQL_TOK_CACHE
    | SQL_TOK_CANCEL
    | SQL_TOK_CASE2
    | SQL_TOK_CBRT
    | SQL_TOK_CHANGE
    | SQL_TOK_CHR
    | SQL_TOK_CLEANUP
    | SQL_TOK_CLEAR
    | SQL_TOK_CLOCK_DATE
    | SQL_TOK_CLOCK_LOCALTIME
    | SQL_TOK_CLOCK_LOCALTIMESTAMP
    | SQL_TOK_CLOCK_TIME
    | SQL_TOK_CLOCK_TIMESTAMP
    | SQL_TOK_COLUMNAR
    | SQL_TOK_COLUMNS
    | SQL_TOK_COMPILE
    | SQL_TOK_CONCAT
    | SQL_TOK_CONCATENATE
    | SQL_TOK_CONTENTS
    | SQL_TOK_CONTROLFILE
    | SQL_TOK_CORRUPTION
    | SQL_TOK_COS
    | SQL_TOK_COT
    | SQL_TOK_CUMULATIVE
    | SQL_TOK_CURRVAL
    | SQL_TOK_CURSOR
    | SQL_TOK_DATAFILE
    | SQL_TOK_DATAFILES
    | SQL_TOK_DATEADD
    | SQL_TOK_DATEDIFF
    | SQL_TOK_DATE_ADD
    | SQL_TOK_DATE_PART
    | SQL_TOK_DAYOFYEAR
    | SQL_TOK_DECODE
    | SQL_TOK_DEGREES
    | SQL_TOK_DIFFERENTIAL
    | SQL_TOK_DISABLE
    | SQL_TOK_DISK
    | SQL_TOK_DIVISION
    | SQL_TOK_DUMP
    | SQL_TOK_ENABLE
    | SQL_TOK_EXCLUSIVE
    | SQL_TOK_EXPIRE
    | SQL_TOK_EXTSIZE
    | SQL_TOK_FACTORIAL
    | SQL_TOK_FAILED_LOGIN_ATTEMPTS
    | SQL_TOK_FLUSH
    | SQL_TOK_FLUSHING
    | SQL_TOK_FORCE
    | SQL_TOK_FROM_UNIXTIME
    | SQL_TOK_GREATEST
    | SQL_TOK_HASH
    | SQL_TOK_HISTORY
    | SQL_TOK_INCOMPLETE
    | SQL_TOK_INCREASE
    | SQL_TOK_INCREMENTAL
    | SQL_TOK_INDEX
    | SQL_TOK_INDEX_ASC 
    | SQL_TOK_INDEX_COMBINE 
    | SQL_TOK_INDEX_DESC 
    | SQL_TOK_INITCAP
    | SQL_TOK_INITIAL
    | SQL_TOK_INITRANS
    | SQL_TOK_INSTR
    | SQL_TOK_INTEGRITY
    | SQL_TOK_IN_KEY_RANGE
    | SQL_TOK_KEYSET
    | SQL_TOK_KILL
    | SQL_TOK_LAST_DAY
    | SQL_TOK_LEAST    
    | SQL_TOK_LENGTHB
    | SQL_TOK_LOCK
    | SQL_TOK_LOCKED
    | SQL_TOK_LOG
    | SQL_TOK_LOGFILE
    | SQL_TOK_LOGGING
    | SQL_TOK_LOGON_USER
    | SQL_TOK_LOGS
    | SQL_TOK_LONG
    | SQL_TOK_LOOPBACK
    | SQL_TOK_LPAD
    | SQL_TOK_LTRIM
    | SQL_TOK_MAXSIZE
    | SQL_TOK_MAXTRANS
    | SQL_TOK_MEMORY
    | SQL_TOK_MICROSECOND
    | SQL_TOK_MILLISECOND
    | SQL_TOK_MINSIZE
    | SQL_TOK_MODE
    | SQL_TOK_MOUNT
    | SQL_TOK_MULTIPLICATION
    | SQL_TOK_NEGATIVE
    | SQL_TOK_NEXTVAL
    | SQL_TOK_NOARCHIVELOG
    | SQL_TOK_NOCACHE
    | SQL_TOK_NOCYCLE
    | SQL_TOK_NOLOGGING
    | SQL_TOK_NOMAXVALUE
    | SQL_TOK_NOMINVALUE
    | SQL_TOK_NOPARALLEL
    | SQL_TOK_NORESETLOGS
    | SQL_TOK_NORMAL
    | SQL_TOK_NOVALIDATE
    | SQL_TOK_NOWAIT
    | SQL_TOK_NO_INDEX
    | SQL_TOK_NO_PUSH_PRED
    | SQL_TOK_NO_PUSH_SUBQ
    | SQL_TOK_NO_USE_HASH
    | SQL_TOK_NO_USE_INL
    | SQL_TOK_NO_USE_MERGE
    | SQL_TOK_NO_USE_NL
    | SQL_TOK_NVL
    | SQL_TOK_NVL2    
    | SQL_TOK_OFF
    | SQL_TOK_OFFLINE
    | SQL_TOK_ONLINE
    | SQL_TOK_OPERATIONAL
    | SQL_TOK_ORDERED
    | SQL_TOK_PAGE
    | SQL_TOK_PARALLEL
    | SQL_TOK_PASSWORD
    | SQL_TOK_PASSWORD_GRACE_TIME
    | SQL_TOK_PASSWORD_LIFE_TIME
    | SQL_TOK_PASSWORD_LOCK_TIME
    | SQL_TOK_PASSWORD_REUSE_MAX
    | SQL_TOK_PASSWORD_REUSE_TIME
    | SQL_TOK_PASSWORD_VERIFY_FUNCTION
    | SQL_TOK_PCTFREE
    | SQL_TOK_PCTUSED
    | SQL_TOK_PI
    | SQL_TOK_POSITIVE
    | SQL_TOK_POST_TRANSACTION
    | SQL_TOK_PUSH_PRED
    | SQL_TOK_PUSH_SUBQ
    | SQL_TOK_QUARTER
    | SQL_TOK_RADIANS
    | SQL_TOK_RANDOM
    | SQL_TOK_READ
    | SQL_TOK_RECOVER
    | SQL_TOK_RECOVERY
    | SQL_TOK_REGISTER
    | SQL_TOK_REPEAT
    | SQL_TOK_REPLACE
    | SQL_TOK_RESET
    | SQL_TOK_RESETLOGS
    | SQL_TOK_RESULT
    | SQL_TOK_REUSE
    | SQL_TOK_ROUND
    | SQL_TOK_ROWID_OBJECT_ID
    | SQL_TOK_ROWID_PAGE_ID
    | SQL_TOK_ROWID_ROW_NUMBER
    | SQL_TOK_ROWID_TABLESPACE_ID
    | SQL_TOK_ROW_DATE
    | SQL_TOK_ROW_LOCALTIME
    | SQL_TOK_ROW_LOCALTIMESTAMP
    | SQL_TOK_ROW_TIME
    | SQL_TOK_ROW_TIMESTAMP
    | SQL_TOK_RPAD
    | SQL_TOK_RTRIM
    | SQL_TOK_SEGMENT
    | SQL_TOK_SEMI
    | SQL_TOK_SESSION_ID
    | SQL_TOK_SESSION_SERIAL
    | SQL_TOK_SHARE
    | SQL_TOK_SHIFT_LEFT
    | SQL_TOK_SHIFT_RIGHT
    | SQL_TOK_SIGN
    | SQL_TOK_SIN
    | SQL_TOK_SKIP
    | SQL_TOK_SLEEP
    | SQL_TOK_SPFILE
    | SQL_TOK_SPLIT_PART
    | SQL_TOK_SQRT
    | SQL_TOK_STATEMENT_DATE
    | SQL_TOK_STATEMENT_LOCALTIME
    | SQL_TOK_STATEMENT_LOCALTIMESTAMP
    | SQL_TOK_STATEMENT_TIME
    | SQL_TOK_STATEMENT_TIMESTAMP
    | SQL_TOK_STATEMENT_VIEW_SCN
    | SQL_TOK_STOP
    | SQL_TOK_STORAGE
    | SQL_TOK_SUBSTR
    | SQL_TOK_SUBTRACTION
    | SQL_TOK_SUPPLEMENTAL
    | SQL_TOK_TABLESPACE
    | SQL_TOK_TAN
    | SQL_TOK_TO_CHAR
    | SQL_TOK_TO_DATE
    | SQL_TOK_TO_NATIVE_DOUBLE
    | SQL_TOK_TO_NATIVE_REAL
    | SQL_TOK_TO_NUMBER
    | SQL_TOK_TO_TIME
    | SQL_TOK_TO_TIMESTAMP
    | SQL_TOK_TO_TIMESTAMP_TZ    
    | SQL_TOK_TO_TIMESTAMP_WITH_TIME_ZONE    
    | SQL_TOK_TO_TIME_TZ
    | SQL_TOK_TO_TIME_WITH_TIME_ZONE    
    | SQL_TOK_TRANSACTIONAL
    | SQL_TOK_TRANSACTION_DATE
    | SQL_TOK_TRANSACTION_LOCALTIME
    | SQL_TOK_TRANSACTION_LOCALTIMESTAMP
    | SQL_TOK_TRANSACTION_TIME
    | SQL_TOK_TRANSACTION_TIMESTAMP
    | SQL_TOK_TRUNC
    | SQL_TOK_UNLIMITED
    | SQL_TOK_UNLOCK
    | SQL_TOK_UNSET
    | SQL_TOK_UNTIL
    | SQL_TOK_UNUSED
    | SQL_TOK_USER_ID
    | SQL_TOK_USE_DISTINCT_HASH
    | SQL_TOK_USE_HASH
    | SQL_TOK_USE_INL
    | SQL_TOK_USE_MERGE
    | SQL_TOK_USE_NL
    | SQL_TOK_VALIDATE
    | SQL_TOK_VALUE
    | SQL_TOK_WAIT
    | SQL_TOK_WAKEUP
    | SQL_TOK_WEEK
    | SQL_TOK_WEEKDAY
    | SQL_TOK_WIDTH_BUCKET
    | SQL_TOK_YES
    {
    }
    ;

%%

stlInt32 @STL_PARSER_PREFIX@GetNextToken( stlParseParam * param, void *scanner )
{
    YYSTYPE   yylval;
    YYLTYPE   yylloc;

    return YYLEX;
}

stlBool  @STL_PARSER_PREFIX@IsIdentifier( stlInt32  aToken,
                                          stlChar  *aStr,
                                          stlInt32  aStrLen )
{
    stlInt32  i;
    stlBool   sResult = STL_TRUE;

    if( aToken == SQL_TOK_IDENTIFIER )
    {
        sResult = STL_TRUE;
    }
    else
    {
        if( ( stlIsalpha(aStr[0]) != 0 )
            || ( aStr[0] == '_' ) )
        {
            for( i = 1; i <= aStrLen - 1; i ++ )
            {
                STL_TRY( ( stlIsalnum(aStr[i]) != 0 )
                         || ( aStr[i] == '_' )
                         || ( aStr[i] == '$' ) );
            }
        }
    }

    return sResult;

    STL_FINISH;

    return STL_FALSE;
}

