/*******************************************************************************
 * stlTypes.h
 *
 * Copyright (c) 2011, SUNJESOFT Inc.
 *
 *
 * IDENTIFICATION & REVISION
 *        $Id$
 *
 * NOTES
 *    
 *
 ******************************************************************************/


#ifndef _STLTYPES_H_
#define _STLTYPES_H_ 1

/**
 * @file stlTypes.h
 * @brief Standard Layer Type Definitions
 */

/* GENERATED FILE WARNING!  DO NOT EDIT stlTypes.h
 *
 * You must modify stlTypes.h.in instead.
 */

/**
 * @addtogroup STL
 * @{
 */

#cmakedefine _LARGE_FILES 1
#cmakedefine _LARGEFILE_SOURCE 1
#cmakedefine _LARGEFILE64_SOURCE 1
#ifndef _FILE_OFFSET_BITS
#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@
#endif

#define _USE_MATH_DEFINES

#define INCL_WINSOCK_API_TYPEDEFS 1
@STC_INCLUDE_WINSOCK2_H@
@STC_INCLUDE_WS2TCPIP_H@
@STC_INCLUDE_MSWSOCK_H@

@STC_INCLUDE_SYS_RESOURCE_H@
@STC_INCLUDE_SYS_TYPES_H@
@STC_INCLUDE_SYS_IPC_H@
@STC_INCLUDE_SYS_MSG_H@
@STC_INCLUDE_STDIO_H@
@STC_INCLUDE_STDLIB_H@
@STC_INCLUDE_STDARG_H@
@STC_INCLUDE_STDINT_H@
@STC_INCLUDE_FCNTL_H@
@STC_INCLUDE_STRING_H@
@STC_INCLUDE_CTYPE_H@
@STC_INCLUDE_SYS_SOCKET_H@
@STC_INCLUDE_SYS_WAIT_H@
@STC_INCLUDE_LIMITS_H@
@STC_INCLUDE_DIRENT_H@
@STC_INCLUDE_DL_H@
@STC_INCLUDE_DLFCN_H@
@STC_INCLUDE_TIME_H@
@STC_INCLUDE_SEMAPHORE_H@
@STC_INCLUDE_PTHREAD_H@
@STC_INCLUDE_ERRNO_H@
@STC_INCLUDE_SYS_IPC_H@
@STC_INCLUDE_SYS_SHM_H@
@STC_INCLUDE_PWD_H@
@STC_INCLUDE_GRP_H@
@STC_INCLUDE_UNISTD_H@
@STC_INCLUDE_NETINET_IN_H@
@STC_INCLUDE_POLL_H@
@STC_INCLUDE_SYS_EPOLL_H@
@STC_INCLUDE_SYS_UN_H@
@STC_INCLUDE_NET_IF_H@
@STC_INCLUDE_SIGNAL_H@
@STC_INCLUDE_MATH_H@
@STC_INCLUDE_FLOAT_H@
@STC_INCLUDE_ARPA_INET_H@
@STC_INCLUDE_SETJMP_H@
@STC_INCLUDE_INFINIBAND_VERBS_H@

/*
  RDMA 관련 INCLUDE시에 Parsing Error가 발생하며,
  RDMA 관련 파일을 체크할 필요가 없으므로, PARSING을 하지 않도록 설정한다. 
*/
#ifndef S_SPLINT_S
@STC_INCLUDE_INFINIBAND_RDMACM_H@
@STC_INCLUDE_INFINIBAND_RDMAVERBS_H@
#endif

/**
 * @defgroup stlTypes Standard Layer Types Definitions
 * @{
 */

/* centOS에서 isfinite가 오류가 나서 linux compile option에
   std=c99 -D_XOPEN_SOURCE=700 을 추가했더니, inline 키워드가
   붙은 함수들이 ubuntu에서 linking 오류가 발생했음.
   gcc default가 c89이고 inline은 c99부터이니 아마 그동안은
   inline이 제대로 안먹혔던거 같음.
   inline을 제대로 쓰려고 알아보니 header file에 body를 
   정의해야 하며 또한 static을 붙여서 정의를해야하는데,
   기존 파일들을 다 고치려니 엄두가 안나서
   일단 inline을 무시하도록 아래와 같이 재정의 합니다.
   앞으로는 inline 쓰지 마시길... -O2 이상이면 알아서 합니다
   by xcom73 

   2014/03/04: rdma빌드 오류로 인해서 linux에서 std=gnu99로 변경
   by lym
*/
#define inline

/* Are we big endian? */
#cmakedefine STL_IS_BIGENDIAN 1
#cmakedefine STL_SUPPORT_MISSALIGNED_ADDRESS 1
#cmakedefine STL_HAVE_CPUSET 1
#cmakedefine SUPPORT_INFINIBAND 1

#define STL_SHARED_LIBRARY_PREFIX "@CMAKE_SHARED_LIBRARY_PREFIX@"
#define STL_SHARED_LIBRARY_SUFFIX "@CMAKE_SHARED_LIBRARY_SUFFIX@"

#define STL_STATIC_LIBRARY_PREFIX "@CMAKE_STATIC_LIBRARY_PREFIX@"
#define STL_STATIC_LIBRARY_SUFFIX "@CMAKE_STATIC_LIBRARY_SUFFIX@"


/** void형 포인터의 크기 (바이트) */
#define STL_SIZEOF_VOIDP @STC_SIZEOF_VOIDP@

/* Types we may use */

/** 참, 거짓을 표현 */
typedef char stlBool;

/** 문자 타입 */
typedef char stlChar;

/** wide형 문자 타입 */
// typedef wchar_t stlWChar;

/** 부호를 지닌 8비트 정수 */
typedef signed char stlInt8;
/** 부호가 없는 8비트 정수 */
typedef unsigned char stlUInt8;

/** 부호를 지닌 16비트 정수 */
typedef signed short stlInt16;
/** 부호가 없는 16비트 정수 */
typedef unsigned short stlUInt16;

/** 부호를 지닌 32비트 정수 */
typedef signed int stlInt32;
/** 부호가 없는 32비트 정수 */
typedef unsigned int stlUInt32;

/** 부호를 지닌 64비트 정수 */
typedef signed @STC_INT64_VALUE@ stlInt64;
/** 부호가 없는 64비트 정수 */
typedef unsigned @STC_INT64_VALUE@ stlUInt64;

/** platform bit에 따른 가변 long - for XA */

#if STL_SIZEOF_VOIDP == 4
typedef int stlVarInt;
#else
typedef @STC_INT64_VALUE@ stlVarInt;
#endif

typedef struct stlUInt128
{
    stlUInt64      mHighDigit;   /**< 상위 64-bit 정수형 관리 */
    stlUInt64      mLowDigit;    /**< 하위 64-bit 정수형 관리 */
} stlUInt128;

/** 32비트 실수 */
typedef float stlFloat32;

/** 64비트 실수 */
typedef double stlFloat64;

typedef struct stlFile
{
    @STC_FILE_TYPE@ mFileDesc;
} stlFile;

@STC_OS_DIR@ /**< native dir */
@STC_OS_DSO_HANDLE@
@STC_OS_DSO_SYM_HANDLE@

typedef size_t stlSize;
typedef @STC_SSIZE_TYPE@ stlSsize;

typedef @STC_OFFSET_TYPE@ stlOffset;

typedef @SOCKET_SIZE_TYPE@ stlSockLen;

typedef ino_t stlInode;

@STC_OS_TIMEVAL@ /* native timeval */

/** number of microseconds since 00:00:00 january 1, 1970 UTC */
typedef stlUInt64 stlTime;

/** ANSI time_t 표현 */
typedef time_t stlAnsiTime;

/** timer */
@STC_TIMER_TYPE@

/** signal event structure */
typedef struct sigevent stlSigEvent;

/** signal event structure */
typedef struct itimerspec stlTimerSpec;

/** intervals for I/O timeouts, in microseconds */
typedef stlUInt64 stlInterval;
/** short interval for I/O timeouts, in microseconds */
typedef stlUInt32 stlShortInterval;

typedef va_list stlVarList;

@STC_SEM_HANDLE@
@STC_SHM_HANDLE@
@STC_NAMED_SEM_HANDLE@
@STC_UNNAMED_SEM_HANDLE@

#define STL_BOOL_SIZE     ( sizeof( stlBool ) )

// #define STL_WCHAR_SIZE    ( sizeof( stlWChar ) )

#define STL_INT8_SIZE     ( sizeof( stlInt8 ) )
#define STL_UINT8_SIZE    ( sizeof( stlUInt8 ) )
#define STL_INT16_SIZE    ( sizeof( stlInt16 ) )
#define STL_UINT16_SIZE   ( sizeof( stlUInt16 ) )
#define STL_INT32_SIZE    ( sizeof( stlInt32 ) )
#define STL_UINT32_SIZE   ( sizeof( stlUInt32 ) )
#define STL_INT64_SIZE    ( sizeof( stlInt64 ) )
#define STL_UINT64_SIZE   ( sizeof( stlUInt64 ) )
// #define STL_INT128_SIZE   ( sizeof( stlInt128 ) )
#define STL_UINT128_SIZE  ( sizeof( stlUInt128 ) )

#define STL_FLOAT32_SIZE  ( sizeof( stlFloat32 ) )
#define STL_FLOAT64_SIZE  ( sizeof( stlFloat64 ) )


#define STL_UINT64_HIGH_BIT   ( STL_UINT64_C(0x8000000000000000) )
#define STL_UINT64_LOW_BIT    ( STL_UINT64_C(0x0000000000000001) )


/**
 * @brief 성공한다면 STL_SUCCESS, 그렇지 않다면 STL_FAILURE 를 갖는다.
 */
typedef enum
{
    STL_SUCCESS = 0,
    STL_FAILURE
} stlStatus;

typedef struct stlProc
{
    @STC_PROC_HANDLE@
} stlProc;

#define STL_THREAD_FUNC @STC_THREAD_FUNC@

typedef struct stlThread stlThread;
/**
 * @brief Worker Thread의 표준 프로토타입
 */
typedef void *(STL_THREAD_FUNC *stlThreadFunc)( stlThread *, void * );

/**
 * @brief Thread 구조체
 * @note stlThread의 제일 상위 2개의 멤버는 변경시켜서는 안된다.
 *  <BR> stlThread를 stlThreadHandle로 형변환 시켜서 사용하는 경우가 있다 
 */
struct stlThread
{
    @STC_THREAD_HANDLE@
    stlProc         mProc;
    stlStatus       mExitStatus;
    void          * mArgs;
    stlThreadFunc   mFunction;
};

/**
 * @brief Thread Handle 구조체
 */
typedef struct stlThreadHandle
{
    @STC_THREAD_HANDLE@
    stlProc   mProc;
} stlThreadHandle;

/**
 * @brief Thread 속성 구조체
 */
typedef struct stlThreadAttr
{
    @STC_THREAD_ATTR@
} stlThreadAttr;

#define STL_THREAD_ONCE_INIT @STC_THREAD_ONCE_INIT@

typedef struct stlThreadOnce
{
    @STC_THREAD_ONCE@
} stlThreadOnce;

/**
 * Structure for determining user ownership.
 */
@STC_UID@

/**
 * Structure for determining group ownership.
 */
@STC_GID@
@STC_DEVICE@


/* Mechanisms to properly type numeric literals */
@STC_INT64_LITERAL@
@STC_UINT64_LITERAL@


/** OS Path Separator */
@STC_PATH_SEPARATOR@
@STC_PATH_SEPARATOR_CHARACTER@

/** mechanism to properly type stlTime literals */
#define STL_TIME_C(val) STL_INT64_C(val)

#ifdef INT8_MIN
#define STL_INT8_MIN   INT8_MIN
#else
#define STL_INT8_MIN   (-0x7f - 1)
#endif

#ifdef INT8_MAX
#define STL_INT8_MAX  INT8_MAX
#else
#define STL_INT8_MAX   (0x7f)
#endif

#ifdef UINT8_MIN
#define STL_UINT8_MIN  UINT8_MIN
#else
#define STL_UINT8_MIN  (0)
#endif

#ifdef UINT8_MAX
#define STL_UINT8_MAX  UINT8_MAX
#else
#define STL_UINT8_MAX  (0xff)
#endif

#ifdef INT16_MIN
#define STL_INT16_MIN   INT16_MIN
#else
#define STL_INT16_MIN   (-0x7fff - 1)
#endif

#ifdef INT16_MAX
#define STL_INT16_MAX  INT16_MAX
#else
#define STL_INT16_MAX  (0x7fff)
#endif

#ifdef UINT16_MAX
#define STL_UINT16_MAX  UINT16_MAX
#else
#define STL_UINT16_MAX  (0xffff)
#endif

#ifdef UINT16_MIN
#define STL_UINT16_MIN  UINT16_MIN
#else
#define STL_UINT16_MIN  (0)
#endif

#ifdef INT32_MIN
#define STL_INT32_MIN   INT32_MIN
#else
#define STL_INT32_MIN   (-0x7fffffff - 1)
#endif

#ifdef INT32_MAX
#define STL_INT32_MAX  INT32_MAX
#else
#define STL_INT32_MAX  0x7fffffff
#endif

#ifdef UINT32_MAX
#define STL_UINT32_MAX  UINT32_MAX
#else
#define STL_UINT32_MAX  (0xffffffffU)
#endif

#ifdef UINT32_MIN
#define STL_UINT32_MIN  UINT32_MIN
#else
#define STL_UINT32_MIN  (0)
#endif

#ifdef INT64_MIN
#define STL_INT64_MIN   INT64_MIN
#else
#define STL_INT64_MIN   (STL_INT64_C(-0x7fffffffffffffff) - 1)
#endif

#ifdef INT64_MAX
#define STL_INT64_MAX   INT64_MAX
#else
#define STL_INT64_MAX   STL_INT64_C(0x7fffffffffffffff)
#endif

#ifdef UINT64_MAX
#define STL_UINT64_MAX  UINT64_MAX
#else
#define STL_UINT64_MAX  STL_UINT64_C(0xffffffffffffffff)
#endif

#ifdef UINT64_MIN
#define STL_UINT64_MIN  UINT64_MIN
#else
#define STL_UINT64_MIN  (0)
#endif

extern const stlUInt128 gUInt128MAX;
extern const stlUInt128 gUInt128MIN;
extern const stlUInt128 g10Pow19;

extern const stlUInt64  gPreDefinedPow[];
extern const stlInt32   gPreDefinedPowMax;

extern const stlUInt128 gPreDefinedPowUInt128[];
extern const stlInt32   gPreDefinedPowMaxUInt128;

#define STL_UINT128_MAX  gUInt128MAX
#define STL_UINT128_MIN  gUInt128MIN

#define STL_FLOAT64_2POW32      ( (stlFloat64) 4294967296.0 )
#define STL_FLOAT64_2POW64      ( (stlFloat64) 18446744073709551616.0 )

#define STL_SIZE_MAX    (~((stlSize)0))

#ifdef INFINITY 
#define STL_FLOAT32_INFINITY    ( (stlFloat32) INFINITY )
#define STL_FLOAT64_INFINITY    ( (stlFloat64) INFINITY )
#else
#define STL_FLOAT32_INFINITY    ( (stlFloat32) HUGE_VAL * HUGE_VAL )
#define STL_FLOAT64_INFINITY    ( (stlFloat64) HUGE_VAL * HUGE_VAL )
#endif

#ifdef FLT_DIG
#define STL_FLT_DIG      (FLT_DIG)
#else 
#define STL_FLT_DIG      (6)
#endif

#ifdef DBL_DIG
#define STL_DBL_DIG         (DBL_DIG)
#define STL_DBL_MAX_10_EXP  (DBL_MAX_10_EXP)
#define STL_DBL_MIN_10_EXP  (DBL_MIN_10_EXP)
#else 
#define STL_DBL_DIG         (15)
#define STL_DBL_MAX_10_EXP  (308)
#define STL_DBL_MIN_10_EXP  (-307)
#endif

#define STL_DIGEST_SIZE  (20)
#define STL_DIGEST_HEX_SIZE  (STL_DIGEST_SIZE * 2 + 1)

/** @} */

/**
 * @addtogroup stlNetworkIo
 * @{
 */

/** ST Socket Descriptor */
@STC_OS_SOCKET@

/* 확인 필요: 이 부분이 "#define stlInetAddr inet_addr" 로 변경됨. */
@STC_SOCKET_INET_ADDR@

/**
 * @brief IPv4 in_addr을 대표하는 구조체
 */
@STC_SOCKET_DEFINE_INET_ADDR@

/**
 * @brief IPv6 in_addr을 대표하는 구조체
 */
@STC_SOCKET_DEFINE_INET6_ADDR@


/** @remark short가 16bit가 아닌 system들 때문에 stlUInt16을 사용함... */
typedef stlUInt16            stlPort;

/** Socket Address 구조체 */
typedef struct stlSockAddr
{
    union
    {
        struct sockaddr     mSockCommon; /**< Common header 용 */
        struct sockaddr_in  mIn4;  /**< IPv4 용 */
        @STC_SOCKADDR_IN6@  /**< IPv6 용 */
        @STC_SOCKADDR_UN@   /**< UNIX DOMAIN 용 */
    }mSa;
} stlSockAddr;

/**
 * @brief IO vector 구조체
 */
@STC_SOCKET_DEFINE_IOVEC@

/**
 * @brief Message Header 구조체
 */
@STC_SOCKET_DEFINE_MSGHDR@

/**
 * @brief Control Message Header 구조체
 */
@STC_SOCKET_DEFINE_CMSGHDR@


/**
 * @brief Infiniband RC Interface Handle
 */
typedef void * stlRcHandle;


/** @} */

/**
 * @addtogroup stlPoll
 * @{
 */

/**
 * @brief 소켓 지시자와 이벤트를 저장하기 위한 구조체
 */ 
typedef struct stlPollFd
{
    @STC_SOCKET_TYPE@ mSocketHandle; /**< 소켓 지시자 */
    stlInt16    mReqEvents;    /**< 요청 이벤트 */
    stlInt16    mRetEvents;    /**< 반환된 이벤트 */
} stlPollFd;

/**
 * @brief 소켓 지시자와 이벤트를 저장하기 위한 구조체
 */ 
typedef struct stlPollFdEx
{
    stlPollFd   mPollFd;       /**< Native PollFd */
    void      * mUserContext;  /**< Socket과 관련된 user context */
} stlPollFdEx;

@STC_POLLSET_EPOLL_EVENT_TYPE@

/**
 * @brief 많은 수의 소켓 이벤트 관리를 위한 구조체
 */ 
typedef struct stlPollSet
{
    @STC_POLLSET_FD_ARRAY@
    stlPollFdEx * mQuerySet;       /**< query pollfd 배열 */
    stlPollFdEx * mResultSet;      /**< result pollfd 배열 */
    stlInt32      mMaxPollFdNum;   /**< 생성된 pollfd의 수 */
    stlInt32      mCurPollFdNum;   /**< 현재 이벤트를 대기할 pollfd의 수 */
    stlInt32      mEpollFd;        /**< epoll file descriptor ( only epoll ) */
    @STC_POLLSET_EPOLL_EVENT@
    @STC_POLLSET_MAX_FD@
    @STC_POLLSET_READ_FD_SET@
    @STC_POLLSET_WRITE_FD_SET@
    @STC_POLLSET_ERROR_FD_SET@
} stlPollSet;

/** @} */

/**
 * @addtogroup stlCommMgr
 * @{
 */

/** Communication을 위한 Context 구조체 */
typedef struct stlContext
{
    stlPollFd    mPollFd;
    stlSockAddr  mSocketAddr;
} stlContext;

/** Communication Manager에서 사용하는 Packet Header */
typedef struct stlPacketHeader
{
    stlInt32   mEndian;
    stlInt32   mPacketLength;
} stlPacketHeader;

/* 성능 향상을 위해 validation을 수행하지 않도록 하는 옵션 */
#cmakedefine STL_IS_IGNORE_VALIDATION  1

/** @} */

/** @} */

#endif /* _STLTYPES_H_ */
